/*! For license information please see CoCreate-twilio.js.LICENSE.txt */
!function(n,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.CoCreate=e():(n.CoCreate=n.CoCreate||{},n.CoCreate.twilio=e())}(this,(function(){return(()=>{var __webpack_modules__={"./node_modules/@twilio/audioplayer/es5/AudioPlayer.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nvar _regenerator = __webpack_require__(/*! babel-runtime/regenerator */ "./node_modules/babel-runtime/regenerator/index.js");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator["throw"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : new P(function (resolve) {\n                resolve(result.value);\n            }).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nvar Deferred_1 = __webpack_require__(/*! ./Deferred */ "./node_modules/@twilio/audioplayer/es5/Deferred.js");\nvar EventTarget_1 = __webpack_require__(/*! ./EventTarget */ "./node_modules/@twilio/audioplayer/es5/EventTarget.js");\n/**\n * An {@link AudioPlayer} is an HTMLAudioElement-like object that uses AudioContext\n *   to circumvent browser limitations.\n */\n\nvar AudioPlayer = function (_EventTarget_1$defaul) {\n    _inherits(AudioPlayer, _EventTarget_1$defaul);\n\n    /**\n     * @private\n     */\n    function AudioPlayer(audioContext) {\n        var srcOrOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        _classCallCheck(this, AudioPlayer);\n\n        /**\n         * The AudioBufferSourceNode of the actively loaded sound. Null if a sound\n         *   has not been loaded yet. This is re-used for each time the sound is\n         *   played.\n         */\n        var _this = _possibleConstructorReturn(this, (AudioPlayer.__proto__ || Object.getPrototypeOf(AudioPlayer)).call(this));\n\n        _this._audioNode = null;\n        /**\n         * An Array of deferred-like objects for each pending `play` Promise. When\n         *   .pause() is called or .src is set, all pending play Promises are\n         *   immediately rejected.\n         */\n        _this._pendingPlayDeferreds = [];\n        /**\n         * Whether or not the audio element should loop. If disabled during playback,\n         *   playing continues until the sound ends and then stops looping.\n         */\n        _this._loop = false;\n        /**\n         * The source URL of the sound to play. When set, the currently playing sound will stop.\n         */\n        _this._src = \'\';\n        /**\n         * The current sinkId of the device audio is being played through.\n         */\n        _this._sinkId = \'default\';\n        if (typeof srcOrOptions !== \'string\') {\n            options = srcOrOptions;\n        }\n        _this._audioContext = audioContext;\n        _this._audioElement = new (options.AudioFactory || Audio)();\n        _this._bufferPromise = _this._createPlayDeferred().promise;\n        _this._destination = _this._audioContext.destination;\n        _this._gainNode = _this._audioContext.createGain();\n        _this._gainNode.connect(_this._destination);\n        _this._XMLHttpRequest = options.XMLHttpRequestFactory || XMLHttpRequest;\n        _this.addEventListener(\'canplaythrough\', function () {\n            _this._resolvePlayDeferreds();\n        });\n        if (typeof srcOrOptions === \'string\') {\n            _this.src = srcOrOptions;\n        }\n        return _this;\n    }\n\n    _createClass(AudioPlayer, [{\n        key: "load",\n\n        /**\n         * Stop any ongoing playback and reload the source file.\n         */\n        value: function load() {\n            this._load(this._src);\n        }\n        /**\n         * Pause the audio coming from this AudioPlayer. This will reject any pending\n         *   play Promises.\n         */\n\n    }, {\n        key: "pause",\n        value: function pause() {\n            if (this.paused) {\n                return;\n            }\n            this._audioElement.pause();\n            this._audioNode.stop();\n            this._audioNode.disconnect(this._gainNode);\n            this._audioNode = null;\n            this._rejectPlayDeferreds(new Error(\'The play() request was interrupted by a call to pause().\'));\n        }\n        /**\n         * Play the sound. If the buffer hasn\'t loaded yet, wait for the buffer to load. If\n         *   the source URL is not set yet, this Promise will remain pending until a source\n         *   URL is set.\n         */\n\n    }, {\n        key: "play",\n        value: function play() {\n            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n                var _this2 = this;\n\n                var buffer;\n                return _regenerator2.default.wrap(function _callee$(_context) {\n                    while (1) {\n                        switch (_context.prev = _context.next) {\n                            case 0:\n                                if (this.paused) {\n                                    _context.next = 6;\n                                    break;\n                                }\n\n                                _context.next = 3;\n                                return this._bufferPromise;\n\n                            case 3:\n                                if (this.paused) {\n                                    _context.next = 5;\n                                    break;\n                                }\n\n                                return _context.abrupt("return");\n\n                            case 5:\n                                throw new Error(\'The play() request was interrupted by a call to pause().\');\n\n                            case 6:\n                                this._audioNode = this._audioContext.createBufferSource();\n                                this._audioNode.loop = this.loop;\n                                this._audioNode.addEventListener(\'ended\', function () {\n                                    if (_this2._audioNode && _this2._audioNode.loop) {\n                                        return;\n                                    }\n                                    _this2.dispatchEvent(\'ended\');\n                                });\n                                _context.next = 11;\n                                return this._bufferPromise;\n\n                            case 11:\n                                buffer = _context.sent;\n\n                                if (!this.paused) {\n                                    _context.next = 14;\n                                    break;\n                                }\n\n                                throw new Error(\'The play() request was interrupted by a call to pause().\');\n\n                            case 14:\n                                this._audioNode.buffer = buffer;\n                                this._audioNode.connect(this._gainNode);\n                                this._audioNode.start();\n\n                                if (!this._audioElement.srcObject) {\n                                    _context.next = 19;\n                                    break;\n                                }\n\n                                return _context.abrupt("return", this._audioElement.play());\n\n                            case 19:\n                            case "end":\n                                return _context.stop();\n                        }\n                    }\n                }, _callee, this);\n            }));\n        }\n        /**\n         * Change which device the sound should play through.\n         * @param sinkId - The sink of the device to play sound through.\n         */\n\n    }, {\n        key: "setSinkId",\n        value: function setSinkId(sinkId) {\n            return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee2() {\n                return _regenerator2.default.wrap(function _callee2$(_context2) {\n                    while (1) {\n                        switch (_context2.prev = _context2.next) {\n                            case 0:\n                                if (!(typeof this._audioElement.setSinkId !== \'function\')) {\n                                    _context2.next = 2;\n                                    break;\n                                }\n\n                                throw new Error(\'This browser does not support setSinkId.\');\n\n                            case 2:\n                                if (!(sinkId === this.sinkId)) {\n                                    _context2.next = 4;\n                                    break;\n                                }\n\n                                return _context2.abrupt("return");\n\n                            case 4:\n                                if (!(sinkId === \'default\')) {\n                                    _context2.next = 11;\n                                    break;\n                                }\n\n                                if (!this.paused) {\n                                    this._gainNode.disconnect(this._destination);\n                                }\n                                this._audioElement.srcObject = null;\n                                this._destination = this._audioContext.destination;\n                                this._gainNode.connect(this._destination);\n                                this._sinkId = sinkId;\n                                return _context2.abrupt("return");\n\n                            case 11:\n                                _context2.next = 13;\n                                return this._audioElement.setSinkId(sinkId);\n\n                            case 13:\n                                if (!this._audioElement.srcObject) {\n                                    _context2.next = 15;\n                                    break;\n                                }\n\n                                return _context2.abrupt("return");\n\n                            case 15:\n                                this._gainNode.disconnect(this._audioContext.destination);\n                                this._destination = this._audioContext.createMediaStreamDestination();\n                                this._audioElement.srcObject = this._destination.stream;\n                                this._sinkId = sinkId;\n                                this._gainNode.connect(this._destination);\n\n                            case 20:\n                            case "end":\n                                return _context2.stop();\n                        }\n                    }\n                }, _callee2, this);\n            }));\n        }\n        /**\n         * Create a Deferred for a Promise that will be resolved when .src is set or rejected\n         *   when .pause is called.\n         */\n\n    }, {\n        key: "_createPlayDeferred",\n        value: function _createPlayDeferred() {\n            var deferred = new Deferred_1.default();\n            this._pendingPlayDeferreds.push(deferred);\n            return deferred;\n        }\n        /**\n         * Stop current playback and load a sound file.\n         * @param src - The source URL of the file to load\n         */\n\n    }, {\n        key: "_load",\n        value: function _load(src) {\n            var _this3 = this;\n\n            if (this._src && this._src !== src) {\n                this.pause();\n            }\n            this._src = src;\n            this._bufferPromise = new Promise(function (resolve, reject) {\n                return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee3() {\n                    var buffer;\n                    return _regenerator2.default.wrap(function _callee3$(_context3) {\n                        while (1) {\n                            switch (_context3.prev = _context3.next) {\n                                case 0:\n                                    if (src) {\n                                        _context3.next = 2;\n                                        break;\n                                    }\n\n                                    return _context3.abrupt("return", this._createPlayDeferred().promise);\n\n                                case 2:\n                                    _context3.next = 4;\n                                    return bufferSound(this._audioContext, this._XMLHttpRequest, src);\n\n                                case 4:\n                                    buffer = _context3.sent;\n\n                                    this.dispatchEvent(\'canplaythrough\');\n                                    resolve(buffer);\n\n                                case 7:\n                                case "end":\n                                    return _context3.stop();\n                            }\n                        }\n                    }, _callee3, this);\n                }));\n            });\n        }\n        /**\n         * Reject all deferreds for the Play promise.\n         * @param reason\n         */\n\n    }, {\n        key: "_rejectPlayDeferreds",\n        value: function _rejectPlayDeferreds(reason) {\n            var deferreds = this._pendingPlayDeferreds;\n            deferreds.splice(0, deferreds.length).forEach(function (_ref) {\n                var reject = _ref.reject;\n                return reject(reason);\n            });\n        }\n        /**\n         * Resolve all deferreds for the Play promise.\n         * @param result\n         */\n\n    }, {\n        key: "_resolvePlayDeferreds",\n        value: function _resolvePlayDeferreds(result) {\n            var deferreds = this._pendingPlayDeferreds;\n            deferreds.splice(0, deferreds.length).forEach(function (_ref2) {\n                var resolve = _ref2.resolve;\n                return resolve(result);\n            });\n        }\n    }, {\n        key: "destination",\n        get: function get() {\n            return this._destination;\n        }\n    }, {\n        key: "loop",\n        get: function get() {\n            return this._loop;\n        },\n        set: function set(shouldLoop) {\n            // If a sound is already looping, it should continue playing\n            //   the current playthrough and then stop.\n            if (!shouldLoop && this.loop && !this.paused) {\n                var _pauseAfterPlaythrough = function _pauseAfterPlaythrough() {\n                    self._audioNode.removeEventListener(\'ended\', _pauseAfterPlaythrough);\n                    self.pause();\n                };\n\n                var self = this;\n\n                this._audioNode.addEventListener(\'ended\', _pauseAfterPlaythrough);\n            }\n            this._loop = shouldLoop;\n        }\n        /**\n         * Whether the audio element is muted.\n         */\n\n    }, {\n        key: "muted",\n        get: function get() {\n            return this._gainNode.gain.value === 0;\n        },\n        set: function set(shouldBeMuted) {\n            this._gainNode.gain.value = shouldBeMuted ? 0 : 1;\n        }\n        /**\n         * Whether the sound is paused. this._audioNode only exists when sound is playing;\n         *   otherwise AudioPlayer is considered paused.\n         */\n\n    }, {\n        key: "paused",\n        get: function get() {\n            return this._audioNode === null;\n        }\n    }, {\n        key: "src",\n        get: function get() {\n            return this._src;\n        },\n        set: function set(src) {\n            this._load(src);\n        }\n        /**\n         * The srcObject of the HTMLMediaElement\n         */\n\n    }, {\n        key: "srcObject",\n        get: function get() {\n            return this._audioElement.srcObject;\n        },\n        set: function set(srcObject) {\n            this._audioElement.srcObject = srcObject;\n        }\n    }, {\n        key: "sinkId",\n        get: function get() {\n            return this._sinkId;\n        }\n    }]);\n\n    return AudioPlayer;\n}(EventTarget_1.default);\n\nexports.default = AudioPlayer;\n/**\n * Use XMLHttpRequest to load the AudioBuffer of a remote audio asset.\n * @private\n * @param context - The AudioContext to use to decode the audio data\n * @param RequestFactory - The XMLHttpRequest factory to build\n * @param src - The URL of the audio asset to load.\n * @returns A Promise containing the decoded AudioBuffer.\n */\n// tslint:disable-next-line:variable-name\nfunction bufferSound(context, RequestFactory, src) {\n    return __awaiter(this, void 0, void 0, /*#__PURE__*/_regenerator2.default.mark(function _callee4() {\n        var request, event;\n        return _regenerator2.default.wrap(function _callee4$(_context4) {\n            while (1) {\n                switch (_context4.prev = _context4.next) {\n                    case 0:\n                        request = new RequestFactory();\n\n                        request.open(\'GET\', src, true);\n                        request.responseType = \'arraybuffer\';\n                        _context4.next = 5;\n                        return new Promise(function (resolve) {\n                            request.addEventListener(\'load\', resolve);\n                            request.send();\n                        });\n\n                    case 5:\n                        event = _context4.sent;\n                        _context4.prev = 6;\n                        return _context4.abrupt("return", context.decodeAudioData(event.target.response));\n\n                    case 10:\n                        _context4.prev = 10;\n                        _context4.t0 = _context4["catch"](6);\n                        return _context4.abrupt("return", new Promise(function (resolve) {\n                            context.decodeAudioData(event.target.response, resolve);\n                        }));\n\n                    case 13:\n                    case "end":\n                        return _context4.stop();\n                }\n            }\n        }, _callee4, this, [[6, 10]]);\n    }));\n}\n//# sourceMappingURL=AudioPlayer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@twilio/audioplayer/es5/AudioPlayer.js\n')},"./node_modules/@twilio/audioplayer/es5/Deferred.js":(__unused_webpack_module,exports)=>{"use strict";eval('\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nObject.defineProperty(exports, "__esModule", ({ value: true }));\n\nvar Deferred = function () {\n    function Deferred() {\n        var _this = this;\n\n        _classCallCheck(this, Deferred);\n\n        this.promise = new Promise(function (resolve, reject) {\n            _this._resolve = resolve;\n            _this._reject = reject;\n        });\n    }\n\n    _createClass(Deferred, [{\n        key: "reject",\n        get: function get() {\n            return this._reject;\n        }\n    }, {\n        key: "resolve",\n        get: function get() {\n            return this._resolve;\n        }\n    }]);\n\n    return Deferred;\n}();\n\nexports.default = Deferred;\n//# sourceMappingURL=Deferred.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby9hdWRpb3BsYXllci9lczUvRGVmZXJyZWQuanM/YzFkZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixnQ0FBZ0MsMkNBQTJDLGdCQUFnQixrQkFBa0IsT0FBTywyQkFBMkIsd0RBQXdELGdDQUFnQyx1REFBdUQsMkRBQTJELEVBQUUsRUFBRSx5REFBeUQscUVBQXFFLDZEQUE2RCxvQkFBb0IsR0FBRyxFQUFFOztBQUVqakIsaURBQWlELDBDQUEwQywwREFBMEQsRUFBRTs7QUFFdkosOENBQTZDLENBQUMsY0FBYyxFQUFDOztBQUU3RDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0EsQ0FBQzs7QUFFRCxlQUFlO0FBQ2YiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHR3aWxpby9hdWRpb3BsYXllci9lczUvRGVmZXJyZWQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG52YXIgRGVmZXJyZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGVmZXJyZWQoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERlZmVycmVkKTtcblxuICAgICAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBfdGhpcy5fcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgICAgICBfdGhpcy5fcmVqZWN0ID0gcmVqZWN0O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoRGVmZXJyZWQsIFt7XG4gICAgICAgIGtleTogXCJyZWplY3RcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVqZWN0O1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwicmVzb2x2ZVwiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZXNvbHZlO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIERlZmVycmVkO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBEZWZlcnJlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPURlZmVycmVkLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@twilio/audioplayer/es5/Deferred.js\n')},"./node_modules/@twilio/audioplayer/es5/EventTarget.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nvar events_1 = __webpack_require__(/*! events */ "./node_modules/events/events.js");\n\nvar EventTarget = function () {\n    function EventTarget() {\n        _classCallCheck(this, EventTarget);\n\n        this._eventEmitter = new events_1.EventEmitter();\n    }\n\n    _createClass(EventTarget, [{\n        key: "addEventListener",\n        value: function addEventListener(name, handler) {\n            return this._eventEmitter.addListener(name, handler);\n        }\n    }, {\n        key: "dispatchEvent",\n        value: function dispatchEvent(name) {\n            var _eventEmitter;\n\n            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n                args[_key - 1] = arguments[_key];\n            }\n\n            return (_eventEmitter = this._eventEmitter).emit.apply(_eventEmitter, [name].concat(args));\n        }\n    }, {\n        key: "removeEventListener",\n        value: function removeEventListener(name, handler) {\n            return this._eventEmitter.removeListener(name, handler);\n        }\n    }]);\n\n    return EventTarget;\n}();\n\nexports.default = EventTarget;\n//# sourceMappingURL=EventTarget.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby9hdWRpb3BsYXllci9lczUvRXZlbnRUYXJnZXQuanM/OGM3MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixnQ0FBZ0MsMkNBQTJDLGdCQUFnQixrQkFBa0IsT0FBTywyQkFBMkIsd0RBQXdELGdDQUFnQyx1REFBdUQsMkRBQTJELEVBQUUsRUFBRSx5REFBeUQscUVBQXFFLDZEQUE2RCxvQkFBb0IsR0FBRyxFQUFFOztBQUVqakIsaURBQWlELDBDQUEwQywwREFBMEQsRUFBRTs7QUFFdkosOENBQTZDLENBQUMsY0FBYyxFQUFDO0FBQzdELGVBQWUsbUJBQU8sQ0FBQywrQ0FBUTs7QUFFL0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsOEZBQThGLGFBQWE7QUFDM0c7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLENBQUM7O0FBRUQsZUFBZTtBQUNmIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0B0d2lsaW8vYXVkaW9wbGF5ZXIvZXM1L0V2ZW50VGFyZ2V0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBldmVudHNfMSA9IHJlcXVpcmUoXCJldmVudHNcIik7XG5cbnZhciBFdmVudFRhcmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBFdmVudFRhcmdldCgpIHtcbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEV2ZW50VGFyZ2V0KTtcblxuICAgICAgICB0aGlzLl9ldmVudEVtaXR0ZXIgPSBuZXcgZXZlbnRzXzEuRXZlbnRFbWl0dGVyKCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKEV2ZW50VGFyZ2V0LCBbe1xuICAgICAgICBrZXk6IFwiYWRkRXZlbnRMaXN0ZW5lclwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZXZlbnRFbWl0dGVyLmFkZExpc3RlbmVyKG5hbWUsIGhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiZGlzcGF0Y2hFdmVudFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChuYW1lKSB7XG4gICAgICAgICAgICB2YXIgX2V2ZW50RW1pdHRlcjtcblxuICAgICAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiAoX2V2ZW50RW1pdHRlciA9IHRoaXMuX2V2ZW50RW1pdHRlcikuZW1pdC5hcHBseShfZXZlbnRFbWl0dGVyLCBbbmFtZV0uY29uY2F0KGFyZ3MpKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInJlbW92ZUV2ZW50TGlzdGVuZXJcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgaGFuZGxlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2V2ZW50RW1pdHRlci5yZW1vdmVMaXN0ZW5lcihuYW1lLCBoYW5kbGVyKTtcbiAgICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBFdmVudFRhcmdldDtcbn0oKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gRXZlbnRUYXJnZXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FdmVudFRhcmdldC5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@twilio/audioplayer/es5/EventTarget.js\n')},"./node_modules/@twilio/audioplayer/es5/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar AudioPlayer = __webpack_require__(/*! ./AudioPlayer */ "./node_modules/@twilio/audioplayer/es5/AudioPlayer.js");\n\nmodule.exports = AudioPlayer.default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvQHR3aWxpby9hdWRpb3BsYXllci9lczUvaW5kZXguanM/NjFkNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixrQkFBa0IsbUJBQU8sQ0FBQyw0RUFBZTs7QUFFekMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHR3aWxpby9hdWRpb3BsYXllci9lczUvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBBdWRpb1BsYXllciA9IHJlcXVpcmUoJy4vQXVkaW9QbGF5ZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBBdWRpb1BsYXllci5kZWZhdWx0OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@twilio/audioplayer/es5/index.js\n')},"./node_modules/array-filter/index.js":module=>{eval("\n/**\n * Array#filter.\n *\n * @param {Array} arr\n * @param {Function} fn\n * @param {Object=} self\n * @return {Array}\n * @throw TypeError\n */\n\nmodule.exports = function (arr, fn, self) {\n  if (arr.filter) return arr.filter(fn, self);\n  if (void 0 === arr || null === arr) throw new TypeError;\n  if ('function' != typeof fn) throw new TypeError;\n  var ret = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (!hasOwn.call(arr, i)) continue;\n    var val = arr[i];\n    if (fn.call(self, val, i, arr)) ret.push(val);\n  }\n  return ret;\n};\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvYXJyYXktZmlsdGVyL2luZGV4LmpzP2IyYmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQixXQUFXLFNBQVM7QUFDcEIsV0FBVyxRQUFRO0FBQ25CLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsZ0JBQWdCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9hcnJheS1maWx0ZXIvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogQXJyYXkjZmlsdGVyLlxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGFyclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gc2VsZlxuICogQHJldHVybiB7QXJyYXl9XG4gKiBAdGhyb3cgVHlwZUVycm9yXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJyLCBmbiwgc2VsZikge1xuICBpZiAoYXJyLmZpbHRlcikgcmV0dXJuIGFyci5maWx0ZXIoZm4sIHNlbGYpO1xuICBpZiAodm9pZCAwID09PSBhcnIgfHwgbnVsbCA9PT0gYXJyKSB0aHJvdyBuZXcgVHlwZUVycm9yO1xuICBpZiAoJ2Z1bmN0aW9uJyAhPSB0eXBlb2YgZm4pIHRocm93IG5ldyBUeXBlRXJyb3I7XG4gIHZhciByZXQgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoIWhhc093bi5jYWxsKGFyciwgaSkpIGNvbnRpbnVlO1xuICAgIHZhciB2YWwgPSBhcnJbaV07XG4gICAgaWYgKGZuLmNhbGwoc2VsZiwgdmFsLCBpLCBhcnIpKSByZXQucHVzaCh2YWwpO1xuICB9XG4gIHJldHVybiByZXQ7XG59O1xuXG52YXIgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/array-filter/index.js\n")},"./node_modules/available-typed-arrays/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar filter = __webpack_require__(/*! array-filter */ \"./node_modules/array-filter/index.js\");\n\nmodule.exports = function availableTypedArrays() {\n\treturn filter([\n\t\t'BigInt64Array',\n\t\t'BigUint64Array',\n\t\t'Float32Array',\n\t\t'Float64Array',\n\t\t'Int16Array',\n\t\t'Int32Array',\n\t\t'Int8Array',\n\t\t'Uint16Array',\n\t\t'Uint32Array',\n\t\t'Uint8Array',\n\t\t'Uint8ClampedArray'\n\t], function (typedArray) {\n\t\treturn typeof __webpack_require__.g[typedArray] === 'function';\n\t});\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvYXZhaWxhYmxlLXR5cGVkLWFycmF5cy9pbmRleC5qcz83MjI2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGFBQWEsbUJBQU8sQ0FBQywwREFBYzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixxQkFBTTtBQUN0QixFQUFFO0FBQ0YiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXZhaWxhYmxlLXR5cGVkLWFycmF5cy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGZpbHRlciA9IHJlcXVpcmUoJ2FycmF5LWZpbHRlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGF2YWlsYWJsZVR5cGVkQXJyYXlzKCkge1xuXHRyZXR1cm4gZmlsdGVyKFtcblx0XHQnQmlnSW50NjRBcnJheScsXG5cdFx0J0JpZ1VpbnQ2NEFycmF5Jyxcblx0XHQnRmxvYXQzMkFycmF5Jyxcblx0XHQnRmxvYXQ2NEFycmF5Jyxcblx0XHQnSW50MTZBcnJheScsXG5cdFx0J0ludDMyQXJyYXknLFxuXHRcdCdJbnQ4QXJyYXknLFxuXHRcdCdVaW50MTZBcnJheScsXG5cdFx0J1VpbnQzMkFycmF5Jyxcblx0XHQnVWludDhBcnJheScsXG5cdFx0J1VpbnQ4Q2xhbXBlZEFycmF5J1xuXHRdLCBmdW5jdGlvbiAodHlwZWRBcnJheSkge1xuXHRcdHJldHVybiB0eXBlb2YgZ2xvYmFsW3R5cGVkQXJyYXldID09PSAnZnVuY3Rpb24nO1xuXHR9KTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/available-typed-arrays/index.js\n")},"../../CoCreate-components/CoCreate-action/src/index.js":(__unused_webpack_module,exports)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n// -testing1\nconst CoCreateAction = {\n  attribute: 'data-actions',\n  actions: {},\n  selectedStage: [],\n  stageIndex: 0,\n  selectedElement: null,\n  completedEventName: 'completedEvent',\n  __init: function () {\n    this.actionButtonEvent();\n  },\n  // init: function(container) {\n  //   const __container = container || document\n  //   if (!__container.querySelectorAll) {\n  // \treturn;\n  // }\n  // let buttons = __container.querySelectorAll(\"[data-actions]\");\n  // for (let i = 0; i < buttons.length; i++) {\n  //   this.actionButtonEvent(buttons[i]);\n  // }\n  // },\n  // actionButtonEvent: function(btn) {\n  //   const _this = this;    \n  // let checkActions = btn.getAttribute('data-actions') || \"\";\n  // checkActions = checkActions.replace(/\\s/g, '').split(',');\n  // if (checkActions.length == 0) {\n  //   return;\n  // }\n  //   btn.addEventListener('click', function(event) {\n  //     event.preventDefault();\n  //     let actions = this.getAttribute(_this.attribute) || \"\";\n  //     actions = actions.replace(/\\s/g, '').split(',');\n  //     _this.stageIndex = 0;\n  //     _this.selectedStage = actions;\n  //     //. run function\n  //     _this.selectedElement = btn;\n  //     _this.__runActionFunc();\n  //   })\n  // },\n  actionButtonEvent: function () {\n    const self = this;\n    document.addEventListener('click', function (event) {\n      let btn = event.target;\n\n      if (!btn.getAttribute('data-actions')) {\n        btn = event.target.closest('[data-actions]');\n      }\n\n      if (!btn) return;\n      event.preventDefault();\n      let actions = (btn.getAttribute(self.attribute) || \"\").replace(/\\s/g, '').split(',');\n      if (actions.length == 0) return;\n      self.stageIndex = 0;\n      self.selectedStage = actions; //. run function\n\n      self.selectedElement = btn;\n\n      self.__runActionFunc();\n    });\n  },\n  init: function ({\n    action,\n    callback,\n    endEvent\n  }) {\n    this.registerEvent(action, callback, null, endEvent);\n  },\n\n  /**\n   * key: string\n   * runFunc: function\n   * instance: object\n   * endEvent: string\n   **/\n  registerEvent: function (key, runFunc, instance, endEvent) {\n    if (this.actions[key]) {\n      return;\n    }\n\n    this.actions[key] = {\n      key: key,\n      runFunc: runFunc,\n      instance: instance || window,\n      endEvent: endEvent\n    }; //. register events\n\n    for (let __key in this.actions) {\n      if (__key != key && this.actions[__key]['endEvent'] === endEvent) {\n        return;\n      }\n    } //. register events\n\n\n    const _this = this;\n\n    document.addEventListener(endEvent, function (e) {\n      _this.__nextAction(endEvent, e.detail);\n    });\n  },\n  __runActionFunc: function (data) {\n    if (this.stageIndex >= this.selectedStage.length) {\n      //. if latest case, it will be run aTag\n      if (this.stageIndex == this.selectedStage.length) {\n        this.__runAtag(this.selectedElement);\n      }\n\n      return;\n    }\n\n    const key = this.selectedStage[this.stageIndex]; //. run function\n\n    const action = this.actions[key];\n\n    if (action) {\n      if (action.runFunc) {\n        action.runFunc.call(null, this.selectedElement, data);\n      } else {\n        this.__nextAction(action.endEvent, {});\n      }\n    }\n  },\n  __nextAction: function (eventName, data) {\n    const key = this.selectedStage[this.stageIndex];\n\n    if (!key) {\n      return;\n    }\n\n    if (eventName !== this.actions[key].endEvent) {\n      return;\n    }\n\n    this.stageIndex++;\n\n    this.__runActionFunc(data);\n  },\n  __runAtag: function (button) {\n    var aTag = button.querySelector('a');\n\n    if (aTag) {\n      CoCreate.logic.setLinkProcess(aTag);\n    }\n  }\n};\n\nCoCreateAction.__init();\n\nvar _default = CoCreateAction;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-action/src/index.js\n")},"../../CoCreate-components/CoCreate-api/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _src = __webpack_require__(/*! ../../../CoCreateJS/src */ "../../CoCreateJS/src/index.js");\n\nvar _src2 = _interopRequireDefault(__webpack_require__(/*! ../../CoCreate-action/src */ "../../CoCreate-components/CoCreate-action/src/index.js"));\n\nvar _src3 = _interopRequireDefault(__webpack_require__(/*! ../../CoCreate-render/src */ "../../CoCreate-components/CoCreate-render/src/index.js"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateApi = {\n  modules: {},\n  init: function ({\n    name,\n    module\n  }) {\n    this.register(name, module);\n  },\n  register: function (name, m_instance) {\n    const self = this;\n\n    if (typeof this.modules[name] === \'undefined\') {\n      this.modules[name] = m_instance;\n\n      _src.socketApi.listen(name, data => {\n        self.__responseProcess(name, data);\n      }); //. register actions\n\n\n      if (Array.isArray(m_instance[\'actions\'])) {\n        m_instance[\'actions\'].forEach(action => {\n          if (typeof m_instance[`action_${action}`] !== \'function\') {\n            m_instance[`action_${action}`] = function (element) {\n              self.__commonAction(m_instance.id, action, element);\n            };\n          }\n\n          _src2.default.init({\n            action: action,\n            endEvent: action,\n            callback: btn => {\n              m_instance[`action_${action}`](btn);\n            }\n          });\n        });\n      }\n    }\n  },\n  __responseProcess: function (m_name, data) {\n    const {\n      type,\n      response\n    } = data;\n    const m_instance = this.modules[m_name];\n\n    if (type && response && m_instance) {\n      if (typeof m_instance[`render_${type}`] === \'function\') {\n        m_instance[`render_${type}`](response);\n      }\n\n      this.render(type, response);\n      document.dispatchEvent(new CustomEvent(type, {\n        detail: {\n          data: response\n        }\n      }));\n    }\n  },\n  __commonAction: function (id, action, element) {\n    const container = element.closest("form") || document;\n    let data = CoCreateApi.getFormData(id, action, container);\n    CoCreateApi.send(id, action, data);\n  },\n  getFormData: function (m_name, action, container) {\n    const mainAttr = `data-${m_name}`;\n    const self = this;\n    const elements = container.querySelectorAll(`[${mainAttr}^="${action}."]`);\n    let data = {};\n    elements.forEach(element => {\n      let name = element.getAttribute(mainAttr);\n      let array_name = element.getAttribute(mainAttr + "_array");\n\n      let value = self.__getElValue(element);\n\n      if (!name) return;\n\n      if (action) {\n        let re = new RegExp(`^${action}.`, \'i\');\n\n        if (re.test(name)) {\n          name = name.replace(re, "");\n        } else {\n          return;\n        }\n      }\n\n      if (array_name) {\n        if (!data[name]) {\n          data[name] = [];\n        }\n\n        data[name].push(self.getFormData(m_name, array_name, element));\n      } else if (value != null) {\n        data[name] = value;\n      }\n    });\n    let keys = Object.keys(data);\n    let objectData = {};\n    keys.forEach(k => {\n      if (k.split(\'.\').length > 1) {\n        let newData = self.__createObject(data[k], k);\n\n        delete data[k];\n        objectData = self.__mergeObject(objectData, newData);\n      } else {\n        objectData[k] = data[k];\n      }\n    });\n    return objectData;\n  },\n  __getElValue: function (element) {\n    let value = null;\n\n    if (typeof element.value !== "undefined") {\n      switch (element.type.toLocaleLowerCase()) {\n        case \'checkbox\':\n          if (element.checked) {\n            value = element.value;\n          }\n\n          break;\n\n        default:\n          value = element.value;\n          break;\n      }\n    } else {\n      value = element.getAttribute(\'value\');\n\n      if (!value) {\n        value = element.innerHTML;\n      }\n    }\n\n    return value;\n  },\n  __mergeObject: function (target, source) {\n    target = target || {};\n\n    for (let key of Object.keys(source)) {\n      if (source[key] instanceof Object) {\n        Object.assign(source[key], this.__mergeObject(target[key], source[key]));\n      }\n    }\n\n    Object.assign(target || {}, source);\n    return target;\n  },\n  __createObject: function (data, path) {\n    if (!path) return data;\n    let keys = path.split(\'.\');\n    let newObject = data;\n\n    for (var i = keys.length - 1; i >= 0; i--) {\n      newObject = {\n        [keys[i]]: newObject\n      };\n    }\n\n    return newObject;\n  },\n  send: function (module, action, data) {\n    let request_data = this.getCommonParamsExtend(data || {});\n    request_data = { ...request_data,\n      data\n    };\n\n    _src.socketApi.send(module, {\n      type: action,\n      data: request_data\n    });\n  },\n  render: function (action, data) {\n    _src3.default.data({\n      selector: `[data-template_id="${action}"]`,\n      data: data\n    });\n  },\n  createApiSocket: function (host, namespace) {\n    if (namespace) {\n      _src.socketApi.create({\n        namespace: namespace,\n        room: null,\n        host: host\n      });\n\n      _src.socketApi.setGlobalScope(namespace);\n    } else {\n      _src.socketApi.create({\n        namespace: null,\n        room: null,\n        host: host\n      });\n    }\n  },\n  getCommonParamsExtend: function (info) {\n    return {\n      "apiKey": info.apiKey || config.apiKey,\n      "securityKey": info.securityKey || config.securityKey,\n      "organization_id": info.organization_id || config.organization_Id\n    };\n  }\n};\nCoCreateApi.createApiSocket(window.config.host ? window.config.host : \'server.cocreate.app\', window.config.organization_Id // window.config.apiKey\n// window.config.securityKey\n);\nvar _default = CoCreateApi;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-api/src/index.js\n')},"../../CoCreate-components/CoCreate-render/src/index.js":(__unused_webpack_module,exports)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\n/**\n * change name Class\n * add functionality to add value on any attr of each elements into template\n */\nconst CoCreateRender = {\n  __getValueFromObject: function (json, path) {\n    try {\n      if (typeof json == 'undefined' || !path) return false;\n      let jsonData = json,\n          subpath = path.split('.');\n\n      for (let i = 0; i < subpath.length; i++) {\n        jsonData = jsonData[subpath[i]];\n        if (!jsonData) return false;\n      }\n\n      return jsonData;\n    } catch (error) {\n      console.log(\"Error in getValueFromObject\", error);\n      return false;\n    }\n  },\n  __getValue: function (data, attrValue) {\n    let result = /{{\\s*([\\w\\W]+)\\s*}}/g.exec(attrValue);\n\n    if (result) {\n      return this.__getValueFromObject(data, result[1].trim());\n    }\n\n    return false;\n  },\n  __createObject: function (data, path) {\n    try {\n      if (!path) return data;\n      let keys = path.split('.');\n      let newObject = data;\n\n      for (var i = keys.length - 1; i >= 0; i--) {\n        newObject = {\n          [keys[i]]: newObject\n        };\n      }\n\n      return newObject;\n    } catch (error) {\n      console.log(\"Error in getValueFromObject\", error);\n      return false;\n    }\n  },\n  __replaceValue: function (data, inputValue) {\n    let isPass = false;\n    let self = this;\n    let resultValue = null; // let variables = inputValue.match(/{{\\s*(\\S+)\\s*}}/g);\n\n    let variables = inputValue.match(/{{([A-Za-z0-9_.,\\- ]*)}}/g);\n\n    if (variables) {\n      variables.forEach(attr => {\n        let value = self.__getValue(data, attr);\n\n        if (value && typeof value !== \"object\") {\n          isPass = true;\n          inputValue = inputValue.replace(attr, value);\n        }\n      });\n\n      if (isPass) {\n        resultValue = inputValue;\n      }\n    }\n\n    return resultValue;\n  },\n  setArray: function (template, data) {\n    const type = template.getAttribute('data-render_array') || \"data\";\n    const render_key = template.getAttribute('data-render_key') || type;\n    const self = this;\n\n    const arrayData = this.__getValueFromObject(data, type);\n\n    if (type && Array.isArray(arrayData)) {\n      arrayData.forEach((item, index) => {\n        let cloneEl = template.cloneNode(true);\n        cloneEl.classList.remove('template');\n        cloneEl.classList.add('clone_' + type);\n\n        if (typeof item !== 'object') {\n          item = {\n            \"--\": item\n          };\n        } else {\n          item['index'] = index;\n        }\n\n        let r_data = self.__createObject(item, render_key);\n\n        self.setValue([cloneEl], r_data);\n        template.insertAdjacentHTML('beforebegin', cloneEl.outerHTML);\n      });\n    }\n  },\n  setValue: function (els, data, passTo, template) {\n    if (!data) return;\n    const that = this;\n    Array.from(els).forEach(e => {\n      let passId = e.getAttribute('data-pass_id');\n\n      if (passTo && passId != passTo) {\n        return;\n      }\n\n      Array.from(e.attributes).forEach(attr => {\n        let attr_name = attr.name.toLowerCase();\n        let isPass = false;\n        let attrValue = attr.value;\n        attrValue = that.__replaceValue(data, attrValue);\n\n        if (attrValue) {\n          if (attr_name == 'value') {\n            let tag = e.tagName.toLowerCase();\n\n            switch (tag) {\n              case 'input':\n                e.setAttribute(attr_name, attrValue);\n                break;\n\n              case 'textarea':\n                e.setAttribute(attr_name, attrValue);\n                e.textContent = attrValue;\n                break;\n\n              default:\n                if (e.children.length === 0) {\n                  e.innerHTML = attrValue;\n                }\n\n            }\n          }\n\n          e.setAttribute(attr_name, attrValue);\n        }\n      });\n\n      if (e.children.length == 0 && e.textContent) {\n        let textContent = e.textContent;\n        textContent = that.__replaceValue(data, textContent);\n\n        if (textContent) {\n          e.textContent = textContent;\n        }\n      }\n\n      if (e.children.length > 0) {\n        that.setValue(e.children, data);\n\n        if (e.classList.contains('template')) {\n          that.setArray(e, data);\n        }\n      }\n    });\n  },\n  data: function ({\n    selector,\n    data,\n    elements,\n    passTo\n  }) {\n    if (selector) {\n      this.render(selector, data);\n    } else if (elements) {\n      this.setValue(elements, data, passTo);\n    }\n  },\n  render: function (selector, dataResult) {\n    let template_div = document.querySelector(selector);\n\n    if (!template_div) {\n      return;\n    }\n\n    if (Array.isArray(dataResult)) {\n      template_div.setAttribute('data-render_array', 'test');\n      this.setValue([template_div], {\n        test: dataResult\n      });\n    } else {\n      this.setValue(template_div.children, dataResult);\n    }\n  }\n};\nvar _default = CoCreateRender;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-render/src/index.js\n")},"./src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _src = _interopRequireDefault(__webpack_require__(/*! ../../../CoCreate-components/CoCreate-api/src */ \"../../CoCreate-components/CoCreate-api/src/index.js\"));\n\nvar _src2 = __webpack_require__(/*! ../../../CoCreateJS/src */ \"../../CoCreateJS/src/index.js\");\n\nvar _twilioClient = __webpack_require__(/*! twilio-client */ \"./node_modules/twilio-client/es5/twilio.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// import * as loadTwilio from 'twilio-client-mirror';\n// import Twilio from 'twilio-client';\n// const Device = require('twilio-client').Device;\n// hello\nlet URL_TWILIO = \"https://server.cocreate.app:8088/api_/twilio\";\nconst device = new _twilioClient.Device(); // const device = new Twilio.Device();\n\nlet myConnection = '';\nlet debug_twilio = false;\nlet myStorage = window.localStorage;\nlet user = myStorage.getItem('user_id') ? myStorage.getItem('user_id') : '5ff49ec8421c2c14653a1a39';\nif (document.querySelector('[data-twilio=\"setUserNameLocalStorage.user_id\"]')) document.querySelector('[data-twilio=\"setUserNameLocalStorage.user_id\"]').value = user;\nfetch(URL_TWILIO + '/token/' + user, {\n  'mode': 'cors',\n  'headers': {\n    'Access-Control-Allow-Origin': '*'\n  }\n}).then(response => response.json()).then(data => {\n  let token = data.token;\n  device.setup(token, {\n    enableRingingState: true,\n    debug: debug_twilio\n  });\n  device.on('ready', conn => {\n    console.log(\"REady \");\n  });\n  device.on('offline', conn => {\n    console.log(\"Offline \");\n  });\n  device.on('busy', conn => {\n    console.log(\"busy \");\n  }); //Events\n\n  device.on('cancel', connection => {\n    //This is triggered when an incoming connection is canceled by the caller before it is accepted by the Twilio Client device.\n    console.log(\"Cancel Call incomming\");\n  });\n  device.on('connect', conn => {\n    //This is triggered when a connection is opened, whether initiated using .connect()\n    console.log(\" Connect  call Front\");\n    myConnection = conn;\n    let CallSid = myConnection.parameters.CallSid; // //document.querySelector(\"[data-twilio='holdCall.CallSid']\").value=CallSid;\n\n    console.log(\" Sendind Render to -> createCall\", {\n      render2: myConnection\n    });\n\n    _src.default.render(`[data-template_id=createCall]`, {\n      render2: myConnection\n    });\n  });\n  device.on('disconnect', connection => {\n    //Fired any time a Connection is closed\n    console.log(\"Disconnect Call\");\n    /*Hide Btns*/\n  });\n  device.on('error', error => {\n    console.log(\"Errorr \", error); //Emitted when any device error occurs.\n  });\n  device.on('ringing', conn => {\n    console.log(\"rinngin\");\n  });\n  device.on('outgoing', conn => {\n    //      let  CallSid = conn.parameters.CallSid\n    console.log(\" Outgoin conn \", conn);\n  });\n  device.on('incoming', conn => {\n    myConnection = conn;\n    document.querySelector(\"[data-actions='answerCall']\").style.display = 'initial';\n    document.querySelector(\"[data-id='dialConference']\").style.display = 'initial';\n    let CallSid = myConnection.parameters.CallSid;\n    console.log('incomming => ', CallSid, {\n      render2: myConnection\n    }); //render in form\n\n    _src.default.render('createCall', {\n      render2: myConnection\n    });\n  }); //end FTECH\n}).catch(function (error) {\n  console.log('ERROR Fetch [token]:' + error.message);\n}); //end FTECH URL TWILIO BACKEND NODE\n\nconst CoCreateTwilio = {\n  id: 'twilio',\n  actions: ['deleteQueue', 'getListQueues', 'dialEnqueue', 'dialQueue', 'dialTransfer', 'setUserNameLocalStorage', 'callRecordingCreate', 'callRecordingPause', 'callRecordingResume', 'callRecordingList', 'holdParticipantConference', 'unholdParticipantConference', 'muteParticipantsConference', 'unmuteParticipantsConference', 'delParticipantsConference', 'getParticipantsConference', 'holdConference', 'unholdConference', 'joinConference', 'endConference', 'createCall', 'hangupCall', 'dialConference', 'answerCall', 'getConferences', 'createConference', 'twilioListSubAccounts', 'twilioPurchasePhoneNumber', 'twiliofetchAvailbleNumbers', 'twilioCreateSubAccount', 'twilioDeleteSubAccount', 'twilioGetUsage', 'twilioPhoneNumberList', 'twilioGetIncommingPhoneNumbers', 'twilioGetBillingUsages', 'twilioDeletePhoneNumber', 'updateIncomingPhoneNumber', 'response'],\n  render_callRecordingList: function (data) {\n    if (data.object == \"error\") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log(\"data \", data);\n\n    _src.default.render('callRecordingList', data);\n  },\n  render_holdParticipantConference: function (data) {\n    let id_participante = data;\n    let action = 'holdParticipantConference';\n    let btn_holdParticipante = document.querySelector('[data-actions=\"' + action + '\"][data-idparticipant=\"' + id_participante + '\"]');\n    btn_holdParticipante.style.display = 'none';\n    let btn_unholdParticipante = document.querySelector('[data-actions=\"un' + action + '\"][data-idparticipant=\"' + id_participante + '\"]');\n    btn_unholdParticipante.style.display = 'initial';\n  },\n  render_unholdParticipantConference: function (data) {\n    let id_participante = data;\n    let action = 'holdParticipantConference';\n    let btn_holdParticipante = document.querySelector('[data-actions=\"' + action + '\"][data-idparticipant=\"' + id_participante + '\"]');\n    btn_holdParticipante.style.display = 'initial';\n    let btn_unholdParticipante = document.querySelector('[data-actions=\"un' + action + '\"][data-idparticipant=\"' + id_participante + '\"]');\n    btn_unholdParticipante.style.display = 'none';\n  },\n  render_muteParticipantsConference: function (data) {\n    let id_participante = data;\n    let btn_mute = document.querySelector('[data-actions=\"muteParticipantsConference\"][data-idparticipant=\"' + id_participante + '\"]');\n    btn_mute.style.display = 'none';\n    let btn_unmute = document.querySelector('[data-actions=\"unmuteParticipantsConference\"][data-idparticipant=\"' + id_participante + '\"]');\n    btn_unmute.style.display = 'initial';\n  },\n  render_unmuteParticipantsConference: function (data) {\n    let id_participante = data;\n    let btn_mute = document.querySelector('[data-actions=\"muteParticipantsConference\"][data-idparticipant=\"' + id_participante + '\"]');\n    btn_mute.style.display = 'initial';\n    let btn_unmute = document.querySelector('[data-actions=\"unmuteParticipantsConference\"][data-idparticipant=\"' + id_participante + '\"]');\n    btn_unmute.style.display = 'none';\n  },\n  render_getParticipantsConference: function (data) {\n    console.log(data);\n    let id_conference = data.idconference;\n    data = {\n      participant: data.participants\n    };\n\n    _src.default.render('getParticipantsConferences_' + id_conference, data);\n  },\n  action_hangupCall: function (data) {\n    console.log(\" hangupCall \");\n    device.disconnectAll();\n    if (myConnection) myConnection.reject();\n  },\n  render_dialConference: async function (data) {\n    console.log(\"Dial\", data);\n\n    if (data.create_conference) {\n      //createConference\n      let friendlyName = data.data.friendlyName ? data.data.friendlyName : 'CocreateConference';\n      myConnection = device.connect({\n        'opt': 'joinConference',\n        'friendlyname': friendlyName\n      });\n      let CallSid = myConnection.parameters.CallSid;\n      console.log(\"CallSid, createConference \", CallSid);\n    }\n\n    await new Promise(r => setTimeout(r, 2000)); //dispatch('action_getConferences')\n  },\n  render_getConferences: function (data) {\n    if (data.object == \"error\") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n\n    _src.default.render('getConferences', data);\n  },\n  action_joinConference: function (element, data) {\n    console.log('data', data);\n    console.log(element.dataset);\n    myConnection = device.connect({\n      'opt': 'joinConference',\n      'friendlyname': element.dataset['friendlyname']\n    });\n    let CallSid = myConnection.parameters.CallSid;\n  },\n  action_createCall: function (element, data) {\n    var data = _src.default.getFormData('twilio', 'dial', document);\n\n    myConnection = device.connect(data);\n    let CallSid = myConnection.parameters.CallSid;\n    console.log(\"createCall \", myConnection);\n\n    _src.default.render(this.id, 'createCall', {\n      render2: myConnection\n    });\n  },\n  action_answerCall: function (element, data) {\n    myConnection.accept();\n  },\n  action_dialQueue: async function (element, data) {\n    //alert('unhold')\n    //myConnection = device.connect({'unhold':true,'queue':'support'});\n\n    /*var data = api.getFormData('twilio', 'dialQueue', element)\n    console.log(\"dialQueue\",data)\n    */\n    console.log(\"dialQueue \", element.dataset['friendlyname']);\n    myConnection = device.connect({\n      'opt': 'queue',\n      'friendlyname': element.dataset['friendlyname']\n    });\n    await new Promise(r => setTimeout(r, 2000));\n  },\n  render_getListQueues: function (data) {\n    if (data.object == \"error\") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log(\"DAta \", data);\n\n    _src.default.render('getListQueues', data);\n  },\n  action_unholdCall: function (element, data) {\n    var data = _src.default.getFormData('twilio', 'holdCall', document);\n\n    data[\"unhold\"] = true;\n    console.log(\" DAta unhold \", data);\n    myConnection = device.connect(data);\n  },\n  action_setUserNameLocalStorage: function (element, data) {\n    var data = _src.default.getFormData('twilio', 'setUserNameLocalStorage', document);\n\n    myStorage.setItem('user_id', data['user_id']);\n  },\n\n  /*new features*/\n  render_twilioListSubAccounts: function (data) {\n    if (data.object == \"error\") {\n      alert(data.data);\n    }\n\n    console.log(data); // api.render('randermsg', data);\n  },\n  render_twilioCreateSubAccount: function (data) {\n    if (data.object == \"error\") {\n      alert(data.data);\n    }\n\n    console.log(data);\n  },\n  render_twilioDeleteSubAccount: function (data) {\n    if (data.object == \"error\") {\n      alert(data.data);\n    }\n\n    console.log(data);\n  },\n  render_twilioPurchasePhoneNumber: function (data) {\n    if (data.object == \"error\") {\n      alert(data.data);\n    }\n\n    console.log(data);\n  },\n  render_twilioGetIncommingPhoneNumbers: function (data) {\n    if (data.object == \"error\") {\n      alert(data.data);\n    }\n\n    console.log(data);\n  },\n  render_twiliofetchAvailbleNumbers: function (data) {\n    if (data.object == \"error\") {\n      alert(data.data);\n    }\n\n    console.log(data);\n  },\n  render_twilioGetUsage: function (data) {\n    if (data.object == \"error\") {\n      alert(data.data);\n    }\n\n    console.log(data);\n    console.table(data.data);\n  },\n  render_twilioPhoneNumberList: function (data) {\n    if (data.object == \"error\") {\n      alert(data.data);\n    }\n\n    console.log(data);\n  },\n  render_twilioGetBillingUsages: function (data) {\n    if (data.object == \"error\") {\n      alert(data.data);\n    }\n\n    console.log(data);\n  },\n  render_response: function (data) {\n    console.log(data);\n  } // \taction_twilioListSubAccounts: function(element, data) {\n  // \t\t//. data rendering by cocreate-render\n  // \t\tconsole.log('rander',data)\n  // \t    api.render(this.id, 'xxxCreateCard', {render2: data});\n  // \t}\n  // END CreacteCard endpoint\t\n\n};\n\n_src.default.init({\n  name: CoCreateTwilio.id,\n  module: CoCreateTwilio\n});\n\nvar _default = CoCreateTwilio;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n")},"../../CoCreateJS/src/common-fun.js":(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.getCommonParams = getCommonParams;\nexports.getCommonParamsExtend = getCommonParamsExtend;\nexports.generateSocketClient = generateSocketClient;\n\nfunction getCommonParams() {\n  return {\n    "apiKey": config.apiKey,\n    "securityKey": config.securityKey,\n    "organization_id": config.organization_Id\n  };\n}\n\nfunction getCommonParamsExtend(info) {\n  return {\n    "apiKey": info.apiKey || config.apiKey,\n    "securityKey": info.securityKey || config.securityKey,\n    "organization_id": info.organization_id || config.organization_Id\n  };\n}\n\nfunction generateSocketClient(namespace, room) {\n  let ns = namespace || config.organization_Id;\n  let rr = room || \'\';\n\n  if (rr) {\n    return `${ns}/${rr}`;\n  } else {\n    return ns;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi4vQ29DcmVhdGVKUy9zcmMvY29tbW9uLWZ1bi5qcz9iODlmIl0sIm5hbWVzIjpbImdldENvbW1vblBhcmFtcyIsImNvbmZpZyIsImFwaUtleSIsInNlY3VyaXR5S2V5Iiwib3JnYW5pemF0aW9uX0lkIiwiZ2V0Q29tbW9uUGFyYW1zRXh0ZW5kIiwiaW5mbyIsIm9yZ2FuaXphdGlvbl9pZCIsImdlbmVyYXRlU29ja2V0Q2xpZW50IiwibmFtZXNwYWNlIiwicm9vbSIsIm5zIiwicnIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLFNBQVNBLGVBQVQsR0FDQTtBQUNFLFNBQU87QUFDTCxjQUFvQkMsTUFBTSxDQUFDQyxNQUR0QjtBQUVMLG1CQUFvQkQsTUFBTSxDQUFDRSxXQUZ0QjtBQUdMLHVCQUFvQkYsTUFBTSxDQUFDRztBQUh0QixHQUFQO0FBS0Q7O0FBRUQsU0FBU0MscUJBQVQsQ0FBK0JDLElBQS9CLEVBQ0E7QUFDRSxTQUFPO0FBQ0wsY0FBb0JBLElBQUksQ0FBQ0osTUFBTCxJQUFlRCxNQUFNLENBQUNDLE1BRHJDO0FBRUwsbUJBQW9CSSxJQUFJLENBQUNILFdBQUwsSUFBb0JGLE1BQU0sQ0FBQ0UsV0FGMUM7QUFHTCx1QkFBb0JHLElBQUksQ0FBQ0MsZUFBTCxJQUF3Qk4sTUFBTSxDQUFDRztBQUg5QyxHQUFQO0FBS0Q7O0FBRUQsU0FBU0ksb0JBQVQsQ0FBK0JDLFNBQS9CLEVBQTBDQyxJQUExQyxFQUNBO0FBQ0UsTUFBSUMsRUFBRSxHQUFHRixTQUFTLElBQUlSLE1BQU0sQ0FBQ0csZUFBN0I7QUFDQSxNQUFJUSxFQUFFLEdBQUdGLElBQUksSUFBSSxFQUFqQjs7QUFDQSxNQUFJRSxFQUFKLEVBQVE7QUFDTixXQUFRLEdBQUVELEVBQUcsSUFBR0MsRUFBRyxFQUFuQjtBQUNELEdBRkQsTUFFTztBQUNMLFdBQU9ELEVBQVA7QUFDRDtBQUNGIiwiZmlsZSI6Ii4uLy4uL0NvQ3JlYXRlSlMvc3JjL2NvbW1vbi1mdW4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBnZXRDb21tb25QYXJhbXMoKSBcbntcbiAgcmV0dXJuIHtcbiAgICBcImFwaUtleVwiOiAgICAgICAgICAgY29uZmlnLmFwaUtleSxcbiAgICBcInNlY3VyaXR5S2V5XCI6ICAgICAgY29uZmlnLnNlY3VyaXR5S2V5LFxuICAgIFwib3JnYW5pemF0aW9uX2lkXCI6ICBjb25maWcub3JnYW5pemF0aW9uX0lkLFxuICB9XG59XG5cbmZ1bmN0aW9uIGdldENvbW1vblBhcmFtc0V4dGVuZChpbmZvKSBcbntcbiAgcmV0dXJuIHtcbiAgICBcImFwaUtleVwiOiAgICAgICAgICAgaW5mby5hcGlLZXkgfHwgY29uZmlnLmFwaUtleSxcbiAgICBcInNlY3VyaXR5S2V5XCI6ICAgICAgaW5mby5zZWN1cml0eUtleSB8fCBjb25maWcuc2VjdXJpdHlLZXksXG4gICAgXCJvcmdhbml6YXRpb25faWRcIjogIGluZm8ub3JnYW5pemF0aW9uX2lkIHx8IGNvbmZpZy5vcmdhbml6YXRpb25fSWQsXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVTb2NrZXRDbGllbnQgKG5hbWVzcGFjZSwgcm9vbSkgXG57XG4gIGxldCBucyA9IG5hbWVzcGFjZSB8fCBjb25maWcub3JnYW5pemF0aW9uX0lkXG4gIGxldCByciA9IHJvb20gfHwgJyc7XG4gIGlmIChycikge1xuICAgIHJldHVybiBgJHtuc30vJHtycn1gXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5zO1xuICB9XG59XG5cbmV4cG9ydCB7Z2V0Q29tbW9uUGFyYW1zLCBnZXRDb21tb25QYXJhbXNFeHRlbmQsIGdlbmVyYXRlU29ja2V0Q2xpZW50fTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/common-fun.js\n')},"../../CoCreateJS/src/core.js":(__unused_webpack_module,exports)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = core;\n// ***********   define variables end ***************** /// \nconst CoCreateCore = {\n  socketInitFuncs: [],\n  moduleSelectors: [],\n  socket: null,\n  host: 'server.cocreate.app',\n  setSocket: function (socket) {\n    this.socket = socket;\n  },\n  init: function (host, namespace) {\n    if (host) {\n      this.host = host;\n    }\n\n    this.__setConfig();\n\n    this.createGeneralSocket(host, namespace || config.organization_Id);\n    this.initSocketListener();\n    this.createUserSocket(host);\n  },\n  __setConfig: function () {\n    let orgId = window.localStorage.getItem('organization_id');\n    let securityKey = window.localStorage.getItem('securityKey');\n    let apiKey = window.localStorage.getItem('apiKey');\n    if (orgId) config['organization_Id'] = orgId;\n    if (apiKey) config['apiKey'] = apiKey;\n    if (securityKey) config['securityKey'] = securityKey;\n  },\n  initSocketListener: function () {\n    const self = this;\n    this.socket.listen('connect', function (data, room) {\n      if (room == self.socket.getGlobalScope()) {\n        self.socketInitFuncs.forEach(func => {\n          func.initFunc.call(func.instance);\n        });\n      }\n    });\n    this.socket.listen('readDocument', function (data) {\n      const metadata = data.metadata; // if (metadata && metadata.type == 'crdt') {\n      //   self.initRenderCrdtData(data);\n      // } else {\n      //   // self.renderModules(data)\n      // }\n\n      return data;\n    });\n    this.socket.listen('updateDocument', function (data) {// self.renderModules(data)\n    });\n    this.socket.listen('deletedDocument', function (data) {\n      console.log(data);\n    });\n    this.socket.listen('sendMessage', function (data) {\n      console.log(data);\n    });\n    this.listenMessage('downloadFileInfo', function (data) {\n      self.socket.saveFileName = data.file_name;\n    });\n  },\n  createUserSocket: function (host) {\n    var user_id = window.localStorage.getItem('user_id');\n\n    if (user_id) {\n      this.socket.create({\n        namespace: 'users',\n        room: user_id,\n        host: host\n      });\n    }\n  },\n  createGeneralSocket: function (host, namespace) {\n    if (namespace) {\n      this.socket.create({\n        namespace: namespace,\n        room: null,\n        host: host\n      });\n      this.socket.setGlobalScope(namespace);\n    } else {\n      this.socket.create({\n        namespace: null,\n        room: null,\n        host: host\n      });\n    }\n  },\n  registerInit: function (initFunc, instance) {\n    this.socketInitFuncs.push({\n      initFunc,\n      instance: instance || window\n    });\n  },\n  // registerSelector: function(selector) {\n  //   if (this.moduleSelectors.indexOf(selector) === -1) {\n  //     this.moduleSelectors.push(selector);\n  //   }\n  // },\n  // getSelectors: function(selector) {\n  //   return this.moduleSelectors.join(\",\");\n  // },\n  listenMessage: function (message, fun) {\n    this.socket.listen(message, fun);\n  },\n  createSocket: function (config) {\n    this.socket.create(config);\n  },\n  destroySocket: function (config) {\n    const {\n      namespace,\n      room\n    } = config;\n    const key = this.socket.getKey(namespace, room);\n    let socket = this.socket.sockets.get(key);\n\n    if (!socket) {\n      return;\n    }\n\n    this.socket.destroy(socket, key);\n  }\n};\n\nfunction core(socket) {\n  CoCreateCore.setSocket(socket);\n  return CoCreateCore;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/core.js\n")},"../../CoCreateJS/src/crud.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = CRUD;\n\nvar _commonFun = __webpack_require__(/*! ./common-fun.js */ \"../../CoCreateJS/src/common-fun.js\");\n\nvar _utilsCrud = _interopRequireDefault(__webpack_require__(/*! ./utils.crud.js */ \"../../CoCreateJS/src/utils.crud.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// ***********   define variables end ***************** /// \nvar data = {\n  \"org_id\": \"xxx\",\n  \"customer.name\": \"Jin\",\n  \"customer.fristname\": \"Jin\",\n  \"customer.lastname\": \"CF\",\n  \"customer.address.line1\": \"line1\",\n  \"customer.address.line2\": \"line2\",\n  'scope[0]': 'testing',\n  'scope[1]': '---',\n  \"customer.orders[0]\": 123,\n  \"customer.orders[1]\": 243\n};\nvar obj = {\n  test: {\n    \"name\": '123',\n    \"address\": 'address',\n    \"customer\": {\n      \"name\": 'tttt'\n    },\n    \"orders\": [1, 2, 3]\n  }\n};\nconsole.log('----- convert object -----');\nconsole.log(_utilsCrud.default.decodeObject(data));\nconsole.log(_utilsCrud.default.encodeObject(obj));\nconst CoCreateCRUD = {\n  socket: null,\n  setSocket: function (socket) {\n    this.socket = socket;\n  },\n\n  /*\n   \n    CoCreate.crud.readDcoumentList {\n      collection: \"modules\",\n      element: \"xxxx\",\n      metadata: \"\",\n      operator: {\n        fetch: {\n          name: 'xxxx',\n          value: 'xxxxx'\n        },\n        filters: [{\n          name: 'field1',\n          operator: \"contain | range | eq | ne | lt | lte | gt | gte | in | nin\",\n          value: [v1, v2, ...]\n        }, {\n          name: \"_id\",\n          opreator: \"in\",\n          value: [\"id1\"]\n        }, {\n          ....\n        }],\n        orders: [{\n          name: 'field-x',\n          type: 1 | -1\n        }],\n        search: {\n          type: 'or | and',\n          value: [value1, value2]\n        },\n        \n        startIndex: 0 (integer),\n        count: 0 (integer)\n      },\n      \n      is_collection: true | false,\n      //. case fetch document case\n      created_ids : [id1, id2, ...],\n      \n      \n      -------- additional response data -----------\n      data: [] // array\n    }\n  */\n  readDocumentList(info) {\n    if (!info) return;\n    let request_data = (0, _commonFun.getCommonParams)();\n\n    if (!info.collection || !info.operator) {\n      return;\n    }\n\n    request_data = { ...request_data,\n      ...info\n    };\n    this.socket.send('readDocumentList', request_data);\n  },\n\n  /*\n  CoCreate.crud.createDocument({\n    namespace:'',\n    room:'',\n    broadcast: true/false, (default=ture)\n    broadcast_sender: true/false, (default=true) \n    \n    collection: \"test123\",\n    data:{\n    \tname1:“hello”,\n    \tname2:  “hello1”\n    },\n    element: “xxxx”,\n    metaData: \"xxxx\"\n  }),\n  */\n  // data param needs organization_id field added to pass security check\n  createDocument: function (info) {\n    if (info === null) {\n      return;\n    }\n\n    let request_data = (0, _commonFun.getCommonParams)();\n    request_data['collection'] = info['collection'] || 'module_activities';\n    let data = info.data || {};\n\n    if (!data['organization_id']) {\n      data['organization_id'] = config.organization_Id;\n    }\n\n    if (info['data']) {\n      data = { ...data,\n        ...info['data']\n      };\n    } //. rebuild data\n\n\n    request_data['data'] = data;\n\n    if (info['metadata']) {\n      request_data['metadata'] = info['metadata'];\n    }\n\n    request_data['element'] = info['element'];\n    /** socket parameters **/\n    // if (info['broadcast'] === undefined) {\n    //   request_data['broadcast'] = true;\n    // }\n    // if (info['broadcast_sender'] === undefined) {\n    //   request_data['broadcast_sender'] = true;\n    // }\n\n    const room = (0, _commonFun.generateSocketClient)(info.namespace, info.room);\n    this.socket.send('createDocument', request_data, room);\n  },\n\n  /*\n  CoCreate.crud.updateDocument({\n    namespace: '',\n    room: '',\n    broadcast: true/false,\n    broadcast_sender: true/false,\n    \n    collection: \"test123\",\n    document_id: \"document_id\",\n    data:{\n    \tname1:“hello”,\n    \tname2:  “hello1”\n    },\n    delete_fields:[\"name3\", \"name4\"],\n    element: “xxxx”,\n    metaData: \"xxxx\"\n  }),\n  */\n  updateDocument: function (info) {\n    if (!info || !info['document_id']) return;\n    let request_data = (0, _commonFun.getCommonParamsExtend)(info);\n    request_data['collection'] = info['collection'] || 'module_activities';\n    request_data['document_id'] = info['document_id'];\n\n    if (typeof info['data'] === 'object') {\n      request_data['set'] = info['data'];\n    }\n\n    if (Array.isArray(info['delete_fields'])) request_data['unset'] = info['delete_fields'];\n    if (!request_data['set'] && !request_data['unset']) return;\n    request_data['element'] = info['element'];\n    request_data['metadata'] = info['metadata'];\n\n    if (info.upsert) {\n      request_data['upsert'] = true;\n    }\n\n    if (info.broadcast === false) {\n      request_data['broadcast'] = false;\n    }\n    /** socket parameters **/\n    // if (info['broadcast'] === undefined) {\n    //   request_data['broadcast'] = true;\n    // }\n\n\n    request_data['broadcast_sender'] = info.broadcast_sender;\n\n    if (info['broadcast_sender'] === undefined) {\n      request_data['broadcast_sender'] = true;\n    }\n\n    const room = (0, _commonFun.generateSocketClient)(info.namespace, info.room);\n    this.socket.send('updateDocument', request_data, room);\n  },\n\n  /*\n  CoCreate.crud.readDocument({\n    collection: \"test123\",\n    document_id: \"document_id\",\n    element: “xxxx”,\n    metaData: \"xxxx\",\n    exclude_fields: [] \n  }),\n  */\n  readDocument: function (info) {\n    if (info === null) {\n      return;\n    }\n\n    if (!info['document_id'] || !info) {\n      return;\n    }\n\n    let request_data = (0, _commonFun.getCommonParams)();\n    request_data['collection'] = info['collection'];\n    request_data['document_id'] = info['document_id'];\n\n    if (info['exclude_fields']) {\n      request_data['exclude_fields'] = info['exclude_fields'];\n    }\n\n    if (info['element']) {\n      request_data['element'] = info['element'];\n    }\n\n    request_data['metadata'] = info['metadata'];\n    this.socket.send('readDocument', request_data);\n  },\n\n  /*\n  CoCreate.crud.deleteDocument({\n    namespace: '',\n    room: '',\n    broadcast: true/false,\n    broadcast_sender: true/false,\n    \n    collection: \"module\",\n    document_id: \"\",\n    element: “xxxx”,\n    metadata: \"xxxx\"\n  }),\n  */\n  deleteDocument: function (info) {\n    if (!info['document_id'] || !info) {\n      return;\n    }\n\n    let request_data = (0, _commonFun.getCommonParams)();\n    request_data['collection'] = info['collection'];\n    request_data['document_id'] = info['document_id'];\n\n    if (info['element']) {\n      request_data['element'] = info['element'];\n    }\n\n    request_data['metadata'] = info['metadata'];\n    /** socket parameters **/\n    // if (info['broadcast'] === undefined) {\n    //   request_data['broadcast'] = true;\n    // }\n    // if (info['broadcast_sender'] === undefined) {\n    //   request_data['broadcast_sender'] = true;\n    // }\n\n    const room = (0, _commonFun.generateSocketClient)(info.namespace, info.room);\n    this.socket.send('deleteDocument', request_data, room);\n  },\n\n  /** export / import db functions **/\n\n  /*\n  readDocument({\n   collection: \"test123\",\n   element: “xxxx”,\n   metaData: \"xxxx\",\n  }),\n  */\n  exportCollection: function (info) {\n    if (info === null) {\n      return;\n    }\n\n    let request_data = (0, _commonFun.getCommonParams)();\n    request_data['collection'] = info['collection'];\n    request_data['export_type'] = info['export_type'];\n    request_data['metadata'] = info['metadata'];\n    this.socket.send('exportDB', request_data);\n  },\n\n  /*\n  readDocument({\n    collection: \"test123\",\n    file: file\n  }),\n  */\n  importCollection: function (info) {\n    const {\n      file\n    } = info;\n\n    if (info === null || !(file instanceof File)) {\n      return;\n    }\n\n    const extension = file.name.split(\".\").pop();\n\n    if (!['json', 'csv'].some(item => item === extension)) {\n      return;\n    }\n\n    let request_data = (0, _commonFun.getCommonParams)();\n    request_data['collection'] = info['collection'];\n    request_data['import_type'] = extension;\n    this.socket.send('importDB', request_data);\n    this.socket.sendFile(file);\n  },\n  //. message listener\n  listenMessage: function (message, fun) {\n    this.socket.listen(message, fun);\n  },\n  listenerReadDocument: function (fun) {\n    this.socket.listen(\"readDocument\", fun);\n  },\n  listenerCreateDocument: function (fun) {\n    this.socket.listen(\"createDocument\", fun);\n  },\n  listenerDeleteDocument: function (fun) {\n    this.socket.listen(\"deleteDocument\", fun);\n  },\n  listenerUpdateDocument: function (fun) {\n    this.socket.listen(\"updateDocument\", fun);\n  },\n  listenerReadDocumentList: function (fun) {\n    this.socket.listen(\"readDocumentList\", fun);\n  }\n};\n\nfunction CRUD(socket) {\n  CoCreateCRUD.setSocket(socket);\n  return CoCreateCRUD;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/crud.js\n")},"../../CoCreateJS/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.addComponent = addComponent;\nexports.removeComponent = removeComponent;\nexports.utils = exports.message = exports.crud = exports.socketApi = exports.socket = exports.core = void 0;\n\nvar _socket = _interopRequireDefault(__webpack_require__(/*! ./socket.js */ "../../CoCreateJS/src/socket.js"));\n\nvar _crud = _interopRequireDefault(__webpack_require__(/*! ./crud.js */ "../../CoCreateJS/src/crud.js"));\n\nvar _core = _interopRequireDefault(__webpack_require__(/*! ./core.js */ "../../CoCreateJS/src/core.js"));\n\nvar utils = _interopRequireWildcard(__webpack_require__(/*! ./utils.js */ "../../CoCreateJS/src/utils.js"));\n\nexports.utils = utils;\n\nvar _message = _interopRequireDefault(__webpack_require__(/*! ./message.js */ "../../CoCreateJS/src/message.js"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// import CRDT from "./crdt.js"\nlet socket = new _socket.default(\'ws\');\nexports.socket = socket;\nlet socketApi = new _socket.default(\'api\');\nexports.socketApi = socketApi;\nlet core = (0, _core.default)(socket);\nexports.core = core;\nlet crud = (0, _crud.default)(socket);\nexports.crud = crud;\nlet message = (0, _message.default)(socket);\nexports.message = message;\ncore.init(window.config.host ? window.config.host : \'server.cocreate.app\');\n\nfunction addComponent(key, component) {\n  this[key] = component;\n}\n\nfunction removeComponent(key) {\n  if (this[key]) {}\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi4vQ29DcmVhdGVKUy9zcmMvaW5kZXguanM/Mjg5YSJdLCJuYW1lcyI6WyJzb2NrZXQiLCJDb0NyZWF0ZVNvY2tldCIsInNvY2tldEFwaSIsImNvcmUiLCJjcnVkIiwibWVzc2FnZSIsImluaXQiLCJ3aW5kb3ciLCJjb25maWciLCJob3N0IiwiYWRkQ29tcG9uZW50Iiwia2V5IiwiY29tcG9uZW50IiwicmVtb3ZlQ29tcG9uZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUNBOzs7Ozs7OztBQUVBO0FBQ0EsSUFBSUEsTUFBTSxHQUFHLElBQUlDLGVBQUosQ0FBbUIsSUFBbkIsQ0FBYjs7QUFDQSxJQUFJQyxTQUFTLEdBQUcsSUFBSUQsZUFBSixDQUFtQixLQUFuQixDQUFoQjs7QUFFQSxJQUFJRSxJQUFJLEdBQUcsbUJBQUtILE1BQUwsQ0FBWDs7QUFDQSxJQUFJSSxJQUFJLEdBQUcsbUJBQUtKLE1BQUwsQ0FBWDs7QUFDQSxJQUFJSyxPQUFPLEdBQUcsc0JBQVFMLE1BQVIsQ0FBZDs7QUFFQUcsSUFBSSxDQUFDRyxJQUFMLENBQVVDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjQyxJQUFkLEdBQXFCRixNQUFNLENBQUNDLE1BQVAsQ0FBY0MsSUFBbkMsR0FBMEMscUJBQXBEOztBQUVBLFNBQVNDLFlBQVQsQ0FBc0JDLEdBQXRCLEVBQTJCQyxTQUEzQixFQUFzQztBQUNsQyxPQUFLRCxHQUFMLElBQVlDLFNBQVo7QUFDSDs7QUFFRCxTQUFTQyxlQUFULENBQXlCRixHQUF6QixFQUE4QjtBQUMxQixNQUFJLEtBQUtBLEdBQUwsQ0FBSixFQUFlLENBRWQ7QUFDSiIsImZpbGUiOiIuLi8uLi9Db0NyZWF0ZUpTL3NyYy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb0NyZWF0ZVNvY2tldCBmcm9tIFwiLi9zb2NrZXQuanNcIlxuaW1wb3J0IENSVUQgZnJvbSBcIi4vY3J1ZC5qc1wiXG5pbXBvcnQgQ29yZSBmcm9tIFwiLi9jb3JlLmpzXCJcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gXCIuL3V0aWxzLmpzXCJcbmltcG9ydCBNZXNzYWdlIGZyb20gXCIuL21lc3NhZ2UuanNcIlxuXG4vLyBpbXBvcnQgQ1JEVCBmcm9tIFwiLi9jcmR0LmpzXCJcbmxldCBzb2NrZXQgPSBuZXcgQ29DcmVhdGVTb2NrZXQoJ3dzJyk7XG5sZXQgc29ja2V0QXBpID0gbmV3IENvQ3JlYXRlU29ja2V0KCdhcGknKTtcblxubGV0IGNvcmUgPSBDb3JlKHNvY2tldClcbmxldCBjcnVkID0gQ1JVRChzb2NrZXQpXG5sZXQgbWVzc2FnZSA9IE1lc3NhZ2Uoc29ja2V0KVxuXG5jb3JlLmluaXQod2luZG93LmNvbmZpZy5ob3N0ID8gd2luZG93LmNvbmZpZy5ob3N0IDogJ3NlcnZlci5jb2NyZWF0ZS5hcHAnKTtcblxuZnVuY3Rpb24gYWRkQ29tcG9uZW50KGtleSwgY29tcG9uZW50KSB7XG4gICAgdGhpc1trZXldID0gY29tcG9uZW50O1xufVxuXG5mdW5jdGlvbiByZW1vdmVDb21wb25lbnQoa2V5KSB7XG4gICAgaWYgKHRoaXNba2V5XSkge1xuXG4gICAgfVxufVxuXG5leHBvcnQge1xuICAgIGNvcmUsXG4gICAgc29ja2V0LFxuICAgIHNvY2tldEFwaSxcbiAgICBjcnVkLFxuICAgIHV0aWxzLFxuICAgIG1lc3NhZ2UsXG4gICAgYWRkQ29tcG9uZW50LFxuICAgIHJlbW92ZUNvbXBvbmVudFxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/index.js\n')},"../../CoCreateJS/src/message.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = Message;\n\nvar _commonFun = __webpack_require__(/*! ./common-fun.js */ \"../../CoCreateJS/src/common-fun.js\");\n\nconst CoCreateMessage = {\n  socket: null,\n  setSocket: function (socket) {\n    this.socket = socket;\n  },\n\n  /*\n  CoCreate.message.send({\n     namespace: '',\n     room: '',\n     broadcast: true/false,\n     broadcast_sender: true/false\n     \n     rooms: [r1, r2],\n     emit: {\n       message': 'nice game',\n       data': 'let's play a game ....'\n     }\n   })\n  */\n  send: function (data) {\n    let request_data = (0, _commonFun.getCommonParams)();\n\n    if (!data || !data.emit) {\n      return;\n    }\n\n    request_data = { ...request_data,\n      ...data\n    };\n    /** socket parameters **/\n    // if (data['broadcast'] === undefined) {\n    //   request_data['broadcast'] = true;\n    // }\n    // if (data['broadcast_sender'] === undefined) {\n    //   request_data['broadcast_sender'] = true;\n    // }\n\n    const room = (0, _commonFun.generateSocketClient)(data.namespace, data.room);\n    this.socket.send('sendMessage', request_data, room);\n  },\n  receive: function (message, fun) {\n    this.socket.listen(message, fun);\n  }\n};\n\nfunction Message(socket) {\n  CoCreateMessage.setSocket(socket);\n  return CoCreateMessage;\n}\n\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi4vQ29DcmVhdGVKUy9zcmMvbWVzc2FnZS5qcz83ODQyIl0sIm5hbWVzIjpbIkNvQ3JlYXRlTWVzc2FnZSIsInNvY2tldCIsInNldFNvY2tldCIsInNlbmQiLCJkYXRhIiwicmVxdWVzdF9kYXRhIiwiZW1pdCIsInJvb20iLCJuYW1lc3BhY2UiLCJyZWNlaXZlIiwibWVzc2FnZSIsImZ1biIsImxpc3RlbiIsIk1lc3NhZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQSxNQUFNQSxlQUFlLEdBQUc7QUFDdEJDLFFBQU0sRUFBRSxJQURjO0FBRXRCQyxXQUFTLEVBQUUsVUFBU0QsTUFBVCxFQUFpQjtBQUMxQixTQUFLQSxNQUFMLEdBQWNBLE1BQWQ7QUFDRCxHQUpxQjs7QUFLdkI7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNDRSxNQUFJLEVBQUUsVUFBU0MsSUFBVCxFQUFlO0FBQ2xCLFFBQUlDLFlBQVksR0FBRyxpQ0FBbkI7O0FBRUEsUUFBSSxDQUFDRCxJQUFELElBQVMsQ0FBQ0EsSUFBSSxDQUFDRSxJQUFuQixFQUF5QjtBQUN2QjtBQUNEOztBQUNERCxnQkFBWSxHQUFHLEVBQUMsR0FBR0EsWUFBSjtBQUFrQixTQUFHRDtBQUFyQixLQUFmO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsVUFBTUcsSUFBSSxHQUFHLHFDQUFxQkgsSUFBSSxDQUFDSSxTQUExQixFQUFxQ0osSUFBSSxDQUFDRyxJQUExQyxDQUFiO0FBRUEsU0FBS04sTUFBTCxDQUFZRSxJQUFaLENBQWlCLGFBQWpCLEVBQWdDRSxZQUFoQyxFQUE4Q0UsSUFBOUM7QUFDRixHQXJDc0I7QUF1Q3ZCRSxTQUFPLEVBQUUsVUFBU0MsT0FBVCxFQUFrQkMsR0FBbEIsRUFBdUI7QUFDOUIsU0FBS1YsTUFBTCxDQUFZVyxNQUFaLENBQW1CRixPQUFuQixFQUE0QkMsR0FBNUI7QUFDRDtBQXpDc0IsQ0FBeEI7O0FBNENlLFNBQVNFLE9BQVQsQ0FBaUJaLE1BQWpCLEVBQXlCO0FBQ3RDRCxpQkFBZSxDQUFDRSxTQUFoQixDQUEwQkQsTUFBMUI7QUFDQSxTQUFPRCxlQUFQO0FBQ0Q7O0FBQUEiLCJmaWxlIjoiLi4vLi4vQ29DcmVhdGVKUy9zcmMvbWVzc2FnZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Z2V0Q29tbW9uUGFyYW1zLCBnZXRDb21tb25QYXJhbXNFeHRlbmQsIGdlbmVyYXRlU29ja2V0Q2xpZW50fSBmcm9tIFwiLi9jb21tb24tZnVuLmpzXCJcblxuY29uc3QgQ29DcmVhdGVNZXNzYWdlID0ge1xuICBzb2NrZXQ6IG51bGwsXG4gIHNldFNvY2tldDogZnVuY3Rpb24oc29ja2V0KSB7XG4gICAgdGhpcy5zb2NrZXQgPSBzb2NrZXQ7XG4gIH0sXG4gLypcbiBDb0NyZWF0ZS5tZXNzYWdlLnNlbmQoe1xuICAgIG5hbWVzcGFjZTogJycsXG4gICAgcm9vbTogJycsXG4gICAgYnJvYWRjYXN0OiB0cnVlL2ZhbHNlLFxuICAgIGJyb2FkY2FzdF9zZW5kZXI6IHRydWUvZmFsc2VcbiAgICBcbiAgICByb29tczogW3IxLCByMl0sXG4gICAgZW1pdDoge1xuICAgICAgbWVzc2FnZSc6ICduaWNlIGdhbWUnLFxuICAgICAgZGF0YSc6ICdsZXQncyBwbGF5IGEgZ2FtZSAuLi4uJ1xuICAgIH1cbiAgfSlcbiAqL1xuIHNlbmQ6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBsZXQgcmVxdWVzdF9kYXRhID0gZ2V0Q29tbW9uUGFyYW1zKCk7XG4gICAgXG4gICAgaWYgKCFkYXRhIHx8ICFkYXRhLmVtaXQpIHtcbiAgICAgIHJldHVybjsgICAgIFxuICAgIH1cbiAgICByZXF1ZXN0X2RhdGEgPSB7Li4ucmVxdWVzdF9kYXRhLCAuLi5kYXRhfVxuICAgIFxuICAgIC8qKiBzb2NrZXQgcGFyYW1ldGVycyAqKi9cbiAgICAvLyBpZiAoZGF0YVsnYnJvYWRjYXN0J10gPT09IHVuZGVmaW5lZCkge1xuICAgIC8vICAgcmVxdWVzdF9kYXRhWydicm9hZGNhc3QnXSA9IHRydWU7XG4gICAgLy8gfVxuICAgIC8vIGlmIChkYXRhWydicm9hZGNhc3Rfc2VuZGVyJ10gPT09IHVuZGVmaW5lZCkge1xuICAgIC8vICAgcmVxdWVzdF9kYXRhWydicm9hZGNhc3Rfc2VuZGVyJ10gPSB0cnVlO1xuICAgIC8vIH1cbiAgICBjb25zdCByb29tID0gZ2VuZXJhdGVTb2NrZXRDbGllbnQoZGF0YS5uYW1lc3BhY2UsIGRhdGEucm9vbSk7XG4gICAgXG4gICAgdGhpcy5zb2NrZXQuc2VuZCgnc2VuZE1lc3NhZ2UnLCByZXF1ZXN0X2RhdGEsIHJvb20pXG4gfSxcbiBcbiByZWNlaXZlOiBmdW5jdGlvbihtZXNzYWdlLCBmdW4pIHtcbiAgIHRoaXMuc29ja2V0Lmxpc3RlbihtZXNzYWdlLCBmdW4pO1xuIH0sXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1lc3NhZ2Uoc29ja2V0KSB7XG4gIENvQ3JlYXRlTWVzc2FnZS5zZXRTb2NrZXQoc29ja2V0KVxuICByZXR1cm4gQ29DcmVhdGVNZXNzYWdlO1xufTtcblxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/message.js\n")},"../../CoCreateJS/src/socket.js":(__unused_webpack_module,exports)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nclass CoCreateSocket {\n  constructor(prefix = \"crud\") {\n    this.prefix = prefix || \"crud\";\n    this.sockets = new Map();\n    this.listeners = new Map();\n    this.messageQueue = new Map();\n    this.saveFileName = '';\n    this.globalScope = \"\";\n  }\n\n  setGlobalScope(scope) {\n    this.globalScope = `${this.prefix}/${scope}`;\n  }\n\n  getGlobalScope() {\n    return this.globalScope;\n  }\n  /**\n   * config: {namespace, room, host}\n   */\n\n\n  create(config) {\n    const {\n      namespace,\n      room\n    } = config;\n    const key = this.getKey(namespace, room);\n\n    let _this = this;\n\n    let socket;\n\n    if (this.sockets.get(key)) {\n      socket = this.sockets.get(key);\n      console.log('SOcket already has been register');\n      return;\n    }\n\n    let w_protocol = window.location.protocol;\n\n    if (window.location.protocol === \"about:\") {\n      w_protocol = window.parent.location.protocol;\n    }\n\n    let protocol = w_protocol === 'http:' ? 'ws' : 'wss';\n    const port = config.port ? config.port : 8088;\n    let socket_url = `${protocol}://${window.location.host}:${port}/${key}`;\n\n    if (config.host) {\n      if (config.host.includes(\"://\")) {\n        socket_url = `${config.host}/${key}`;\n      } else {\n        socket_url = `${protocol}://${config.host}:${port}/${key}`;\n      }\n    }\n\n    socket = new WebSocket(socket_url);\n\n    socket.onopen = function (event) {\n      console.log('created socket: ' + key);\n      const messages = _this.messageQueue.get(key) || [];\n      console.log(messages);\n      messages.forEach(msg => socket.send(JSON.stringify(msg)));\n\n      _this.sockets.set(key, socket);\n\n      _this.messageQueue.set(key, []);\n    };\n\n    socket.onclose = function (event) {\n      switch (event.code) {\n        case 1000:\n          // close normal\n          console.log(\"websocket: closed\");\n          break;\n\n        default:\n          _this.destroy(socket, key);\n\n          _this.reconnect(socket, config);\n\n          break;\n      }\n    };\n\n    socket.onerror = function (err) {\n      console.log('Socket error');\n\n      _this.destroy(socket, key);\n\n      _this.reconnect(socket, config);\n    };\n\n    socket.onmessage = function (data) {\n      try {\n        if (data.data instanceof Blob) {\n          _this.saveFile(data.data);\n\n          return;\n        }\n\n        let rev_data = JSON.parse(data.data);\n        let action = rev_data.action; // if (['readDocument', 'createDocument', 'updateDocument'].includes(action)) {\n        // \trev_data.data.data = utilsCrud.encodeObject(rev_data.data.data);\n        // }\n\n        const listeners = _this.listeners.get(rev_data.action);\n\n        if (!listeners) {\n          return;\n        }\n\n        listeners.forEach(listener => {\n          listener(rev_data.data, key);\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    };\n  }\n  /**\n   * \n   */\n\n\n  send(action, data, room) {\n    const obj = {\n      action: action,\n      data: data\n    };\n    const key = this.getKeyByRoom(room);\n    const socket = this.getByRoom(room);\n\n    if (socket) {\n      socket.send(JSON.stringify(obj));\n    } else {\n      if (this.messageQueue.get(key)) {\n        this.messageQueue.get(key).push(obj);\n      } else {\n        this.messageQueue.set(key, [obj]);\n      }\n    }\n  }\n\n  sendFile(file, room) {\n    const socket = this.getByRoom(room);\n\n    if (socket) {\n      socket.send(file);\n    }\n  }\n  /**\n   * scope: ns/room\n   */\n\n\n  listen(type, callback) {\n    if (!this.listeners.get(type)) {\n      this.listeners.set(type, [callback]);\n    } else {\n      this.listeners.get(type).push(callback);\n    }\n  }\n\n  reconnect(socket, config) {\n    let _this = this;\n\n    setTimeout(function () {\n      _this.create(config);\n    }, 1000);\n  }\n\n  destroy(socket, key) {\n    if (socket) {\n      socket.onerror = socket.onopen = socket.onclose = null;\n      socket.close();\n      socket = null;\n    }\n\n    if (this.sockets.get(key)) {\n      this.sockets.delete(key);\n    }\n  }\n\n  getKey(namespace, room) {\n    let key = `${this.prefix}`;\n\n    if (namespace && namespace != '') {\n      if (room && room != '') {\n        key += `/${namespace}/${room}`;\n      } else {\n        key += `/${namespace}`;\n      }\n    }\n\n    return key;\n  }\n\n  getByRoom(room) {\n    let key = this.getKeyByRoom(room);\n    return this.sockets.get(key);\n  }\n\n  getKeyByRoom(room) {\n    let key = this.globalScope;\n\n    if (room) {\n      key = `${this.prefix}/${room}`;\n    }\n\n    return key;\n  }\n\n  saveFile(blob) {\n    // const {filename} = window.saveFileInfo;\n    const file_name = this.saveFileName || 'downloadFile';\n    var a = document.createElement(\"a\");\n    document.body.appendChild(a);\n    a.style = \"display: none\";\n    let url = window.URL.createObjectURL(blob);\n    a.href = url;\n    a.download = file_name;\n    a.click();\n    window.URL.revokeObjectURL(url);\n    this.saveFileName = '';\n  }\n\n}\n\nvar _default = CoCreateSocket;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/socket.js\n")},"../../CoCreateJS/src/utils.crud.js":(__unused_webpack_module,exports)=>{"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nfunction __mergeObject(target, source) {\n  target = target || {};\n\n  for (let key of Object.keys(source)) {\n    if (source[key] instanceof Object) {\n      Object.assign(source[key], __mergeObject(target[key], source[key]));\n    }\n  }\n\n  Object.assign(target || {}, source);\n  return target;\n}\n\nfunction __createObject(data, path) {\n  if (!path) return data;\n  let keys = path.split('.');\n  let newObject = data;\n\n  for (var i = keys.length - 1; i >= 0; i--) {\n    newObject = {\n      [keys[i]]: newObject\n    };\n  }\n\n  return newObject;\n}\n\nfunction __createArray(key, data) {\n  try {\n    let item = /([\\w\\W]+)\\[(\\d+)\\]/gm.exec(key);\n\n    if (item && item.length == 3) {\n      let arrayKey = item[1];\n      let index = parseInt(item[2]);\n\n      if (!data[arrayKey] || !Array.isArray(data[arrayKey])) {\n        data[arrayKey] = [];\n      }\n\n      data[arrayKey][index] = data[key];\n      delete data[key];\n      key = arrayKey;\n    }\n  } catch {\n    console.log('create array error');\n  }\n\n  return key;\n}\n\nfunction isObject(item) {\n  return !!item && item.constructor === Object;\n}\n\nfunction isArray(item) {\n  return !!item && item.constructor === Array;\n}\n\nfunction decodeObject(data) {\n  let keys = Object.keys(data);\n  let objectData = {};\n  keys.forEach(k => {\n    k = __createArray(k, data);\n\n    if (k.split('.').length > 1) {\n      let newData = __createObject(data[k], k);\n\n      delete data[k];\n      objectData = __mergeObject(objectData, newData);\n    } else {\n      objectData[k] = data[k];\n    }\n  });\n  return objectData;\n}\n\nfunction encodeObject(data) {\n  let keys = Object.keys(data);\n  let newData = {};\n  keys.forEach(k => {\n    let data_value = data[k];\n\n    if (isObject(data[k])) {\n      let new_obj = encodeObject(data[k]);\n      let newKeys = Object.keys(new_obj);\n      newKeys.forEach(newKey => {\n        let value = new_obj[newKey];\n        newKey = k + \".\" + newKey;\n        newData[newKey] = value;\n      });\n    } else if (isArray(data_value)) {\n      data_value.forEach((v, index) => {\n        newData[`${k}[${index}]`] = v;\n      });\n    } else {\n      newData[k] = data[k];\n    }\n  });\n  return newData;\n}\n\nvar _default = {\n  decodeObject,\n  encodeObject\n};\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi4vQ29DcmVhdGVKUy9zcmMvdXRpbHMuY3J1ZC5qcz9hNjBjIl0sIm5hbWVzIjpbIl9fbWVyZ2VPYmplY3QiLCJ0YXJnZXQiLCJzb3VyY2UiLCJrZXkiLCJPYmplY3QiLCJrZXlzIiwiYXNzaWduIiwiX19jcmVhdGVPYmplY3QiLCJkYXRhIiwicGF0aCIsInNwbGl0IiwibmV3T2JqZWN0IiwiaSIsImxlbmd0aCIsIl9fY3JlYXRlQXJyYXkiLCJpdGVtIiwiZXhlYyIsImFycmF5S2V5IiwiaW5kZXgiLCJwYXJzZUludCIsIkFycmF5IiwiaXNBcnJheSIsImNvbnNvbGUiLCJsb2ciLCJpc09iamVjdCIsImNvbnN0cnVjdG9yIiwiZGVjb2RlT2JqZWN0Iiwib2JqZWN0RGF0YSIsImZvckVhY2giLCJrIiwibmV3RGF0YSIsImVuY29kZU9iamVjdCIsImRhdGFfdmFsdWUiLCJuZXdfb2JqIiwibmV3S2V5cyIsIm5ld0tleSIsInZhbHVlIiwidiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLFNBQVVBLGFBQVYsQ0FBd0JDLE1BQXhCLEVBQWdDQyxNQUFoQyxFQUNBO0FBQ0NELFFBQU0sR0FBR0EsTUFBTSxJQUFJLEVBQW5COztBQUNBLE9BQUssSUFBSUUsR0FBVCxJQUFnQkMsTUFBTSxDQUFDQyxJQUFQLENBQVlILE1BQVosQ0FBaEIsRUFBcUM7QUFDcEMsUUFBSUEsTUFBTSxDQUFDQyxHQUFELENBQU4sWUFBdUJDLE1BQTNCLEVBQW1DO0FBQ2xDQSxZQUFNLENBQUNFLE1BQVAsQ0FBY0osTUFBTSxDQUFDQyxHQUFELENBQXBCLEVBQTJCSCxhQUFhLENBQUNDLE1BQU0sQ0FBQ0UsR0FBRCxDQUFQLEVBQWNELE1BQU0sQ0FBQ0MsR0FBRCxDQUFwQixDQUF4QztBQUNBO0FBQ0Q7O0FBRURDLFFBQU0sQ0FBQ0UsTUFBUCxDQUFjTCxNQUFNLElBQUksRUFBeEIsRUFBNEJDLE1BQTVCO0FBQ0EsU0FBT0QsTUFBUDtBQUNBOztBQUVELFNBQVNNLGNBQVQsQ0FBd0JDLElBQXhCLEVBQThCQyxJQUE5QixFQUNBO0FBQ0MsTUFBSSxDQUFDQSxJQUFMLEVBQVcsT0FBT0QsSUFBUDtBQUVYLE1BQUlILElBQUksR0FBR0ksSUFBSSxDQUFDQyxLQUFMLENBQVcsR0FBWCxDQUFYO0FBQ0EsTUFBSUMsU0FBUyxHQUFHSCxJQUFoQjs7QUFFQSxPQUFLLElBQUtJLENBQUMsR0FBR1AsSUFBSSxDQUFDUSxNQUFMLEdBQWMsQ0FBNUIsRUFBK0JELENBQUMsSUFBSSxDQUFwQyxFQUF1Q0EsQ0FBQyxFQUF4QyxFQUE0QztBQUMzQ0QsYUFBUyxHQUFHO0FBQUMsT0FBQ04sSUFBSSxDQUFDTyxDQUFELENBQUwsR0FBV0Q7QUFBWixLQUFaO0FBQ0E7O0FBQ0QsU0FBT0EsU0FBUDtBQUNBOztBQUVELFNBQVNHLGFBQVQsQ0FBdUJYLEdBQXZCLEVBQTRCSyxJQUE1QixFQUNBO0FBQ0UsTUFBSTtBQUNGLFFBQUlPLElBQUksR0FBRyx1QkFBdUJDLElBQXZCLENBQTRCYixHQUE1QixDQUFYOztBQUNBLFFBQUlZLElBQUksSUFBSUEsSUFBSSxDQUFDRixNQUFMLElBQWUsQ0FBM0IsRUFBOEI7QUFDNUIsVUFBSUksUUFBUSxHQUFHRixJQUFJLENBQUMsQ0FBRCxDQUFuQjtBQUNBLFVBQUlHLEtBQUssR0FBR0MsUUFBUSxDQUFDSixJQUFJLENBQUMsQ0FBRCxDQUFMLENBQXBCOztBQUVBLFVBQUksQ0FBQ1AsSUFBSSxDQUFDUyxRQUFELENBQUwsSUFBbUIsQ0FBQ0csS0FBSyxDQUFDQyxPQUFOLENBQWNiLElBQUksQ0FBQ1MsUUFBRCxDQUFsQixDQUF4QixFQUF1RDtBQUNyRFQsWUFBSSxDQUFDUyxRQUFELENBQUosR0FBaUIsRUFBakI7QUFDRDs7QUFDRFQsVUFBSSxDQUFDUyxRQUFELENBQUosQ0FBZUMsS0FBZixJQUF3QlYsSUFBSSxDQUFDTCxHQUFELENBQTVCO0FBQ0EsYUFBT0ssSUFBSSxDQUFDTCxHQUFELENBQVg7QUFDQUEsU0FBRyxHQUFHYyxRQUFOO0FBQ0Q7QUFDRixHQWJELENBYUUsTUFBTTtBQUNOSyxXQUFPLENBQUNDLEdBQVIsQ0FBWSxvQkFBWjtBQUNEOztBQUNELFNBQU9wQixHQUFQO0FBQ0Q7O0FBSUQsU0FBU3FCLFFBQVQsQ0FBa0JULElBQWxCLEVBQXdCO0FBQ3RCLFNBQVEsQ0FBQyxDQUFDQSxJQUFILElBQWFBLElBQUksQ0FBQ1UsV0FBTCxLQUFxQnJCLE1BQXpDO0FBQ0Q7O0FBQ0QsU0FBU2lCLE9BQVQsQ0FBaUJOLElBQWpCLEVBQXVCO0FBQ3JCLFNBQVEsQ0FBQyxDQUFDQSxJQUFILElBQWFBLElBQUksQ0FBQ1UsV0FBTCxLQUFxQkwsS0FBekM7QUFDRDs7QUFFRCxTQUFTTSxZQUFULENBQXNCbEIsSUFBdEIsRUFBNEI7QUFDMUIsTUFBSUgsSUFBSSxHQUFHRCxNQUFNLENBQUNDLElBQVAsQ0FBWUcsSUFBWixDQUFYO0FBQ0EsTUFBSW1CLFVBQVUsR0FBRyxFQUFqQjtBQUVBdEIsTUFBSSxDQUFDdUIsT0FBTCxDQUFjQyxDQUFELElBQU87QUFDbEJBLEtBQUMsR0FBR2YsYUFBYSxDQUFDZSxDQUFELEVBQUlyQixJQUFKLENBQWpCOztBQUNBLFFBQUlxQixDQUFDLENBQUNuQixLQUFGLENBQVEsR0FBUixFQUFhRyxNQUFiLEdBQXNCLENBQTFCLEVBQTZCO0FBQzNCLFVBQUlpQixPQUFPLEdBQUd2QixjQUFjLENBQUNDLElBQUksQ0FBQ3FCLENBQUQsQ0FBTCxFQUFVQSxDQUFWLENBQTVCOztBQUNBLGFBQU9yQixJQUFJLENBQUNxQixDQUFELENBQVg7QUFFQUYsZ0JBQVUsR0FBRzNCLGFBQWEsQ0FBQzJCLFVBQUQsRUFBYUcsT0FBYixDQUExQjtBQUNELEtBTEQsTUFLTztBQUNMSCxnQkFBVSxDQUFDRSxDQUFELENBQVYsR0FBZ0JyQixJQUFJLENBQUNxQixDQUFELENBQXBCO0FBQ0Q7QUFDRixHQVZEO0FBV0EsU0FBT0YsVUFBUDtBQUNEOztBQUVELFNBQVNJLFlBQVQsQ0FBc0J2QixJQUF0QixFQUE0QjtBQUMxQixNQUFJSCxJQUFJLEdBQUdELE1BQU0sQ0FBQ0MsSUFBUCxDQUFZRyxJQUFaLENBQVg7QUFDQSxNQUFJc0IsT0FBTyxHQUFHLEVBQWQ7QUFDQXpCLE1BQUksQ0FBQ3VCLE9BQUwsQ0FBY0MsQ0FBRCxJQUFPO0FBQ2xCLFFBQUlHLFVBQVUsR0FBR3hCLElBQUksQ0FBQ3FCLENBQUQsQ0FBckI7O0FBQ0EsUUFBSUwsUUFBUSxDQUFDaEIsSUFBSSxDQUFDcUIsQ0FBRCxDQUFMLENBQVosRUFBdUI7QUFDckIsVUFBSUksT0FBTyxHQUFHRixZQUFZLENBQUN2QixJQUFJLENBQUNxQixDQUFELENBQUwsQ0FBMUI7QUFFQSxVQUFJSyxPQUFPLEdBQUc5QixNQUFNLENBQUNDLElBQVAsQ0FBWTRCLE9BQVosQ0FBZDtBQUNBQyxhQUFPLENBQUNOLE9BQVIsQ0FBaUJPLE1BQUQsSUFBWTtBQUMxQixZQUFJQyxLQUFLLEdBQUdILE9BQU8sQ0FBQ0UsTUFBRCxDQUFuQjtBQUNBQSxjQUFNLEdBQUdOLENBQUMsR0FBRyxHQUFKLEdBQVVNLE1BQW5CO0FBQ0FMLGVBQU8sQ0FBQ0ssTUFBRCxDQUFQLEdBQWtCQyxLQUFsQjtBQUNELE9BSkQ7QUFNRCxLQVZELE1BVU8sSUFBSWYsT0FBTyxDQUFDVyxVQUFELENBQVgsRUFBd0I7QUFDN0JBLGdCQUFVLENBQUNKLE9BQVgsQ0FBbUIsQ0FBQ1MsQ0FBRCxFQUFJbkIsS0FBSixLQUFjO0FBQy9CWSxlQUFPLENBQUUsR0FBRUQsQ0FBRSxJQUFHWCxLQUFNLEdBQWYsQ0FBUCxHQUE0Qm1CLENBQTVCO0FBQ0QsT0FGRDtBQUdELEtBSk0sTUFJQTtBQUNMUCxhQUFPLENBQUNELENBQUQsQ0FBUCxHQUFhckIsSUFBSSxDQUFDcUIsQ0FBRCxDQUFqQjtBQUNEO0FBQ0YsR0FuQkQ7QUFvQkEsU0FBT0MsT0FBUDtBQUNEOztlQUVjO0FBQ2JKLGNBRGE7QUFFYks7QUFGYSxDIiwiZmlsZSI6Ii4uLy4uL0NvQ3JlYXRlSlMvc3JjL3V0aWxzLmNydWQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBcdF9fbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UpIFxue1xuXHR0YXJnZXQgPSB0YXJnZXQgfHwge307XG5cdGZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyhzb3VyY2UpKSB7XG5cdFx0aWYgKHNvdXJjZVtrZXldIGluc3RhbmNlb2YgT2JqZWN0KSB7XG5cdFx0XHRPYmplY3QuYXNzaWduKHNvdXJjZVtrZXldLCBfX21lcmdlT2JqZWN0KHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSkpXG5cdFx0fVxuXHR9XG5cdFxuXHRPYmplY3QuYXNzaWduKHRhcmdldCB8fCB7fSwgc291cmNlKVxuXHRyZXR1cm4gdGFyZ2V0XG59XG5cbmZ1bmN0aW9uIF9fY3JlYXRlT2JqZWN0KGRhdGEsIHBhdGgpIFxue1xuXHRpZiAoIXBhdGgpIHJldHVybiBkYXRhO1xuXHRcblx0bGV0IGtleXMgPSBwYXRoLnNwbGl0KCcuJylcblx0bGV0IG5ld09iamVjdCA9IGRhdGE7XG5cblx0Zm9yICh2YXIgIGkgPSBrZXlzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0bmV3T2JqZWN0ID0ge1trZXlzW2ldXTogbmV3T2JqZWN0fVx0XHRcdFx0XG5cdH1cblx0cmV0dXJuIG5ld09iamVjdDtcbn1cblxuZnVuY3Rpb24gX19jcmVhdGVBcnJheShrZXksIGRhdGEpXG57XG4gIHRyeSB7XG4gICAgbGV0IGl0ZW0gPSAvKFtcXHdcXFddKylcXFsoXFxkKylcXF0vZ20uZXhlYyhrZXkpXG4gICAgaWYgKGl0ZW0gJiYgaXRlbS5sZW5ndGggPT0gMykge1xuICAgICAgbGV0IGFycmF5S2V5ID0gaXRlbVsxXTtcbiAgICAgIGxldCBpbmRleCA9IHBhcnNlSW50KGl0ZW1bMl0pO1xuICAgICAgXG4gICAgICBpZiAoIWRhdGFbYXJyYXlLZXldIHx8ICFBcnJheS5pc0FycmF5KGRhdGFbYXJyYXlLZXldKSkge1xuICAgICAgICBkYXRhW2FycmF5S2V5XSA9IFtdO1xuICAgICAgfSBcbiAgICAgIGRhdGFbYXJyYXlLZXldW2luZGV4XSA9IGRhdGFba2V5XTtcbiAgICAgIGRlbGV0ZSBkYXRhW2tleV07XG4gICAgICBrZXkgPSBhcnJheUtleTtcbiAgICB9XG4gIH0gY2F0Y2gge1xuICAgIGNvbnNvbGUubG9nKCdjcmVhdGUgYXJyYXkgZXJyb3InKTtcbiAgfVxuICByZXR1cm4ga2V5O1xufVxuXG5cblxuZnVuY3Rpb24gaXNPYmplY3QoaXRlbSkge1xuICByZXR1cm4gKCEhaXRlbSkgJiYgKGl0ZW0uY29uc3RydWN0b3IgPT09IE9iamVjdCk7XG59XG5mdW5jdGlvbiBpc0FycmF5KGl0ZW0pIHtcbiAgcmV0dXJuICghIWl0ZW0pICYmIChpdGVtLmNvbnN0cnVjdG9yID09PSBBcnJheSk7XG59XG5cbmZ1bmN0aW9uIGRlY29kZU9iamVjdChkYXRhKSB7XG4gIGxldCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSlcbiAgbGV0IG9iamVjdERhdGEgPSB7fTtcbiAgXG4gIGtleXMuZm9yRWFjaCgoaykgPT4ge1xuICAgIGsgPSBfX2NyZWF0ZUFycmF5KGssIGRhdGEpO1xuICAgIGlmIChrLnNwbGl0KCcuJykubGVuZ3RoID4gMSkge1xuICAgICAgbGV0IG5ld0RhdGEgPSBfX2NyZWF0ZU9iamVjdChkYXRhW2tdLCBrKTtcbiAgICAgIGRlbGV0ZSBkYXRhW2tdO1xuICAgICAgXG4gICAgICBvYmplY3REYXRhID0gX19tZXJnZU9iamVjdChvYmplY3REYXRhLCBuZXdEYXRhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2JqZWN0RGF0YVtrXSA9IGRhdGFba107XG4gICAgfVxuICB9KVxuICByZXR1cm4gb2JqZWN0RGF0YTtcbn1cblxuZnVuY3Rpb24gZW5jb2RlT2JqZWN0KGRhdGEpIHtcbiAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKTtcbiAgbGV0IG5ld0RhdGEgPSB7fTtcbiAga2V5cy5mb3JFYWNoKChrKSA9PiB7XG4gICAgbGV0IGRhdGFfdmFsdWUgPSBkYXRhW2tdO1xuICAgIGlmIChpc09iamVjdChkYXRhW2tdKSkge1xuICAgICAgbGV0IG5ld19vYmogPSBlbmNvZGVPYmplY3QoZGF0YVtrXSk7XG4gICAgICBcbiAgICAgIGxldCBuZXdLZXlzID0gT2JqZWN0LmtleXMobmV3X29iaik7XG4gICAgICBuZXdLZXlzLmZvckVhY2goKG5ld0tleSkgPT4ge1xuICAgICAgICBsZXQgdmFsdWUgPSBuZXdfb2JqW25ld0tleV07XG4gICAgICAgIG5ld0tleSA9IGsgKyBcIi5cIiArIG5ld0tleTtcbiAgICAgICAgbmV3RGF0YVtuZXdLZXldID0gdmFsdWU7XG4gICAgICB9KVxuICAgICAgXG4gICAgfSBlbHNlIGlmIChpc0FycmF5KGRhdGFfdmFsdWUpKXtcbiAgICAgIGRhdGFfdmFsdWUuZm9yRWFjaCgodiwgaW5kZXgpID0+IHtcbiAgICAgICAgbmV3RGF0YVtgJHtrfVske2luZGV4fV1gXSA9IHY7XG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICBuZXdEYXRhW2tdID0gZGF0YVtrXTtcbiAgICB9XG4gIH0pXG4gIHJldHVybiBuZXdEYXRhO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRlY29kZU9iamVjdCxcbiAgZW5jb2RlT2JqZWN0XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/utils.crud.js\n")},"../../CoCreateJS/src/utils.js":(__unused_webpack_module,exports)=>{"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.generateUUID = generateUUID;\nexports.isRealTime = isRealTime;\nexports.getParentFromElement = getParentFromElement;\nexports.isReadValue = isReadValue;\nexports.isUpdateValue = isUpdateValue;\nexports.isJsonString = isJsonString;\nexports.getAttributes = getAttributes;\nexports.checkValue = checkValue;\nexports.allFrame = allFrame;\nexports.cssPath = cssPath;\nexports.getTopMostWindow = getTopMostWindow;\nexports.findIframeFromElement = findIframeFromElement;\nexports.getIframeFromPath = getIframeFromPath;\nexports.configMatch2 = configMatch2;\nexports.configExecuter = configExecuter;\nexports.UUID = UUID;\nexports.parseTextToHtml = parseTextToHtml;\nexports.splitBydelimiter = splitBydelimiter;\nexports.joinBydelimiter = joinBydelimiter;\nexports.isValidSelector = isValidSelector;\nexports.getElementPath = getElementPath;\nexports.isUsageY = isUsageY;\nexports.default = void 0;\n\n/**\n * Created by jin\n * 2020-04-03\n */\nfunction generateUUID(length = 36) {\n  // if (length == 10) {\n  //   var result           = \'\';\n  //   var characters       = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\';\n  //   var charactersLength = characters.length;\n  //   for ( var i = 0; i < length; i++ ) {\n  //     result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  //   }\n  //   var dd = new Date().toTimeString();\n  //   var random = dd.replace(/[\\W_]+/g, "").substr(0,6);\n  //   result += random;\n  //   return result;\n  // }\n  let d = new Date().getTime();\n  let d2 = window.performance && window.performance.now && window.performance.now() * 1000 || 0;\n  let pattern = "uxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";\n\n  if (length <= pattern.length) {\n    pattern = pattern.substr(0, length);\n  } else {\n    let add_len = length - pattern.length;\n    let sub_pattern = "-xxxyyxxx";\n    let group_n = Math.floor(add_len / sub_pattern.length);\n\n    for (let i = 0; i < group_n; i++) {\n      pattern += sub_pattern;\n    }\n\n    group_n = add_len - group_n * sub_pattern.length;\n    pattern += sub_pattern.substr(0, group_n);\n  }\n\n  let uuid = pattern.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16;\n\n    if (d > 0) {\n      var r = (d + r) % 16 | 0;\n      d = Math.floor(d / 16);\n    } else {\n      var r = (d2 + r) % 16 | 0;\n      d2 = Math.floor(d2 / 16);\n    }\n\n    return (c == "x" ? r : r & 0x7 | 0x8).toString(16);\n  });\n  return uuid;\n}\n\nfunction isRealTime(element, parent_realTime) {\n  let realtime = element.getAttribute("data-realtime") || parent_realTime;\n\n  if (realtime === "false") {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getParentFromElement(element, parent_class, attributes) {\n  if (parent_class) {\n    if (element.classList.contains(parent_class)) {\n      return element;\n    }\n\n    let node = element.parentNode;\n\n    while (node != null && node.classList) {\n      if (node.classList.contains(parent_class)) {\n        return node;\n      }\n\n      node = node.parentNode;\n    }\n  } else if (attributes) {\n    if (attributes.every(attr => element.attributes.hasOwnProperty(attr))) {\n      return element;\n    }\n\n    let node = element.parentNode;\n\n    while (node != null && node.attributes) {\n      if (attributes.every(attr => node.attributes.hasOwnProperty(attr))) {\n        return node;\n      }\n\n      node = node.parentNode;\n    }\n  }\n\n  return false;\n}\n\nfunction isReadValue(element) {\n  return element.getAttribute("data-read_value") != "false";\n}\n\nfunction isUpdateValue(element) {\n  return element.getAttribute("data-update_value") != "false";\n}\n\nfunction isJsonString(str_data) {\n  try {\n    let json_data = JSON.parse(str_data);\n\n    if (typeof json_data === "object" && json_data != null) {\n      return true;\n    } else {\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction getAttributes(element) {\n  return element.getAttributeNames().reduce((attrMap, name) => {\n    attrMap[name] = element.getAttribute(name);\n    return attrMap;\n  }, {});\n}\n\nfunction checkValue(value) {\n  if (!value) return false;\n\n  if (/{{\\s*([\\w\\W]+)\\s*}}/g.test(value)) {\n    return false;\n  }\n\n  return true;\n} // hosseins utills\n// function to go through all frames\n\n\nfunction allFrame(callback) {\n  let allFrames = [{\n    document,\n    window\n  }];\n\n  for (let frame of document.querySelectorAll("iframe")) {\n    let frameDocument = frame.contentDocument || frame.contentWindow.document;\n    let frameWindow = frame.contentWindow;\n    allFrames.push({\n      document: frameDocument,\n      window: frameWindow,\n      frameElement: frame\n    });\n  }\n\n  let result = new Set();\n\n  for (let frame of allFrames) {\n    let callbackResult = callback(frame);\n    if (callbackResult && typeof callbackResult[Symbol.iterator] === "function") callbackResult.forEach(el => result.add(el));else if (callbackResult) result.add(callbackResult);\n  }\n\n  return Array.from(result);\n}\n\nfunction cssPath(node) {\n  let pathSplits = [];\n\n  do {\n    if (!node || !node.tagName) return false;\n    let pathSplit = node.tagName.toLowerCase();\n    if (node.id && node.tagName !== "BODY") pathSplit += "#" + node.id;\n\n    if (node.classList.length && node.tagName !== "BODY") {\n      node.classList.forEach(item => {\n        if (item.indexOf(":") === -1) pathSplit += "." + item;\n      });\n    }\n\n    if (node.tagName !== "BODY" && node.parentNode) {\n      let index = Array.prototype.indexOf.call(node.parentNode.children, node);\n      pathSplit += `:nth-child(${index + 1})`;\n    }\n\n    pathSplits.unshift(pathSplit);\n    node = node.parentNode;\n  } while (node.tagName !== "HTML");\n\n  return pathSplits.join(" > ");\n}\n\nfunction getTopMostWindow() {\n  let parentWindow = window;\n\n  while (parentWindow !== window.parent) parentWindow = window.parent;\n\n  return parentWindow;\n}\n\nfunction findIframeFromElement(windowObject, element) {\n  let frameElement;\n  allFrame(frame => {\n    if (frame.document.contains(element)) frameElement = frame.frameElement; // window.cc.findIframeFromElement(frame.window, element);\n  });\n  return frameElement;\n}\n\nfunction getIframeFromPath(path) {\n  let topWindow = getTopMostWindow;\n  path.forEach(selector => {\n    if (topWindow) topWindow = topWindow.querySelector(selector);\n  });\n  return topWindow;\n} // DO NOT REMOVE\n// configMatch: function* configMatch(elementConfig, element) {\n//   for (let config of elementConfig) {\n//     // if (!Array.isArray(config.selector))\n//     //   config.selector = [config.selector];\n//     if (config.selector && element.matches(config.selector)) yield config;\n//   }\n//   return;\n// },\n\n\nfunction configMatch2(elementConfig, element) {\n  let result = [];\n\n  for (let config of elementConfig) {\n    if (config.selector && element.matches(config.selector)) result.push(config);\n  }\n\n  return result;\n} // DO NOT REMOVE\n// an opiniated function uses configMatch2 to read configs\n// WARNING: the config iterated from top to bottom. for deseired effect elementConfig should be reveresed\n// typeof elementConfig: array of objects and every objects containing keys as false, true or a selector \n// element: the element to read attributes\n// key: the key in which is in elementConfig and on match onSuccess callback will be called\n\n\nfunction configExecuter(element, key, onSuccess, elementConfig) {\n  for (let config of configMatch2(elementConfig || window.elementConfig, element)) if (config[key] === true) return onSuccess(element, config);else if (config[key] === false) return false;else if (config[key] === undefined) continue;else if (isValidSelector(config[key])) return onSuccess(element, config, true);else console.warn("builder: wrong element config ", config);\n\n  return false;\n}\n\nfunction UUID(length = 10) {\n  var result = "";\n  var characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";\n  var charactersLength = characters.length;\n\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  var d = new Date().toTimeString();\n  var random = d.replace(/[\\W_]+/g, "").substr(0, 6);\n  result += random;\n  return result;\n}\n\nfunction parseTextToHtml(text) {\n  let doc = new DOMParser().parseFromString(text, "text/html");\n  if (doc.head.children[0]) return doc.head.children[0];else return doc.body.children[0];\n}\n\nfunction splitBydelimiter(str, delimiter) {\n  return str.split(delimiter).map(s => s.trim());\n}\n\nfunction joinBydelimiter(str, delimiter) {\n  return str.map(s => s.trim()).join(delimiter);\n}\n\nfunction isValidSelector(selector) {\n  try {\n    document.createDocumentFragment().querySelector(selector);\n  } catch (error) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getElementPath(element, returnContext) {\n  let path = [];\n  let topWindow = window;\n  let iframeElement = findIframeFromElement(topWindow, element);\n  let p = cssPath(iframeElement);\n  if (p) path.unshift(p);\n  return returnContext ? {\n    path,\n    document: iframeElement || document\n  } : path; //todo: support for nested iframe\n  // while(iframeElement !== findIframeFromElement(topWindow,iframeElement))\n  // {\n  //   iframeElement = findIframeFromElement(topWindow,iframeElement);\n  //   path.unshift(cssPath(iframeElement))\n  // }\n}\n\nfunction isUsageY(input) {\n  if (this.isJsonString(input.getAttribute(\'data-collection\'))) {\n    return false;\n  }\n\n  if (this.isJsonString(input.getAttribute(\'name\'))) {\n    return false;\n  }\n\n  if (input.tagName === "INPUT" && ["text", "email", "tel", "url"].includes(input.type) || input.tagName === "TEXTAREA") {\n    if (!input.getAttribute(\'name\')) {\n      return false;\n    }\n\n    if (input.getAttribute("data-realtime") == "false") {\n      return false;\n    }\n\n    if (input.getAttribute("data-unique") === "true") {\n      return false;\n    }\n\n    if (input.type === \'password\') {\n      return false;\n    }\n\n    if (!this.isReadValue(input)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nvar _default = {\n  isUsageY,\n  getElementPath,\n  isValidSelector,\n  joinBydelimiter,\n  splitBydelimiter,\n  parseTextToHtml,\n  UUID,\n  configExecuter,\n  configMatch2,\n  getIframeFromPath,\n  findIframeFromElement,\n  getTopMostWindow,\n  cssPath,\n  allFrame,\n  checkValue,\n  getAttributes,\n  isJsonString,\n  isUpdateValue,\n  isReadValue,\n  getParentFromElement,\n  isRealTime,\n  generateUUID\n};\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/utils.js\n')},"./node_modules/babel-runtime/regenerator/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/regenerator-runtime/runtime-module.js");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvYmFiZWwtcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcz9kNzg1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHVIQUErQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9iYWJlbC1ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/babel-runtime/regenerator/index.js\n')},"./node_modules/backoff/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('//      Copyright (c) 2012 Mathieu Turcotte\n//      Licensed under the MIT license.\n\nvar Backoff = __webpack_require__(/*! ./lib/backoff */ "./node_modules/backoff/lib/backoff.js");\nvar ExponentialBackoffStrategy = __webpack_require__(/*! ./lib/strategy/exponential */ "./node_modules/backoff/lib/strategy/exponential.js");\nvar FibonacciBackoffStrategy = __webpack_require__(/*! ./lib/strategy/fibonacci */ "./node_modules/backoff/lib/strategy/fibonacci.js");\nvar FunctionCall = __webpack_require__(/*! ./lib/function_call.js */ "./node_modules/backoff/lib/function_call.js");\n\nmodule.exports.Backoff = Backoff;\nmodule.exports.FunctionCall = FunctionCall;\nmodule.exports.FibonacciStrategy = FibonacciBackoffStrategy;\nmodule.exports.ExponentialStrategy = ExponentialBackoffStrategy;\n\n// Constructs a Fibonacci backoff.\nmodule.exports.fibonacci = function(options) {\n    return new Backoff(new FibonacciBackoffStrategy(options));\n};\n\n// Constructs an exponential backoff.\nmodule.exports.exponential = function(options) {\n    return new Backoff(new ExponentialBackoffStrategy(options));\n};\n\n// Constructs a FunctionCall for the given function and arguments.\nmodule.exports.call = function(fn, vargs, callback) {\n    var args = Array.prototype.slice.call(arguments);\n    fn = args[0];\n    vargs = args.slice(1, args.length - 1);\n    callback = args[args.length - 1];\n    return new FunctionCall(fn, vargs, callback);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvYmFja29mZi9pbmRleC5qcz8wYjM4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUEsY0FBYyxtQkFBTyxDQUFDLDREQUFlO0FBQ3JDLGlDQUFpQyxtQkFBTyxDQUFDLHNGQUE0QjtBQUNyRSwrQkFBK0IsbUJBQU8sQ0FBQyxrRkFBMEI7QUFDakUsbUJBQW1CLG1CQUFPLENBQUMsMkVBQXdCOztBQUVuRCxzQkFBc0I7QUFDdEIsMkJBQTJCO0FBQzNCLGdDQUFnQztBQUNoQyxrQ0FBa0M7O0FBRWxDO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7O0FBRUE7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFja29mZi9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vICAgICAgQ29weXJpZ2h0IChjKSAyMDEyIE1hdGhpZXUgVHVyY290dGVcbi8vICAgICAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuXG52YXIgQmFja29mZiA9IHJlcXVpcmUoJy4vbGliL2JhY2tvZmYnKTtcbnZhciBFeHBvbmVudGlhbEJhY2tvZmZTdHJhdGVneSA9IHJlcXVpcmUoJy4vbGliL3N0cmF0ZWd5L2V4cG9uZW50aWFsJyk7XG52YXIgRmlib25hY2NpQmFja29mZlN0cmF0ZWd5ID0gcmVxdWlyZSgnLi9saWIvc3RyYXRlZ3kvZmlib25hY2NpJyk7XG52YXIgRnVuY3Rpb25DYWxsID0gcmVxdWlyZSgnLi9saWIvZnVuY3Rpb25fY2FsbC5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cy5CYWNrb2ZmID0gQmFja29mZjtcbm1vZHVsZS5leHBvcnRzLkZ1bmN0aW9uQ2FsbCA9IEZ1bmN0aW9uQ2FsbDtcbm1vZHVsZS5leHBvcnRzLkZpYm9uYWNjaVN0cmF0ZWd5ID0gRmlib25hY2NpQmFja29mZlN0cmF0ZWd5O1xubW9kdWxlLmV4cG9ydHMuRXhwb25lbnRpYWxTdHJhdGVneSA9IEV4cG9uZW50aWFsQmFja29mZlN0cmF0ZWd5O1xuXG4vLyBDb25zdHJ1Y3RzIGEgRmlib25hY2NpIGJhY2tvZmYuXG5tb2R1bGUuZXhwb3J0cy5maWJvbmFjY2kgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBCYWNrb2ZmKG5ldyBGaWJvbmFjY2lCYWNrb2ZmU3RyYXRlZ3kob3B0aW9ucykpO1xufTtcblxuLy8gQ29uc3RydWN0cyBhbiBleHBvbmVudGlhbCBiYWNrb2ZmLlxubW9kdWxlLmV4cG9ydHMuZXhwb25lbnRpYWwgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBCYWNrb2ZmKG5ldyBFeHBvbmVudGlhbEJhY2tvZmZTdHJhdGVneShvcHRpb25zKSk7XG59O1xuXG4vLyBDb25zdHJ1Y3RzIGEgRnVuY3Rpb25DYWxsIGZvciB0aGUgZ2l2ZW4gZnVuY3Rpb24gYW5kIGFyZ3VtZW50cy5cbm1vZHVsZS5leHBvcnRzLmNhbGwgPSBmdW5jdGlvbihmbiwgdmFyZ3MsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgIGZuID0gYXJnc1swXTtcbiAgICB2YXJncyA9IGFyZ3Muc2xpY2UoMSwgYXJncy5sZW5ndGggLSAxKTtcbiAgICBjYWxsYmFjayA9IGFyZ3NbYXJncy5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gbmV3IEZ1bmN0aW9uQ2FsbChmbiwgdmFyZ3MsIGNhbGxiYWNrKTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/backoff/index.js\n')},"./node_modules/backoff/lib/backoff.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("//      Copyright (c) 2012 Mathieu Turcotte\n//      Licensed under the MIT license.\n\nvar events = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\nvar precond = __webpack_require__(/*! precond */ \"./node_modules/precond/index.js\");\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\n// A class to hold the state of a backoff operation. Accepts a backoff strategy\n// to generate the backoff delays.\nfunction Backoff(backoffStrategy) {\n    events.EventEmitter.call(this);\n\n    this.backoffStrategy_ = backoffStrategy;\n    this.maxNumberOfRetry_ = -1;\n    this.backoffNumber_ = 0;\n    this.backoffDelay_ = 0;\n    this.timeoutID_ = -1;\n\n    this.handlers = {\n        backoff: this.onBackoff_.bind(this)\n    };\n}\nutil.inherits(Backoff, events.EventEmitter);\n\n// Sets a limit, greater than 0, on the maximum number of backoffs. A 'fail'\n// event will be emitted when the limit is reached.\nBackoff.prototype.failAfter = function(maxNumberOfRetry) {\n    precond.checkArgument(maxNumberOfRetry > 0,\n        'Expected a maximum number of retry greater than 0 but got %s.',\n        maxNumberOfRetry);\n\n    this.maxNumberOfRetry_ = maxNumberOfRetry;\n};\n\n// Starts a backoff operation. Accepts an optional parameter to let the\n// listeners know why the backoff operation was started.\nBackoff.prototype.backoff = function(err) {\n    precond.checkState(this.timeoutID_ === -1, 'Backoff in progress.');\n\n    if (this.backoffNumber_ === this.maxNumberOfRetry_) {\n        this.emit('fail', err);\n        this.reset();\n    } else {\n        this.backoffDelay_ = this.backoffStrategy_.next();\n        this.timeoutID_ = setTimeout(this.handlers.backoff, this.backoffDelay_);\n        this.emit('backoff', this.backoffNumber_, this.backoffDelay_, err);\n    }\n};\n\n// Handles the backoff timeout completion.\nBackoff.prototype.onBackoff_ = function() {\n    this.timeoutID_ = -1;\n    this.emit('ready', this.backoffNumber_, this.backoffDelay_);\n    this.backoffNumber_++;\n};\n\n// Stops any backoff operation and resets the backoff delay to its inital value.\nBackoff.prototype.reset = function() {\n    this.backoffNumber_ = 0;\n    this.backoffStrategy_.reset();\n    clearTimeout(this.timeoutID_);\n    this.timeoutID_ = -1;\n};\n\nmodule.exports = Backoff;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvYmFja29mZi9saWIvYmFja29mZi5qcz8yODY1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUEsYUFBYSxtQkFBTyxDQUFDLCtDQUFRO0FBQzdCLGNBQWMsbUJBQU8sQ0FBQyxnREFBUztBQUMvQixXQUFXLG1CQUFPLENBQUMseUNBQU07O0FBRXpCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFja29mZi9saWIvYmFja29mZi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vICAgICAgQ29weXJpZ2h0IChjKSAyMDEyIE1hdGhpZXUgVHVyY290dGVcbi8vICAgICAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuXG52YXIgZXZlbnRzID0gcmVxdWlyZSgnZXZlbnRzJyk7XG52YXIgcHJlY29uZCA9IHJlcXVpcmUoJ3ByZWNvbmQnKTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG4vLyBBIGNsYXNzIHRvIGhvbGQgdGhlIHN0YXRlIG9mIGEgYmFja29mZiBvcGVyYXRpb24uIEFjY2VwdHMgYSBiYWNrb2ZmIHN0cmF0ZWd5XG4vLyB0byBnZW5lcmF0ZSB0aGUgYmFja29mZiBkZWxheXMuXG5mdW5jdGlvbiBCYWNrb2ZmKGJhY2tvZmZTdHJhdGVneSkge1xuICAgIGV2ZW50cy5FdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICAgIHRoaXMuYmFja29mZlN0cmF0ZWd5XyA9IGJhY2tvZmZTdHJhdGVneTtcbiAgICB0aGlzLm1heE51bWJlck9mUmV0cnlfID0gLTE7XG4gICAgdGhpcy5iYWNrb2ZmTnVtYmVyXyA9IDA7XG4gICAgdGhpcy5iYWNrb2ZmRGVsYXlfID0gMDtcbiAgICB0aGlzLnRpbWVvdXRJRF8gPSAtMTtcblxuICAgIHRoaXMuaGFuZGxlcnMgPSB7XG4gICAgICAgIGJhY2tvZmY6IHRoaXMub25CYWNrb2ZmXy5iaW5kKHRoaXMpXG4gICAgfTtcbn1cbnV0aWwuaW5oZXJpdHMoQmFja29mZiwgZXZlbnRzLkV2ZW50RW1pdHRlcik7XG5cbi8vIFNldHMgYSBsaW1pdCwgZ3JlYXRlciB0aGFuIDAsIG9uIHRoZSBtYXhpbXVtIG51bWJlciBvZiBiYWNrb2Zmcy4gQSAnZmFpbCdcbi8vIGV2ZW50IHdpbGwgYmUgZW1pdHRlZCB3aGVuIHRoZSBsaW1pdCBpcyByZWFjaGVkLlxuQmFja29mZi5wcm90b3R5cGUuZmFpbEFmdGVyID0gZnVuY3Rpb24obWF4TnVtYmVyT2ZSZXRyeSkge1xuICAgIHByZWNvbmQuY2hlY2tBcmd1bWVudChtYXhOdW1iZXJPZlJldHJ5ID4gMCxcbiAgICAgICAgJ0V4cGVjdGVkIGEgbWF4aW11bSBudW1iZXIgb2YgcmV0cnkgZ3JlYXRlciB0aGFuIDAgYnV0IGdvdCAlcy4nLFxuICAgICAgICBtYXhOdW1iZXJPZlJldHJ5KTtcblxuICAgIHRoaXMubWF4TnVtYmVyT2ZSZXRyeV8gPSBtYXhOdW1iZXJPZlJldHJ5O1xufTtcblxuLy8gU3RhcnRzIGEgYmFja29mZiBvcGVyYXRpb24uIEFjY2VwdHMgYW4gb3B0aW9uYWwgcGFyYW1ldGVyIHRvIGxldCB0aGVcbi8vIGxpc3RlbmVycyBrbm93IHdoeSB0aGUgYmFja29mZiBvcGVyYXRpb24gd2FzIHN0YXJ0ZWQuXG5CYWNrb2ZmLnByb3RvdHlwZS5iYWNrb2ZmID0gZnVuY3Rpb24oZXJyKSB7XG4gICAgcHJlY29uZC5jaGVja1N0YXRlKHRoaXMudGltZW91dElEXyA9PT0gLTEsICdCYWNrb2ZmIGluIHByb2dyZXNzLicpO1xuXG4gICAgaWYgKHRoaXMuYmFja29mZk51bWJlcl8gPT09IHRoaXMubWF4TnVtYmVyT2ZSZXRyeV8pIHtcbiAgICAgICAgdGhpcy5lbWl0KCdmYWlsJywgZXJyKTtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYmFja29mZkRlbGF5XyA9IHRoaXMuYmFja29mZlN0cmF0ZWd5Xy5uZXh0KCk7XG4gICAgICAgIHRoaXMudGltZW91dElEXyA9IHNldFRpbWVvdXQodGhpcy5oYW5kbGVycy5iYWNrb2ZmLCB0aGlzLmJhY2tvZmZEZWxheV8pO1xuICAgICAgICB0aGlzLmVtaXQoJ2JhY2tvZmYnLCB0aGlzLmJhY2tvZmZOdW1iZXJfLCB0aGlzLmJhY2tvZmZEZWxheV8sIGVycik7XG4gICAgfVxufTtcblxuLy8gSGFuZGxlcyB0aGUgYmFja29mZiB0aW1lb3V0IGNvbXBsZXRpb24uXG5CYWNrb2ZmLnByb3RvdHlwZS5vbkJhY2tvZmZfID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50aW1lb3V0SURfID0gLTE7XG4gICAgdGhpcy5lbWl0KCdyZWFkeScsIHRoaXMuYmFja29mZk51bWJlcl8sIHRoaXMuYmFja29mZkRlbGF5Xyk7XG4gICAgdGhpcy5iYWNrb2ZmTnVtYmVyXysrO1xufTtcblxuLy8gU3RvcHMgYW55IGJhY2tvZmYgb3BlcmF0aW9uIGFuZCByZXNldHMgdGhlIGJhY2tvZmYgZGVsYXkgdG8gaXRzIGluaXRhbCB2YWx1ZS5cbkJhY2tvZmYucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5iYWNrb2ZmTnVtYmVyXyA9IDA7XG4gICAgdGhpcy5iYWNrb2ZmU3RyYXRlZ3lfLnJlc2V0KCk7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dElEXyk7XG4gICAgdGhpcy50aW1lb3V0SURfID0gLTE7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJhY2tvZmY7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/backoff/lib/backoff.js\n")},"./node_modules/backoff/lib/function_call.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("//      Copyright (c) 2012 Mathieu Turcotte\n//      Licensed under the MIT license.\n\nvar events = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\nvar precond = __webpack_require__(/*! precond */ \"./node_modules/precond/index.js\");\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\nvar Backoff = __webpack_require__(/*! ./backoff */ \"./node_modules/backoff/lib/backoff.js\");\nvar FibonacciBackoffStrategy = __webpack_require__(/*! ./strategy/fibonacci */ \"./node_modules/backoff/lib/strategy/fibonacci.js\");\n\n// Wraps a function to be called in a backoff loop.\nfunction FunctionCall(fn, args, callback) {\n    events.EventEmitter.call(this);\n\n    precond.checkIsFunction(fn, 'Expected fn to be a function.');\n    precond.checkIsArray(args, 'Expected args to be an array.');\n    precond.checkIsFunction(callback, 'Expected callback to be a function.');\n\n    this.function_ = fn;\n    this.arguments_ = args;\n    this.callback_ = callback;\n    this.lastResult_ = [];\n    this.numRetries_ = 0;\n\n    this.backoff_ = null;\n    this.strategy_ = null;\n    this.failAfter_ = -1;\n    this.retryPredicate_ = FunctionCall.DEFAULT_RETRY_PREDICATE_;\n\n    this.state_ = FunctionCall.State_.PENDING;\n}\nutil.inherits(FunctionCall, events.EventEmitter);\n\n// States in which the call can be.\nFunctionCall.State_ = {\n    // Call isn't started yet.\n    PENDING: 0,\n    // Call is in progress.\n    RUNNING: 1,\n    // Call completed successfully which means that either the wrapped function\n    // returned successfully or the maximal number of backoffs was reached.\n    COMPLETED: 2,\n    // The call was aborted.\n    ABORTED: 3\n};\n\n// The default retry predicate which considers any error as retriable.\nFunctionCall.DEFAULT_RETRY_PREDICATE_ = function(err) {\n  return true;\n};\n\n// Checks whether the call is pending.\nFunctionCall.prototype.isPending = function() {\n    return this.state_ == FunctionCall.State_.PENDING;\n};\n\n// Checks whether the call is in progress.\nFunctionCall.prototype.isRunning = function() {\n    return this.state_ == FunctionCall.State_.RUNNING;\n};\n\n// Checks whether the call is completed.\nFunctionCall.prototype.isCompleted = function() {\n    return this.state_ == FunctionCall.State_.COMPLETED;\n};\n\n// Checks whether the call is aborted.\nFunctionCall.prototype.isAborted = function() {\n    return this.state_ == FunctionCall.State_.ABORTED;\n};\n\n// Sets the backoff strategy to use. Can only be called before the call is\n// started otherwise an exception will be thrown.\nFunctionCall.prototype.setStrategy = function(strategy) {\n    precond.checkState(this.isPending(), 'FunctionCall in progress.');\n    this.strategy_ = strategy;\n    return this; // Return this for chaining.\n};\n\n// Sets the predicate which will be used to determine whether the errors\n// returned from the wrapped function should be retried or not, e.g. a\n// network error would be retriable while a type error would stop the\n// function call.\nFunctionCall.prototype.retryIf = function(retryPredicate) {\n    precond.checkState(this.isPending(), 'FunctionCall in progress.');\n    this.retryPredicate_ = retryPredicate;\n    return this;\n};\n\n// Returns all intermediary results returned by the wrapped function since\n// the initial call.\nFunctionCall.prototype.getLastResult = function() {\n    return this.lastResult_.concat();\n};\n\n// Returns the number of times the wrapped function call was retried.\nFunctionCall.prototype.getNumRetries = function() {\n    return this.numRetries_;\n};\n\n// Sets the backoff limit.\nFunctionCall.prototype.failAfter = function(maxNumberOfRetry) {\n    precond.checkState(this.isPending(), 'FunctionCall in progress.');\n    this.failAfter_ = maxNumberOfRetry;\n    return this; // Return this for chaining.\n};\n\n// Aborts the call.\nFunctionCall.prototype.abort = function() {\n    if (this.isCompleted() || this.isAborted()) {\n      return;\n    }\n\n    if (this.isRunning()) {\n        this.backoff_.reset();\n    }\n\n    this.state_ = FunctionCall.State_.ABORTED;\n    this.lastResult_ = [new Error('Backoff aborted.')];\n    this.emit('abort');\n    this.doCallback_();\n};\n\n// Initiates the call to the wrapped function. Accepts an optional factory\n// function used to create the backoff instance; used when testing.\nFunctionCall.prototype.start = function(backoffFactory) {\n    precond.checkState(!this.isAborted(), 'FunctionCall is aborted.');\n    precond.checkState(this.isPending(), 'FunctionCall already started.');\n\n    var strategy = this.strategy_ || new FibonacciBackoffStrategy();\n\n    this.backoff_ = backoffFactory ?\n        backoffFactory(strategy) :\n        new Backoff(strategy);\n\n    this.backoff_.on('ready', this.doCall_.bind(this, true /* isRetry */));\n    this.backoff_.on('fail', this.doCallback_.bind(this));\n    this.backoff_.on('backoff', this.handleBackoff_.bind(this));\n\n    if (this.failAfter_ > 0) {\n        this.backoff_.failAfter(this.failAfter_);\n    }\n\n    this.state_ = FunctionCall.State_.RUNNING;\n    this.doCall_(false /* isRetry */);\n};\n\n// Calls the wrapped function.\nFunctionCall.prototype.doCall_ = function(isRetry) {\n    if (isRetry) {\n        this.numRetries_++;\n    }\n    var eventArgs = ['call'].concat(this.arguments_);\n    events.EventEmitter.prototype.emit.apply(this, eventArgs);\n    var callback = this.handleFunctionCallback_.bind(this);\n    this.function_.apply(null, this.arguments_.concat(callback));\n};\n\n// Calls the wrapped function's callback with the last result returned by the\n// wrapped function.\nFunctionCall.prototype.doCallback_ = function() {\n    this.callback_.apply(null, this.lastResult_);\n};\n\n// Handles wrapped function's completion. This method acts as a replacement\n// for the original callback function.\nFunctionCall.prototype.handleFunctionCallback_ = function() {\n    if (this.isAborted()) {\n        return;\n    }\n\n    var args = Array.prototype.slice.call(arguments);\n    this.lastResult_ = args; // Save last callback arguments.\n    events.EventEmitter.prototype.emit.apply(this, ['callback'].concat(args));\n\n    var err = args[0];\n    if (err && this.retryPredicate_(err)) {\n        this.backoff_.backoff(err);\n    } else {\n        this.state_ = FunctionCall.State_.COMPLETED;\n        this.doCallback_();\n    }\n};\n\n// Handles the backoff event by reemitting it.\nFunctionCall.prototype.handleBackoff_ = function(number, delay, err) {\n    this.emit('backoff', number, delay, err);\n};\n\nmodule.exports = FunctionCall;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/backoff/lib/function_call.js\n")},"./node_modules/backoff/lib/strategy/exponential.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('//      Copyright (c) 2012 Mathieu Turcotte\n//      Licensed under the MIT license.\n\nvar util = __webpack_require__(/*! util */ "./node_modules/util/util.js");\nvar precond = __webpack_require__(/*! precond */ "./node_modules/precond/index.js");\n\nvar BackoffStrategy = __webpack_require__(/*! ./strategy */ "./node_modules/backoff/lib/strategy/strategy.js");\n\n// Exponential backoff strategy.\nfunction ExponentialBackoffStrategy(options) {\n    BackoffStrategy.call(this, options);\n    this.backoffDelay_ = 0;\n    this.nextBackoffDelay_ = this.getInitialDelay();\n    this.factor_ = ExponentialBackoffStrategy.DEFAULT_FACTOR;\n\n    if (options && options.factor !== undefined) {\n        precond.checkArgument(options.factor > 1,\n            \'Exponential factor should be greater than 1 but got %s.\',\n            options.factor);\n        this.factor_ = options.factor;\n    }\n}\nutil.inherits(ExponentialBackoffStrategy, BackoffStrategy);\n\n// Default multiplication factor used to compute the next backoff delay from\n// the current one. The value can be overridden by passing a custom factor as\n// part of the options.\nExponentialBackoffStrategy.DEFAULT_FACTOR = 2;\n\nExponentialBackoffStrategy.prototype.next_ = function() {\n    this.backoffDelay_ = Math.min(this.nextBackoffDelay_, this.getMaxDelay());\n    this.nextBackoffDelay_ = this.backoffDelay_ * this.factor_;\n    return this.backoffDelay_;\n};\n\nExponentialBackoffStrategy.prototype.reset_ = function() {\n    this.backoffDelay_ = 0;\n    this.nextBackoffDelay_ = this.getInitialDelay();\n};\n\nmodule.exports = ExponentialBackoffStrategy;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvYmFja29mZi9saWIvc3RyYXRlZ3kvZXhwb25lbnRpYWwuanM/ZjNkYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBLFdBQVcsbUJBQU8sQ0FBQyx5Q0FBTTtBQUN6QixjQUFjLG1CQUFPLENBQUMsZ0RBQVM7O0FBRS9CLHNCQUFzQixtQkFBTyxDQUFDLG1FQUFZOztBQUUxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2JhY2tvZmYvbGliL3N0cmF0ZWd5L2V4cG9uZW50aWFsLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gICAgICBDb3B5cmlnaHQgKGMpIDIwMTIgTWF0aGlldSBUdXJjb3R0ZVxuLy8gICAgICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xudmFyIHByZWNvbmQgPSByZXF1aXJlKCdwcmVjb25kJyk7XG5cbnZhciBCYWNrb2ZmU3RyYXRlZ3kgPSByZXF1aXJlKCcuL3N0cmF0ZWd5Jyk7XG5cbi8vIEV4cG9uZW50aWFsIGJhY2tvZmYgc3RyYXRlZ3kuXG5mdW5jdGlvbiBFeHBvbmVudGlhbEJhY2tvZmZTdHJhdGVneShvcHRpb25zKSB7XG4gICAgQmFja29mZlN0cmF0ZWd5LmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgdGhpcy5iYWNrb2ZmRGVsYXlfID0gMDtcbiAgICB0aGlzLm5leHRCYWNrb2ZmRGVsYXlfID0gdGhpcy5nZXRJbml0aWFsRGVsYXkoKTtcbiAgICB0aGlzLmZhY3Rvcl8gPSBFeHBvbmVudGlhbEJhY2tvZmZTdHJhdGVneS5ERUZBVUxUX0ZBQ1RPUjtcblxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZmFjdG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJlY29uZC5jaGVja0FyZ3VtZW50KG9wdGlvbnMuZmFjdG9yID4gMSxcbiAgICAgICAgICAgICdFeHBvbmVudGlhbCBmYWN0b3Igc2hvdWxkIGJlIGdyZWF0ZXIgdGhhbiAxIGJ1dCBnb3QgJXMuJyxcbiAgICAgICAgICAgIG9wdGlvbnMuZmFjdG9yKTtcbiAgICAgICAgdGhpcy5mYWN0b3JfID0gb3B0aW9ucy5mYWN0b3I7XG4gICAgfVxufVxudXRpbC5pbmhlcml0cyhFeHBvbmVudGlhbEJhY2tvZmZTdHJhdGVneSwgQmFja29mZlN0cmF0ZWd5KTtcblxuLy8gRGVmYXVsdCBtdWx0aXBsaWNhdGlvbiBmYWN0b3IgdXNlZCB0byBjb21wdXRlIHRoZSBuZXh0IGJhY2tvZmYgZGVsYXkgZnJvbVxuLy8gdGhlIGN1cnJlbnQgb25lLiBUaGUgdmFsdWUgY2FuIGJlIG92ZXJyaWRkZW4gYnkgcGFzc2luZyBhIGN1c3RvbSBmYWN0b3IgYXNcbi8vIHBhcnQgb2YgdGhlIG9wdGlvbnMuXG5FeHBvbmVudGlhbEJhY2tvZmZTdHJhdGVneS5ERUZBVUxUX0ZBQ1RPUiA9IDI7XG5cbkV4cG9uZW50aWFsQmFja29mZlN0cmF0ZWd5LnByb3RvdHlwZS5uZXh0XyA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuYmFja29mZkRlbGF5XyA9IE1hdGgubWluKHRoaXMubmV4dEJhY2tvZmZEZWxheV8sIHRoaXMuZ2V0TWF4RGVsYXkoKSk7XG4gICAgdGhpcy5uZXh0QmFja29mZkRlbGF5XyA9IHRoaXMuYmFja29mZkRlbGF5XyAqIHRoaXMuZmFjdG9yXztcbiAgICByZXR1cm4gdGhpcy5iYWNrb2ZmRGVsYXlfO1xufTtcblxuRXhwb25lbnRpYWxCYWNrb2ZmU3RyYXRlZ3kucHJvdG90eXBlLnJlc2V0XyA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuYmFja29mZkRlbGF5XyA9IDA7XG4gICAgdGhpcy5uZXh0QmFja29mZkRlbGF5XyA9IHRoaXMuZ2V0SW5pdGlhbERlbGF5KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4cG9uZW50aWFsQmFja29mZlN0cmF0ZWd5O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/backoff/lib/strategy/exponential.js\n')},"./node_modules/backoff/lib/strategy/fibonacci.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('//      Copyright (c) 2012 Mathieu Turcotte\n//      Licensed under the MIT license.\n\nvar util = __webpack_require__(/*! util */ "./node_modules/util/util.js");\n\nvar BackoffStrategy = __webpack_require__(/*! ./strategy */ "./node_modules/backoff/lib/strategy/strategy.js");\n\n// Fibonacci backoff strategy.\nfunction FibonacciBackoffStrategy(options) {\n    BackoffStrategy.call(this, options);\n    this.backoffDelay_ = 0;\n    this.nextBackoffDelay_ = this.getInitialDelay();\n}\nutil.inherits(FibonacciBackoffStrategy, BackoffStrategy);\n\nFibonacciBackoffStrategy.prototype.next_ = function() {\n    var backoffDelay = Math.min(this.nextBackoffDelay_, this.getMaxDelay());\n    this.nextBackoffDelay_ += this.backoffDelay_;\n    this.backoffDelay_ = backoffDelay;\n    return backoffDelay;\n};\n\nFibonacciBackoffStrategy.prototype.reset_ = function() {\n    this.nextBackoffDelay_ = this.getInitialDelay();\n    this.backoffDelay_ = 0;\n};\n\nmodule.exports = FibonacciBackoffStrategy;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvYmFja29mZi9saWIvc3RyYXRlZ3kvZmlib25hY2NpLmpzPzFjZWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQSxXQUFXLG1CQUFPLENBQUMseUNBQU07O0FBRXpCLHNCQUFzQixtQkFBTyxDQUFDLG1FQUFZOztBQUUxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFja29mZi9saWIvc3RyYXRlZ3kvZmlib25hY2NpLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gICAgICBDb3B5cmlnaHQgKGMpIDIwMTIgTWF0aGlldSBUdXJjb3R0ZVxuLy8gICAgICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5cbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG52YXIgQmFja29mZlN0cmF0ZWd5ID0gcmVxdWlyZSgnLi9zdHJhdGVneScpO1xuXG4vLyBGaWJvbmFjY2kgYmFja29mZiBzdHJhdGVneS5cbmZ1bmN0aW9uIEZpYm9uYWNjaUJhY2tvZmZTdHJhdGVneShvcHRpb25zKSB7XG4gICAgQmFja29mZlN0cmF0ZWd5LmNhbGwodGhpcywgb3B0aW9ucyk7XG4gICAgdGhpcy5iYWNrb2ZmRGVsYXlfID0gMDtcbiAgICB0aGlzLm5leHRCYWNrb2ZmRGVsYXlfID0gdGhpcy5nZXRJbml0aWFsRGVsYXkoKTtcbn1cbnV0aWwuaW5oZXJpdHMoRmlib25hY2NpQmFja29mZlN0cmF0ZWd5LCBCYWNrb2ZmU3RyYXRlZ3kpO1xuXG5GaWJvbmFjY2lCYWNrb2ZmU3RyYXRlZ3kucHJvdG90eXBlLm5leHRfID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGJhY2tvZmZEZWxheSA9IE1hdGgubWluKHRoaXMubmV4dEJhY2tvZmZEZWxheV8sIHRoaXMuZ2V0TWF4RGVsYXkoKSk7XG4gICAgdGhpcy5uZXh0QmFja29mZkRlbGF5XyArPSB0aGlzLmJhY2tvZmZEZWxheV87XG4gICAgdGhpcy5iYWNrb2ZmRGVsYXlfID0gYmFja29mZkRlbGF5O1xuICAgIHJldHVybiBiYWNrb2ZmRGVsYXk7XG59O1xuXG5GaWJvbmFjY2lCYWNrb2ZmU3RyYXRlZ3kucHJvdG90eXBlLnJlc2V0XyA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMubmV4dEJhY2tvZmZEZWxheV8gPSB0aGlzLmdldEluaXRpYWxEZWxheSgpO1xuICAgIHRoaXMuYmFja29mZkRlbGF5XyA9IDA7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZpYm9uYWNjaUJhY2tvZmZTdHJhdGVneTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/backoff/lib/strategy/fibonacci.js\n')},"./node_modules/backoff/lib/strategy/strategy.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("//      Copyright (c) 2012 Mathieu Turcotte\n//      Licensed under the MIT license.\n\nvar events = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\nfunction isDef(value) {\n    return value !== undefined && value !== null;\n}\n\n// Abstract class defining the skeleton for the backoff strategies. Accepts an\n// object holding the options for the backoff strategy:\n//\n//  * `randomisationFactor`: The randomisation factor which must be between 0\n//     and 1 where 1 equates to a randomization factor of 100% and 0 to no\n//     randomization.\n//  * `initialDelay`: The backoff initial delay in milliseconds.\n//  * `maxDelay`: The backoff maximal delay in milliseconds.\nfunction BackoffStrategy(options) {\n    options = options || {};\n\n    if (isDef(options.initialDelay) && options.initialDelay < 1) {\n        throw new Error('The initial timeout must be greater than 0.');\n    } else if (isDef(options.maxDelay) && options.maxDelay < 1) {\n        throw new Error('The maximal timeout must be greater than 0.');\n    }\n\n    this.initialDelay_ = options.initialDelay || 100;\n    this.maxDelay_ = options.maxDelay || 10000;\n\n    if (this.maxDelay_ <= this.initialDelay_) {\n        throw new Error('The maximal backoff delay must be ' +\n                        'greater than the initial backoff delay.');\n    }\n\n    if (isDef(options.randomisationFactor) &&\n        (options.randomisationFactor < 0 || options.randomisationFactor > 1)) {\n        throw new Error('The randomisation factor must be between 0 and 1.');\n    }\n\n    this.randomisationFactor_ = options.randomisationFactor || 0;\n}\n\n// Gets the maximal backoff delay.\nBackoffStrategy.prototype.getMaxDelay = function() {\n    return this.maxDelay_;\n};\n\n// Gets the initial backoff delay.\nBackoffStrategy.prototype.getInitialDelay = function() {\n    return this.initialDelay_;\n};\n\n// Template method that computes and returns the next backoff delay in\n// milliseconds.\nBackoffStrategy.prototype.next = function() {\n    var backoffDelay = this.next_();\n    var randomisationMultiple = 1 + Math.random() * this.randomisationFactor_;\n    var randomizedDelay = Math.round(backoffDelay * randomisationMultiple);\n    return randomizedDelay;\n};\n\n// Computes and returns the next backoff delay. Intended to be overridden by\n// subclasses.\nBackoffStrategy.prototype.next_ = function() {\n    throw new Error('BackoffStrategy.next_() unimplemented.');\n};\n\n// Template method that resets the backoff delay to its initial value.\nBackoffStrategy.prototype.reset = function() {\n    this.reset_();\n};\n\n// Resets the backoff delay to its initial value. Intended to be overridden by\n// subclasses.\nBackoffStrategy.prototype.reset_ = function() {\n    throw new Error('BackoffStrategy.reset_() unimplemented.');\n};\n\nmodule.exports = BackoffStrategy;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvYmFja29mZi9saWIvc3RyYXRlZ3kvc3RyYXRlZ3kuanM/OTEzOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBLGFBQWEsbUJBQU8sQ0FBQywrQ0FBUTtBQUM3QixXQUFXLG1CQUFPLENBQUMseUNBQU07O0FBRXpCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2JhY2tvZmYvbGliL3N0cmF0ZWd5L3N0cmF0ZWd5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gICAgICBDb3B5cmlnaHQgKGMpIDIwMTIgTWF0aGlldSBUdXJjb3R0ZVxuLy8gICAgICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5cbnZhciBldmVudHMgPSByZXF1aXJlKCdldmVudHMnKTtcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpO1xuXG5mdW5jdGlvbiBpc0RlZih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsO1xufVxuXG4vLyBBYnN0cmFjdCBjbGFzcyBkZWZpbmluZyB0aGUgc2tlbGV0b24gZm9yIHRoZSBiYWNrb2ZmIHN0cmF0ZWdpZXMuIEFjY2VwdHMgYW5cbi8vIG9iamVjdCBob2xkaW5nIHRoZSBvcHRpb25zIGZvciB0aGUgYmFja29mZiBzdHJhdGVneTpcbi8vXG4vLyAgKiBgcmFuZG9taXNhdGlvbkZhY3RvcmA6IFRoZSByYW5kb21pc2F0aW9uIGZhY3RvciB3aGljaCBtdXN0IGJlIGJldHdlZW4gMFxuLy8gICAgIGFuZCAxIHdoZXJlIDEgZXF1YXRlcyB0byBhIHJhbmRvbWl6YXRpb24gZmFjdG9yIG9mIDEwMCUgYW5kIDAgdG8gbm9cbi8vICAgICByYW5kb21pemF0aW9uLlxuLy8gICogYGluaXRpYWxEZWxheWA6IFRoZSBiYWNrb2ZmIGluaXRpYWwgZGVsYXkgaW4gbWlsbGlzZWNvbmRzLlxuLy8gICogYG1heERlbGF5YDogVGhlIGJhY2tvZmYgbWF4aW1hbCBkZWxheSBpbiBtaWxsaXNlY29uZHMuXG5mdW5jdGlvbiBCYWNrb2ZmU3RyYXRlZ3kob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgaWYgKGlzRGVmKG9wdGlvbnMuaW5pdGlhbERlbGF5KSAmJiBvcHRpb25zLmluaXRpYWxEZWxheSA8IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgaW5pdGlhbCB0aW1lb3V0IG11c3QgYmUgZ3JlYXRlciB0aGFuIDAuJyk7XG4gICAgfSBlbHNlIGlmIChpc0RlZihvcHRpb25zLm1heERlbGF5KSAmJiBvcHRpb25zLm1heERlbGF5IDwgMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBtYXhpbWFsIHRpbWVvdXQgbXVzdCBiZSBncmVhdGVyIHRoYW4gMC4nKTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXRpYWxEZWxheV8gPSBvcHRpb25zLmluaXRpYWxEZWxheSB8fCAxMDA7XG4gICAgdGhpcy5tYXhEZWxheV8gPSBvcHRpb25zLm1heERlbGF5IHx8IDEwMDAwO1xuXG4gICAgaWYgKHRoaXMubWF4RGVsYXlfIDw9IHRoaXMuaW5pdGlhbERlbGF5Xykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBtYXhpbWFsIGJhY2tvZmYgZGVsYXkgbXVzdCBiZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdncmVhdGVyIHRoYW4gdGhlIGluaXRpYWwgYmFja29mZiBkZWxheS4nKTtcbiAgICB9XG5cbiAgICBpZiAoaXNEZWYob3B0aW9ucy5yYW5kb21pc2F0aW9uRmFjdG9yKSAmJlxuICAgICAgICAob3B0aW9ucy5yYW5kb21pc2F0aW9uRmFjdG9yIDwgMCB8fCBvcHRpb25zLnJhbmRvbWlzYXRpb25GYWN0b3IgPiAxKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSByYW5kb21pc2F0aW9uIGZhY3RvciBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMS4nKTtcbiAgICB9XG5cbiAgICB0aGlzLnJhbmRvbWlzYXRpb25GYWN0b3JfID0gb3B0aW9ucy5yYW5kb21pc2F0aW9uRmFjdG9yIHx8IDA7XG59XG5cbi8vIEdldHMgdGhlIG1heGltYWwgYmFja29mZiBkZWxheS5cbkJhY2tvZmZTdHJhdGVneS5wcm90b3R5cGUuZ2V0TWF4RGVsYXkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tYXhEZWxheV87XG59O1xuXG4vLyBHZXRzIHRoZSBpbml0aWFsIGJhY2tvZmYgZGVsYXkuXG5CYWNrb2ZmU3RyYXRlZ3kucHJvdG90eXBlLmdldEluaXRpYWxEZWxheSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmluaXRpYWxEZWxheV87XG59O1xuXG4vLyBUZW1wbGF0ZSBtZXRob2QgdGhhdCBjb21wdXRlcyBhbmQgcmV0dXJucyB0aGUgbmV4dCBiYWNrb2ZmIGRlbGF5IGluXG4vLyBtaWxsaXNlY29uZHMuXG5CYWNrb2ZmU3RyYXRlZ3kucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYmFja29mZkRlbGF5ID0gdGhpcy5uZXh0XygpO1xuICAgIHZhciByYW5kb21pc2F0aW9uTXVsdGlwbGUgPSAxICsgTWF0aC5yYW5kb20oKSAqIHRoaXMucmFuZG9taXNhdGlvbkZhY3Rvcl87XG4gICAgdmFyIHJhbmRvbWl6ZWREZWxheSA9IE1hdGgucm91bmQoYmFja29mZkRlbGF5ICogcmFuZG9taXNhdGlvbk11bHRpcGxlKTtcbiAgICByZXR1cm4gcmFuZG9taXplZERlbGF5O1xufTtcblxuLy8gQ29tcHV0ZXMgYW5kIHJldHVybnMgdGhlIG5leHQgYmFja29mZiBkZWxheS4gSW50ZW5kZWQgdG8gYmUgb3ZlcnJpZGRlbiBieVxuLy8gc3ViY2xhc3Nlcy5cbkJhY2tvZmZTdHJhdGVneS5wcm90b3R5cGUubmV4dF8gPSBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0JhY2tvZmZTdHJhdGVneS5uZXh0XygpIHVuaW1wbGVtZW50ZWQuJyk7XG59O1xuXG4vLyBUZW1wbGF0ZSBtZXRob2QgdGhhdCByZXNldHMgdGhlIGJhY2tvZmYgZGVsYXkgdG8gaXRzIGluaXRpYWwgdmFsdWUuXG5CYWNrb2ZmU3RyYXRlZ3kucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5yZXNldF8oKTtcbn07XG5cbi8vIFJlc2V0cyB0aGUgYmFja29mZiBkZWxheSB0byBpdHMgaW5pdGlhbCB2YWx1ZS4gSW50ZW5kZWQgdG8gYmUgb3ZlcnJpZGRlbiBieVxuLy8gc3ViY2xhc3Nlcy5cbkJhY2tvZmZTdHJhdGVneS5wcm90b3R5cGUucmVzZXRfID0gZnVuY3Rpb24oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdCYWNrb2ZmU3RyYXRlZ3kucmVzZXRfKCkgdW5pbXBsZW1lbnRlZC4nKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQmFja29mZlN0cmF0ZWd5O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/backoff/lib/strategy/strategy.js\n")},"./node_modules/call-bind/callBound.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar GetIntrinsic = __webpack_require__(/*! get-intrinsic */ \"./node_modules/get-intrinsic/index.js\");\n\nvar callBind = __webpack_require__(/*! ./ */ \"./node_modules/call-bind/index.js\");\n\nvar $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));\n\nmodule.exports = function callBoundIntrinsic(name, allowMissing) {\n\tvar intrinsic = GetIntrinsic(name, !!allowMissing);\n\tif (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {\n\t\treturn callBind(intrinsic);\n\t}\n\treturn intrinsic;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvY2FsbC1iaW5kL2NhbGxCb3VuZC5qcz81NDVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLG1CQUFtQixtQkFBTyxDQUFDLDREQUFlOztBQUUxQyxlQUFlLG1CQUFPLENBQUMsNkNBQUk7O0FBRTNCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2NhbGwtYmluZC9jYWxsQm91bmQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciBjYWxsQmluZCA9IHJlcXVpcmUoJy4vJyk7XG5cbnZhciAkaW5kZXhPZiA9IGNhbGxCaW5kKEdldEludHJpbnNpYygnU3RyaW5nLnByb3RvdHlwZS5pbmRleE9mJykpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCb3VuZEludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0dmFyIGludHJpbnNpYyA9IEdldEludHJpbnNpYyhuYW1lLCAhIWFsbG93TWlzc2luZyk7XG5cdGlmICh0eXBlb2YgaW50cmluc2ljID09PSAnZnVuY3Rpb24nICYmICRpbmRleE9mKG5hbWUsICcucHJvdG90eXBlLicpID4gLTEpIHtcblx0XHRyZXR1cm4gY2FsbEJpbmQoaW50cmluc2ljKTtcblx0fVxuXHRyZXR1cm4gaW50cmluc2ljO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/call-bind/callBound.js\n")},"./node_modules/call-bind/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar bind = __webpack_require__(/*! function-bind */ \"./node_modules/function-bind/index.js\");\nvar GetIntrinsic = __webpack_require__(/*! get-intrinsic */ \"./node_modules/get-intrinsic/index.js\");\n\nvar $apply = GetIntrinsic('%Function.prototype.apply%');\nvar $call = GetIntrinsic('%Function.prototype.call%');\nvar $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);\n\nvar $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);\nvar $defineProperty = GetIntrinsic('%Object.defineProperty%', true);\nvar $max = GetIntrinsic('%Math.max%');\n\nif ($defineProperty) {\n\ttry {\n\t\t$defineProperty({}, 'a', { value: 1 });\n\t} catch (e) {\n\t\t// IE 8 has a broken defineProperty\n\t\t$defineProperty = null;\n\t}\n}\n\nmodule.exports = function callBind(originalFunction) {\n\tvar func = $reflectApply(bind, $call, arguments);\n\tif ($gOPD && $defineProperty) {\n\t\tvar desc = $gOPD(func, 'length');\n\t\tif (desc.configurable) {\n\t\t\t// original length, plus the receiver, minus any additional arguments (after the receiver)\n\t\t\t$defineProperty(\n\t\t\t\tfunc,\n\t\t\t\t'length',\n\t\t\t\t{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }\n\t\t\t);\n\t\t}\n\t}\n\treturn func;\n};\n\nvar applyBind = function applyBind() {\n\treturn $reflectApply(bind, $apply, arguments);\n};\n\nif ($defineProperty) {\n\t$defineProperty(module.exports, 'apply', { value: applyBind });\n} else {\n\tmodule.exports.apply = applyBind;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvY2FsbC1iaW5kL2luZGV4LmpzPzNlYjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsV0FBVyxtQkFBTyxDQUFDLDREQUFlO0FBQ2xDLG1CQUFtQixtQkFBTyxDQUFDLDREQUFlOztBQUUxQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUSxXQUFXO0FBQ3ZDLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyQ0FBMkMsbUJBQW1CO0FBQzlELENBQUM7QUFDRCxDQUFDLG9CQUFvQjtBQUNyQiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9jYWxsLWJpbmQvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICRhcHBseSA9IEdldEludHJpbnNpYygnJUZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSUnKTtcbnZhciAkY2FsbCA9IEdldEludHJpbnNpYygnJUZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsJScpO1xudmFyICRyZWZsZWN0QXBwbHkgPSBHZXRJbnRyaW5zaWMoJyVSZWZsZWN0LmFwcGx5JScsIHRydWUpIHx8IGJpbmQuY2FsbCgkY2FsbCwgJGFwcGx5KTtcblxudmFyICRnT1BEID0gR2V0SW50cmluc2ljKCclT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciUnLCB0cnVlKTtcbnZhciAkZGVmaW5lUHJvcGVydHkgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QuZGVmaW5lUHJvcGVydHklJywgdHJ1ZSk7XG52YXIgJG1heCA9IEdldEludHJpbnNpYygnJU1hdGgubWF4JScpO1xuXG5pZiAoJGRlZmluZVByb3BlcnR5KSB7XG5cdHRyeSB7XG5cdFx0JGRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgdmFsdWU6IDEgfSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBJRSA4IGhhcyBhIGJyb2tlbiBkZWZpbmVQcm9wZXJ0eVxuXHRcdCRkZWZpbmVQcm9wZXJ0eSA9IG51bGw7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYWxsQmluZChvcmlnaW5hbEZ1bmN0aW9uKSB7XG5cdHZhciBmdW5jID0gJHJlZmxlY3RBcHBseShiaW5kLCAkY2FsbCwgYXJndW1lbnRzKTtcblx0aWYgKCRnT1BEICYmICRkZWZpbmVQcm9wZXJ0eSkge1xuXHRcdHZhciBkZXNjID0gJGdPUEQoZnVuYywgJ2xlbmd0aCcpO1xuXHRcdGlmIChkZXNjLmNvbmZpZ3VyYWJsZSkge1xuXHRcdFx0Ly8gb3JpZ2luYWwgbGVuZ3RoLCBwbHVzIHRoZSByZWNlaXZlciwgbWludXMgYW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIChhZnRlciB0aGUgcmVjZWl2ZXIpXG5cdFx0XHQkZGVmaW5lUHJvcGVydHkoXG5cdFx0XHRcdGZ1bmMsXG5cdFx0XHRcdCdsZW5ndGgnLFxuXHRcdFx0XHR7IHZhbHVlOiAxICsgJG1heCgwLCBvcmlnaW5hbEZ1bmN0aW9uLmxlbmd0aCAtIChhcmd1bWVudHMubGVuZ3RoIC0gMSkpIH1cblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBmdW5jO1xufTtcblxudmFyIGFwcGx5QmluZCA9IGZ1bmN0aW9uIGFwcGx5QmluZCgpIHtcblx0cmV0dXJuICRyZWZsZWN0QXBwbHkoYmluZCwgJGFwcGx5LCBhcmd1bWVudHMpO1xufTtcblxuaWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuXHQkZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdhcHBseScsIHsgdmFsdWU6IGFwcGx5QmluZCB9KTtcbn0gZWxzZSB7XG5cdG1vZHVsZS5leHBvcnRzLmFwcGx5ID0gYXBwbHlCaW5kO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/call-bind/index.js\n")},"./node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar GetIntrinsic = __webpack_require__(/*! get-intrinsic */ \"./node_modules/get-intrinsic/index.js\");\n\nvar $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%');\nif ($gOPD) {\n\ttry {\n\t\t$gOPD([], 'length');\n\t} catch (e) {\n\t\t// IE 8 has a broken gOPD\n\t\t$gOPD = null;\n\t}\n}\n\nmodule.exports = $gOPD;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IuanM/MWRkMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixtQkFBbUIsbUJBQU8sQ0FBQyw0REFBZTs7QUFFMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG5cbnZhciAkZ09QRCA9IEdldEludHJpbnNpYygnJU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IlJyk7XG5pZiAoJGdPUEQpIHtcblx0dHJ5IHtcblx0XHQkZ09QRChbXSwgJ2xlbmd0aCcpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSUUgOCBoYXMgYSBicm9rZW4gZ09QRFxuXHRcdCRnT1BEID0gbnVsbDtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9ICRnT1BEO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js\n")},"./node_modules/events/events.js":module=>{"use strict";eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/events/events.js\n")},"./node_modules/foreach/index.js":module=>{eval("\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toString = Object.prototype.toString;\n\nmodule.exports = function forEach (obj, fn, ctx) {\n    if (toString.call(fn) !== '[object Function]') {\n        throw new TypeError('iterator must be a function');\n    }\n    var l = obj.length;\n    if (l === +l) {\n        for (var i = 0; i < l; i++) {\n            fn.call(ctx, obj[i], i, obj);\n        }\n    } else {\n        for (var k in obj) {\n            if (hasOwn.call(obj, k)) {\n                fn.call(ctx, obj[k], k, obj);\n            }\n        }\n    }\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvZm9yZWFjaC9pbmRleC5qcz9iZmFkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixPQUFPO0FBQzlCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZm9yZWFjaC9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxudmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZvckVhY2ggKG9iaiwgZm4sIGN0eCkge1xuICAgIGlmICh0b1N0cmluZy5jYWxsKGZuKSAhPT0gJ1tvYmplY3QgRnVuY3Rpb25dJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpdGVyYXRvciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICB9XG4gICAgdmFyIGwgPSBvYmoubGVuZ3RoO1xuICAgIGlmIChsID09PSArbCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgZm4uY2FsbChjdHgsIG9ialtpXSwgaSwgb2JqKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGsgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwob2JqLCBrKSkge1xuICAgICAgICAgICAgICAgIGZuLmNhbGwoY3R4LCBvYmpba10sIGssIG9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/foreach/index.js\n")},"./node_modules/function-bind/implementation.js":module=>{"use strict";eval("\n\n/* eslint no-invalid-this: 1 */\n\nvar ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';\nvar slice = Array.prototype.slice;\nvar toStr = Object.prototype.toString;\nvar funcType = '[object Function]';\n\nmodule.exports = function bind(that) {\n    var target = this;\n    if (typeof target !== 'function' || toStr.call(target) !== funcType) {\n        throw new TypeError(ERROR_MESSAGE + target);\n    }\n    var args = slice.call(arguments, 1);\n\n    var bound;\n    var binder = function () {\n        if (this instanceof bound) {\n            var result = target.apply(\n                this,\n                args.concat(slice.call(arguments))\n            );\n            if (Object(result) === result) {\n                return result;\n            }\n            return this;\n        } else {\n            return target.apply(\n                that,\n                args.concat(slice.call(arguments))\n            );\n        }\n    };\n\n    var boundLength = Math.max(0, target.length - args.length);\n    var boundArgs = [];\n    for (var i = 0; i < boundLength; i++) {\n        boundArgs.push('$' + i);\n    }\n\n    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);\n\n    if (target.prototype) {\n        var Empty = function Empty() {};\n        Empty.prototype = target.prototype;\n        bound.prototype = new Empty();\n        Empty.prototype = null;\n    }\n\n    return bound;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbXBsZW1lbnRhdGlvbi5qcz82ODhlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLGlCQUFpQjtBQUNwQztBQUNBOztBQUVBLDhFQUE4RSxxQ0FBcUMsRUFBRTs7QUFFckg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbXBsZW1lbnRhdGlvbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyogZXNsaW50IG5vLWludmFsaWQtdGhpczogMSAqL1xuXG52YXIgRVJST1JfTUVTU0FHRSA9ICdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBjYWxsZWQgb24gaW5jb21wYXRpYmxlICc7XG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGZ1bmNUeXBlID0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKHRoYXQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gJ2Z1bmN0aW9uJyB8fCB0b1N0ci5jYWxsKHRhcmdldCkgIT09IGZ1bmNUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRVJST1JfTUVTU0FHRSArIHRhcmdldCk7XG4gICAgfVxuICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXG4gICAgdmFyIGJvdW5kO1xuICAgIHZhciBiaW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgYm91bmQpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKE9iamVjdChyZXN1bHQpID09PSByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgIHRoYXQsXG4gICAgICAgICAgICAgICAgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgYm91bmRMZW5ndGggPSBNYXRoLm1heCgwLCB0YXJnZXQubGVuZ3RoIC0gYXJncy5sZW5ndGgpO1xuICAgIHZhciBib3VuZEFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvdW5kTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYm91bmRBcmdzLnB1c2goJyQnICsgaSk7XG4gICAgfVxuXG4gICAgYm91bmQgPSBGdW5jdGlvbignYmluZGVyJywgJ3JldHVybiBmdW5jdGlvbiAoJyArIGJvdW5kQXJncy5qb2luKCcsJykgKyAnKXsgcmV0dXJuIGJpbmRlci5hcHBseSh0aGlzLGFyZ3VtZW50cyk7IH0nKShiaW5kZXIpO1xuXG4gICAgaWYgKHRhcmdldC5wcm90b3R5cGUpIHtcbiAgICAgICAgdmFyIEVtcHR5ID0gZnVuY3Rpb24gRW1wdHkoKSB7fTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgYm91bmQucHJvdG90eXBlID0gbmV3IEVtcHR5KCk7XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJvdW5kO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/function-bind/implementation.js\n")},"./node_modules/function-bind/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar implementation = __webpack_require__(/*! ./implementation */ "./node_modules/function-bind/implementation.js");\n\nmodule.exports = Function.prototype.bind || implementation;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbmRleC5qcz8wZjdjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLHFCQUFxQixtQkFBTyxDQUFDLHdFQUFrQjs7QUFFL0MiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIHx8IGltcGxlbWVudGF0aW9uO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/function-bind/index.js\n')},"./node_modules/get-intrinsic/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar undefined;\n\nvar $SyntaxError = SyntaxError;\nvar $Function = Function;\nvar $TypeError = TypeError;\n\n// eslint-disable-next-line consistent-return\nvar getEvalledConstructor = function (expressionSyntax) {\n\ttry {\n\t\treturn $Function('\"use strict\"; return (' + expressionSyntax + ').constructor;')();\n\t} catch (e) {}\n};\n\nvar $gOPD = Object.getOwnPropertyDescriptor;\nif ($gOPD) {\n\ttry {\n\t\t$gOPD({}, '');\n\t} catch (e) {\n\t\t$gOPD = null; // this is IE 8, which has a broken gOPD\n\t}\n}\n\nvar throwTypeError = function () {\n\tthrow new $TypeError();\n};\nvar ThrowTypeError = $gOPD\n\t? (function () {\n\t\ttry {\n\t\t\t// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties\n\t\t\targuments.callee; // IE 8 does not throw here\n\t\t\treturn throwTypeError;\n\t\t} catch (calleeThrows) {\n\t\t\ttry {\n\t\t\t\t// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')\n\t\t\t\treturn $gOPD(arguments, 'callee').get;\n\t\t\t} catch (gOPDthrows) {\n\t\t\t\treturn throwTypeError;\n\t\t\t}\n\t\t}\n\t}())\n\t: throwTypeError;\n\nvar hasSymbols = __webpack_require__(/*! has-symbols */ \"./node_modules/has-symbols/index.js\")();\n\nvar getProto = Object.getPrototypeOf || function (x) { return x.__proto__; }; // eslint-disable-line no-proto\n\nvar needsEval = {};\n\nvar TypedArray = typeof Uint8Array === 'undefined' ? undefined : getProto(Uint8Array);\n\nvar INTRINSICS = {\n\t'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,\n\t'%Array%': Array,\n\t'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,\n\t'%ArrayIteratorPrototype%': hasSymbols ? getProto([][Symbol.iterator]()) : undefined,\n\t'%AsyncFromSyncIteratorPrototype%': undefined,\n\t'%AsyncFunction%': needsEval,\n\t'%AsyncGenerator%': needsEval,\n\t'%AsyncGeneratorFunction%': needsEval,\n\t'%AsyncIteratorPrototype%': needsEval,\n\t'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,\n\t'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,\n\t'%Boolean%': Boolean,\n\t'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,\n\t'%Date%': Date,\n\t'%decodeURI%': decodeURI,\n\t'%decodeURIComponent%': decodeURIComponent,\n\t'%encodeURI%': encodeURI,\n\t'%encodeURIComponent%': encodeURIComponent,\n\t'%Error%': Error,\n\t'%eval%': eval, // eslint-disable-line no-eval\n\t'%EvalError%': EvalError,\n\t'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,\n\t'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,\n\t'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,\n\t'%Function%': $Function,\n\t'%GeneratorFunction%': needsEval,\n\t'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,\n\t'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,\n\t'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,\n\t'%isFinite%': isFinite,\n\t'%isNaN%': isNaN,\n\t'%IteratorPrototype%': hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined,\n\t'%JSON%': typeof JSON === 'object' ? JSON : undefined,\n\t'%Map%': typeof Map === 'undefined' ? undefined : Map,\n\t'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols ? undefined : getProto(new Map()[Symbol.iterator]()),\n\t'%Math%': Math,\n\t'%Number%': Number,\n\t'%Object%': Object,\n\t'%parseFloat%': parseFloat,\n\t'%parseInt%': parseInt,\n\t'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,\n\t'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,\n\t'%RangeError%': RangeError,\n\t'%ReferenceError%': ReferenceError,\n\t'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,\n\t'%RegExp%': RegExp,\n\t'%Set%': typeof Set === 'undefined' ? undefined : Set,\n\t'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols ? undefined : getProto(new Set()[Symbol.iterator]()),\n\t'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,\n\t'%String%': String,\n\t'%StringIteratorPrototype%': hasSymbols ? getProto(''[Symbol.iterator]()) : undefined,\n\t'%Symbol%': hasSymbols ? Symbol : undefined,\n\t'%SyntaxError%': $SyntaxError,\n\t'%ThrowTypeError%': ThrowTypeError,\n\t'%TypedArray%': TypedArray,\n\t'%TypeError%': $TypeError,\n\t'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,\n\t'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,\n\t'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,\n\t'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,\n\t'%URIError%': URIError,\n\t'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,\n\t'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,\n\t'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet\n};\n\nvar doEval = function doEval(name) {\n\tvar value;\n\tif (name === '%AsyncFunction%') {\n\t\tvalue = getEvalledConstructor('async function () {}');\n\t} else if (name === '%GeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('function* () {}');\n\t} else if (name === '%AsyncGeneratorFunction%') {\n\t\tvalue = getEvalledConstructor('async function* () {}');\n\t} else if (name === '%AsyncGenerator%') {\n\t\tvar fn = doEval('%AsyncGeneratorFunction%');\n\t\tif (fn) {\n\t\t\tvalue = fn.prototype;\n\t\t}\n\t} else if (name === '%AsyncIteratorPrototype%') {\n\t\tvar gen = doEval('%AsyncGenerator%');\n\t\tif (gen) {\n\t\t\tvalue = getProto(gen.prototype);\n\t\t}\n\t}\n\n\tINTRINSICS[name] = value;\n\n\treturn value;\n};\n\nvar LEGACY_ALIASES = {\n\t'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],\n\t'%ArrayPrototype%': ['Array', 'prototype'],\n\t'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],\n\t'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],\n\t'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],\n\t'%ArrayProto_values%': ['Array', 'prototype', 'values'],\n\t'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],\n\t'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],\n\t'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],\n\t'%BooleanPrototype%': ['Boolean', 'prototype'],\n\t'%DataViewPrototype%': ['DataView', 'prototype'],\n\t'%DatePrototype%': ['Date', 'prototype'],\n\t'%ErrorPrototype%': ['Error', 'prototype'],\n\t'%EvalErrorPrototype%': ['EvalError', 'prototype'],\n\t'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],\n\t'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],\n\t'%FunctionPrototype%': ['Function', 'prototype'],\n\t'%Generator%': ['GeneratorFunction', 'prototype'],\n\t'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],\n\t'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],\n\t'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],\n\t'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],\n\t'%JSONParse%': ['JSON', 'parse'],\n\t'%JSONStringify%': ['JSON', 'stringify'],\n\t'%MapPrototype%': ['Map', 'prototype'],\n\t'%NumberPrototype%': ['Number', 'prototype'],\n\t'%ObjectPrototype%': ['Object', 'prototype'],\n\t'%ObjProto_toString%': ['Object', 'prototype', 'toString'],\n\t'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],\n\t'%PromisePrototype%': ['Promise', 'prototype'],\n\t'%PromiseProto_then%': ['Promise', 'prototype', 'then'],\n\t'%Promise_all%': ['Promise', 'all'],\n\t'%Promise_reject%': ['Promise', 'reject'],\n\t'%Promise_resolve%': ['Promise', 'resolve'],\n\t'%RangeErrorPrototype%': ['RangeError', 'prototype'],\n\t'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],\n\t'%RegExpPrototype%': ['RegExp', 'prototype'],\n\t'%SetPrototype%': ['Set', 'prototype'],\n\t'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],\n\t'%StringPrototype%': ['String', 'prototype'],\n\t'%SymbolPrototype%': ['Symbol', 'prototype'],\n\t'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],\n\t'%TypedArrayPrototype%': ['TypedArray', 'prototype'],\n\t'%TypeErrorPrototype%': ['TypeError', 'prototype'],\n\t'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],\n\t'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],\n\t'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],\n\t'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],\n\t'%URIErrorPrototype%': ['URIError', 'prototype'],\n\t'%WeakMapPrototype%': ['WeakMap', 'prototype'],\n\t'%WeakSetPrototype%': ['WeakSet', 'prototype']\n};\n\nvar bind = __webpack_require__(/*! function-bind */ \"./node_modules/function-bind/index.js\");\nvar hasOwn = __webpack_require__(/*! has */ \"./node_modules/has/src/index.js\");\nvar $concat = bind.call(Function.call, Array.prototype.concat);\nvar $spliceApply = bind.call(Function.apply, Array.prototype.splice);\nvar $replace = bind.call(Function.call, String.prototype.replace);\nvar $strSlice = bind.call(Function.call, String.prototype.slice);\n\n/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */\nvar rePropName = /[^%.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|%$))/g;\nvar reEscapeChar = /\\\\(\\\\)?/g; /** Used to match backslashes in property paths. */\nvar stringToPath = function stringToPath(string) {\n\tvar first = $strSlice(string, 0, 1);\n\tvar last = $strSlice(string, -1);\n\tif (first === '%' && last !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected closing `%`');\n\t} else if (last === '%' && first !== '%') {\n\t\tthrow new $SyntaxError('invalid intrinsic syntax, expected opening `%`');\n\t}\n\tvar result = [];\n\t$replace(string, rePropName, function (match, number, quote, subString) {\n\t\tresult[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;\n\t});\n\treturn result;\n};\n/* end adaptation */\n\nvar getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {\n\tvar intrinsicName = name;\n\tvar alias;\n\tif (hasOwn(LEGACY_ALIASES, intrinsicName)) {\n\t\talias = LEGACY_ALIASES[intrinsicName];\n\t\tintrinsicName = '%' + alias[0] + '%';\n\t}\n\n\tif (hasOwn(INTRINSICS, intrinsicName)) {\n\t\tvar value = INTRINSICS[intrinsicName];\n\t\tif (value === needsEval) {\n\t\t\tvalue = doEval(intrinsicName);\n\t\t}\n\t\tif (typeof value === 'undefined' && !allowMissing) {\n\t\t\tthrow new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');\n\t\t}\n\n\t\treturn {\n\t\t\talias: alias,\n\t\t\tname: intrinsicName,\n\t\t\tvalue: value\n\t\t};\n\t}\n\n\tthrow new $SyntaxError('intrinsic ' + name + ' does not exist!');\n};\n\nmodule.exports = function GetIntrinsic(name, allowMissing) {\n\tif (typeof name !== 'string' || name.length === 0) {\n\t\tthrow new $TypeError('intrinsic name must be a non-empty string');\n\t}\n\tif (arguments.length > 1 && typeof allowMissing !== 'boolean') {\n\t\tthrow new $TypeError('\"allowMissing\" argument must be a boolean');\n\t}\n\n\tvar parts = stringToPath(name);\n\tvar intrinsicBaseName = parts.length > 0 ? parts[0] : '';\n\n\tvar intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);\n\tvar intrinsicRealName = intrinsic.name;\n\tvar value = intrinsic.value;\n\tvar skipFurtherCaching = false;\n\n\tvar alias = intrinsic.alias;\n\tif (alias) {\n\t\tintrinsicBaseName = alias[0];\n\t\t$spliceApply(parts, $concat([0, 1], alias));\n\t}\n\n\tfor (var i = 1, isOwn = true; i < parts.length; i += 1) {\n\t\tvar part = parts[i];\n\t\tvar first = $strSlice(part, 0, 1);\n\t\tvar last = $strSlice(part, -1);\n\t\tif (\n\t\t\t(\n\t\t\t\t(first === '\"' || first === \"'\" || first === '`')\n\t\t\t\t|| (last === '\"' || last === \"'\" || last === '`')\n\t\t\t)\n\t\t\t&& first !== last\n\t\t) {\n\t\t\tthrow new $SyntaxError('property names with quotes must have matching quotes');\n\t\t}\n\t\tif (part === 'constructor' || !isOwn) {\n\t\t\tskipFurtherCaching = true;\n\t\t}\n\n\t\tintrinsicBaseName += '.' + part;\n\t\tintrinsicRealName = '%' + intrinsicBaseName + '%';\n\n\t\tif (hasOwn(INTRINSICS, intrinsicRealName)) {\n\t\t\tvalue = INTRINSICS[intrinsicRealName];\n\t\t} else if (value != null) {\n\t\t\tif (!(part in value)) {\n\t\t\t\tif (!allowMissing) {\n\t\t\t\t\tthrow new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');\n\t\t\t\t}\n\t\t\t\treturn void undefined;\n\t\t\t}\n\t\t\tif ($gOPD && (i + 1) >= parts.length) {\n\t\t\t\tvar desc = $gOPD(value, part);\n\t\t\t\tisOwn = !!desc;\n\n\t\t\t\t// By convention, when a data property is converted to an accessor\n\t\t\t\t// property to emulate a data property that does not suffer from\n\t\t\t\t// the override mistake, that accessor's getter is marked with\n\t\t\t\t// an `originalValue` property. Here, when we detect this, we\n\t\t\t\t// uphold the illusion by pretending to see that original data\n\t\t\t\t// property, i.e., returning the value rather than the getter\n\t\t\t\t// itself.\n\t\t\t\tif (isOwn && 'get' in desc && !('originalValue' in desc.get)) {\n\t\t\t\t\tvalue = desc.get;\n\t\t\t\t} else {\n\t\t\t\t\tvalue = value[part];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tisOwn = hasOwn(value, part);\n\t\t\t\tvalue = value[part];\n\t\t\t}\n\n\t\t\tif (isOwn && !skipFurtherCaching) {\n\t\t\t\tINTRINSICS[intrinsicRealName] = value;\n\t\t\t}\n\t\t}\n\t}\n\treturn value;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/get-intrinsic/index.js\n")},"./node_modules/has-symbols/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar origSymbol = typeof Symbol !== 'undefined' && Symbol;\nvar hasSymbolSham = __webpack_require__(/*! ./shams */ \"./node_modules/has-symbols/shams.js\");\n\nmodule.exports = function hasNativeSymbols() {\n\tif (typeof origSymbol !== 'function') { return false; }\n\tif (typeof Symbol !== 'function') { return false; }\n\tif (typeof origSymbol('foo') !== 'symbol') { return false; }\n\tif (typeof Symbol('bar') !== 'symbol') { return false; }\n\n\treturn hasSymbolSham();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvaGFzLXN5bWJvbHMvaW5kZXguanM/NTE1NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBLG9CQUFvQixtQkFBTyxDQUFDLG9EQUFTOztBQUVyQztBQUNBLHdDQUF3QyxjQUFjO0FBQ3RELG9DQUFvQyxjQUFjO0FBQ2xELDZDQUE2QyxjQUFjO0FBQzNELHlDQUF5QyxjQUFjOztBQUV2RDtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2hhcy1zeW1ib2xzL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgb3JpZ1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbDtcbnZhciBoYXNTeW1ib2xTaGFtID0gcmVxdWlyZSgnLi9zaGFtcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc05hdGl2ZVN5bWJvbHMoKSB7XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2Ygb3JpZ1N5bWJvbCgnZm9vJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCgnYmFyJykgIT09ICdzeW1ib2wnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHJldHVybiBoYXNTeW1ib2xTaGFtKCk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/has-symbols/index.js\n")},"./node_modules/has-symbols/shams.js":module=>{"use strict";eval("\n\n/* eslint complexity: [2, 18], max-statements: [2, 33] */\nmodule.exports = function hasSymbols() {\n\tif (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }\n\tif (typeof Symbol.iterator === 'symbol') { return true; }\n\n\tvar obj = {};\n\tvar sym = Symbol('test');\n\tvar symObj = Object(sym);\n\tif (typeof sym === 'string') { return false; }\n\n\tif (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }\n\tif (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }\n\n\t// temp disabled per https://github.com/ljharb/object.assign/issues/17\n\t// if (sym instanceof Symbol) { return false; }\n\t// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4\n\t// if (!(symObj instanceof Symbol)) { return false; }\n\n\t// if (typeof Symbol.prototype.toString !== 'function') { return false; }\n\t// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }\n\n\tvar symVal = 42;\n\tobj[sym] = symVal;\n\tfor (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop\n\tif (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }\n\n\tif (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }\n\n\tvar syms = Object.getOwnPropertySymbols(obj);\n\tif (syms.length !== 1 || syms[0] !== sym) { return false; }\n\n\tif (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }\n\n\tif (typeof Object.getOwnPropertyDescriptor === 'function') {\n\t\tvar descriptor = Object.getOwnPropertyDescriptor(obj, sym);\n\t\tif (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }\n\t}\n\n\treturn true;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvaGFzLXN5bWJvbHMvc2hhbXMuanM/MTY5NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0EsMEZBQTBGLGNBQWM7QUFDeEcsMkNBQTJDLGFBQWE7O0FBRXhEO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixjQUFjOztBQUU3QyxpRUFBaUUsY0FBYztBQUMvRSxvRUFBb0UsY0FBYzs7QUFFbEY7QUFDQSxnQ0FBZ0MsY0FBYztBQUM5QztBQUNBLHNDQUFzQyxjQUFjOztBQUVwRCwwREFBMEQsY0FBYztBQUN4RSw4REFBOEQsY0FBYzs7QUFFNUU7QUFDQTtBQUNBLG1CQUFtQixjQUFjLEVBQUU7QUFDbkMsMEVBQTBFLGNBQWM7O0FBRXhGLHdHQUF3RyxjQUFjOztBQUV0SDtBQUNBLDRDQUE0QyxjQUFjOztBQUUxRCw2REFBNkQsY0FBYzs7QUFFM0U7QUFDQTtBQUNBLHNFQUFzRSxjQUFjO0FBQ3BGOztBQUVBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaGFzLXN5bWJvbHMvc2hhbXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludCBjb21wbGV4aXR5OiBbMiwgMThdLCBtYXgtc3RhdGVtZW50czogWzIsIDMzXSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNTeW1ib2xzKCkge1xuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnKSB7IHJldHVybiB0cnVlOyB9XG5cblx0dmFyIG9iaiA9IHt9O1xuXHR2YXIgc3ltID0gU3ltYm9sKCd0ZXN0Jyk7XG5cdHZhciBzeW1PYmogPSBPYmplY3Qoc3ltKTtcblx0aWYgKHR5cGVvZiBzeW0gPT09ICdzdHJpbmcnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltT2JqKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9vYmplY3QuYXNzaWduL2lzc3Vlcy8xN1xuXHQvLyBpZiAoc3ltIGluc3RhbmNlb2YgU3ltYm9sKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyB0ZW1wIGRpc2FibGVkIHBlciBodHRwczovL2dpdGh1Yi5jb20vV2ViUmVmbGVjdGlvbi9nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMvaXNzdWVzLzRcblx0Ly8gaWYgKCEoc3ltT2JqIGluc3RhbmNlb2YgU3ltYm9sKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHQvLyBpZiAodHlwZW9mIFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdC8vIGlmIChTdHJpbmcoc3ltKSAhPT0gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bVZhbCA9IDQyO1xuXHRvYmpbc3ltXSA9IHN5bVZhbDtcblx0Zm9yIChzeW0gaW4gb2JqKSB7IHJldHVybiBmYWxzZTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby11bnJlYWNoYWJsZS1sb29wXG5cdGlmICh0eXBlb2YgT2JqZWN0LmtleXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyA9PT0gJ2Z1bmN0aW9uJyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCAhPT0gMCkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHR2YXIgc3ltcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqKTtcblx0aWYgKHN5bXMubGVuZ3RoICE9PSAxIHx8IHN5bXNbMF0gIT09IHN5bSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmosIHN5bSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgc3ltKTtcblx0XHRpZiAoZGVzY3JpcHRvci52YWx1ZSAhPT0gc3ltVmFsIHx8IGRlc2NyaXB0b3IuZW51bWVyYWJsZSAhPT0gdHJ1ZSkgeyByZXR1cm4gZmFsc2U7IH1cblx0fVxuXG5cdHJldHVybiB0cnVlO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/has-symbols/shams.js\n")},"./node_modules/has/src/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval('\n\nvar bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");\n\nmodule.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvaGFzL3NyYy9pbmRleC5qcz9hMGQzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLFdBQVcsbUJBQU8sQ0FBQyw0REFBZTs7QUFFbEMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaGFzL3NyYy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/has/src/index.js\n')},"./node_modules/inherits/inherits_browser.js":module=>{eval("if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcz8zZmI1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn0gZWxzZSB7XG4gIC8vIG9sZCBzY2hvb2wgc2hpbSBmb3Igb2xkIGJyb3dzZXJzXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgaWYgKHN1cGVyQ3Rvcikge1xuICAgICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgICBUZW1wQ3Rvci5wcm90b3R5cGUgPSBzdXBlckN0b3IucHJvdG90eXBlXG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgICB9XG4gIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/inherits/inherits_browser.js\n")},"./node_modules/is-arguments/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\nvar callBound = __webpack_require__(/*! call-bind/callBound */ \"./node_modules/call-bind/callBound.js\");\n\nvar $toString = callBound('Object.prototype.toString');\n\nvar isStandardArguments = function isArguments(value) {\n\tif (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {\n\t\treturn false;\n\t}\n\treturn $toString(value) === '[object Arguments]';\n};\n\nvar isLegacyArguments = function isArguments(value) {\n\tif (isStandardArguments(value)) {\n\t\treturn true;\n\t}\n\treturn value !== null &&\n\t\ttypeof value === 'object' &&\n\t\ttypeof value.length === 'number' &&\n\t\tvalue.length >= 0 &&\n\t\t$toString(value) !== '[object Array]' &&\n\t\t$toString(value.callee) === '[object Function]';\n};\n\nvar supportsStandardArguments = (function () {\n\treturn isStandardArguments(arguments);\n}());\n\nisStandardArguments.isLegacyArguments = isLegacyArguments; // for tests\n\nmodule.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvaXMtYXJndW1lbnRzL2luZGV4LmpzP2UzOWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQSxnQkFBZ0IsbUJBQU8sQ0FBQyxrRUFBcUI7O0FBRTdDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVELDBEQUEwRDs7QUFFMUQiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXMtYXJndW1lbnRzL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzVG9TdHJpbmdUYWcgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnO1xudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJ2NhbGwtYmluZC9jYWxsQm91bmQnKTtcblxudmFyICR0b1N0cmluZyA9IGNhbGxCb3VuZCgnT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZycpO1xuXG52YXIgaXNTdGFuZGFyZEFyZ3VtZW50cyA9IGZ1bmN0aW9uIGlzQXJndW1lbnRzKHZhbHVlKSB7XG5cdGlmIChoYXNUb1N0cmluZ1RhZyAmJiB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWx1ZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRyZXR1cm4gJHRvU3RyaW5nKHZhbHVlKSA9PT0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG59O1xuXG52YXIgaXNMZWdhY3lBcmd1bWVudHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuXHRpZiAoaXNTdGFuZGFyZEFyZ3VtZW50cyh2YWx1ZSkpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRyZXR1cm4gdmFsdWUgIT09IG51bGwgJiZcblx0XHR0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG5cdFx0dHlwZW9mIHZhbHVlLmxlbmd0aCA9PT0gJ251bWJlcicgJiZcblx0XHR2YWx1ZS5sZW5ndGggPj0gMCAmJlxuXHRcdCR0b1N0cmluZyh2YWx1ZSkgIT09ICdbb2JqZWN0IEFycmF5XScgJiZcblx0XHQkdG9TdHJpbmcodmFsdWUuY2FsbGVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG5cbnZhciBzdXBwb3J0c1N0YW5kYXJkQXJndW1lbnRzID0gKGZ1bmN0aW9uICgpIHtcblx0cmV0dXJuIGlzU3RhbmRhcmRBcmd1bWVudHMoYXJndW1lbnRzKTtcbn0oKSk7XG5cbmlzU3RhbmRhcmRBcmd1bWVudHMuaXNMZWdhY3lBcmd1bWVudHMgPSBpc0xlZ2FjeUFyZ3VtZW50czsgLy8gZm9yIHRlc3RzXG5cbm1vZHVsZS5leHBvcnRzID0gc3VwcG9ydHNTdGFuZGFyZEFyZ3VtZW50cyA/IGlzU3RhbmRhcmRBcmd1bWVudHMgOiBpc0xlZ2FjeUFyZ3VtZW50cztcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/is-arguments/index.js\n")},"./node_modules/is-generator-function/index.js":module=>{"use strict";eval("\n\nvar toStr = Object.prototype.toString;\nvar fnToStr = Function.prototype.toString;\nvar isFnRegex = /^\\s*(?:function)?\\*/;\nvar hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\nvar getProto = Object.getPrototypeOf;\nvar getGeneratorFunc = function () { // eslint-disable-line consistent-return\n\tif (!hasToStringTag) {\n\t\treturn false;\n\t}\n\ttry {\n\t\treturn Function('return function*() {}')();\n\t} catch (e) {\n\t}\n};\nvar generatorFunc = getGeneratorFunc();\nvar GeneratorFunction = getProto && generatorFunc ? getProto(generatorFunc) : false;\n\nmodule.exports = function isGeneratorFunction(fn) {\n\tif (typeof fn !== 'function') {\n\t\treturn false;\n\t}\n\tif (isFnRegex.test(fnToStr.call(fn))) {\n\t\treturn true;\n\t}\n\tif (!hasToStringTag) {\n\t\tvar str = toStr.call(fn);\n\t\treturn str === '[object GeneratorFunction]';\n\t}\n\treturn getProto && getProto(fn) === GeneratorFunction;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvaXMtZ2VuZXJhdG9yLWZ1bmN0aW9uL2luZGV4LmpzPzBhM2UiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QyxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXMtZ2VuZXJhdG9yLWZ1bmN0aW9uL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGZuVG9TdHIgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgaXNGblJlZ2V4ID0gL15cXHMqKD86ZnVuY3Rpb24pP1xcKi87XG52YXIgaGFzVG9TdHJpbmdUYWcgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09ICdzeW1ib2wnO1xudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIGdldEdlbmVyYXRvckZ1bmMgPSBmdW5jdGlvbiAoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY29uc2lzdGVudC1yZXR1cm5cblx0aWYgKCFoYXNUb1N0cmluZ1RhZykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHR0cnkge1xuXHRcdHJldHVybiBGdW5jdGlvbigncmV0dXJuIGZ1bmN0aW9uKigpIHt9JykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHR9XG59O1xudmFyIGdlbmVyYXRvckZ1bmMgPSBnZXRHZW5lcmF0b3JGdW5jKCk7XG52YXIgR2VuZXJhdG9yRnVuY3Rpb24gPSBnZXRQcm90byAmJiBnZW5lcmF0b3JGdW5jID8gZ2V0UHJvdG8oZ2VuZXJhdG9yRnVuYykgOiBmYWxzZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0dlbmVyYXRvckZ1bmN0aW9uKGZuKSB7XG5cdGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKGlzRm5SZWdleC50ZXN0KGZuVG9TdHIuY2FsbChmbikpKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0aWYgKCFoYXNUb1N0cmluZ1RhZykge1xuXHRcdHZhciBzdHIgPSB0b1N0ci5jYWxsKGZuKTtcblx0XHRyZXR1cm4gc3RyID09PSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nO1xuXHR9XG5cdHJldHVybiBnZXRQcm90byAmJiBnZXRQcm90byhmbikgPT09IEdlbmVyYXRvckZ1bmN0aW9uO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/is-generator-function/index.js\n")},"./node_modules/is-typed-array/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar forEach = __webpack_require__(/*! foreach */ \"./node_modules/foreach/index.js\");\nvar availableTypedArrays = __webpack_require__(/*! available-typed-arrays */ \"./node_modules/available-typed-arrays/index.js\");\nvar callBound = __webpack_require__(/*! call-bind/callBound */ \"./node_modules/call-bind/callBound.js\");\n\nvar $toString = callBound('Object.prototype.toString');\nvar hasSymbols = __webpack_require__(/*! has-symbols */ \"./node_modules/has-symbols/index.js\")();\nvar hasToStringTag = hasSymbols && typeof Symbol.toStringTag === 'symbol';\n\nvar typedArrays = availableTypedArrays();\n\nvar $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {\n\tfor (var i = 0; i < array.length; i += 1) {\n\t\tif (array[i] === value) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n};\nvar $slice = callBound('String.prototype.slice');\nvar toStrTags = {};\nvar gOPD = __webpack_require__(/*! es-abstract/helpers/getOwnPropertyDescriptor */ \"./node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js\");\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\nif (hasToStringTag && gOPD && getPrototypeOf) {\n\tforEach(typedArrays, function (typedArray) {\n\t\tvar arr = new __webpack_require__.g[typedArray]();\n\t\tif (!(Symbol.toStringTag in arr)) {\n\t\t\tthrow new EvalError('this engine has support for Symbol.toStringTag, but ' + typedArray + ' does not have the property! Please report this.');\n\t\t}\n\t\tvar proto = getPrototypeOf(arr);\n\t\tvar descriptor = gOPD(proto, Symbol.toStringTag);\n\t\tif (!descriptor) {\n\t\t\tvar superProto = getPrototypeOf(proto);\n\t\t\tdescriptor = gOPD(superProto, Symbol.toStringTag);\n\t\t}\n\t\ttoStrTags[typedArray] = descriptor.get;\n\t});\n}\n\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n\tvar anyTrue = false;\n\tforEach(toStrTags, function (getter, typedArray) {\n\t\tif (!anyTrue) {\n\t\t\ttry {\n\t\t\t\tanyTrue = getter.call(value) === typedArray;\n\t\t\t} catch (e) { /**/ }\n\t\t}\n\t});\n\treturn anyTrue;\n};\n\nmodule.exports = function isTypedArray(value) {\n\tif (!value || typeof value !== 'object') { return false; }\n\tif (!hasToStringTag) {\n\t\tvar tag = $slice($toString(value), 8, -1);\n\t\treturn $indexOf(typedArrays, tag) > -1;\n\t}\n\tif (!gOPD) { return false; }\n\treturn tryTypedArrays(value);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvaXMtdHlwZWQtYXJyYXkvaW5kZXguanM/ZjRlMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixjQUFjLG1CQUFPLENBQUMsZ0RBQVM7QUFDL0IsMkJBQTJCLG1CQUFPLENBQUMsOEVBQXdCO0FBQzNELGdCQUFnQixtQkFBTyxDQUFDLGtFQUFxQjs7QUFFN0M7QUFDQSxpQkFBaUIsbUJBQU8sQ0FBQyx3REFBYTtBQUN0Qzs7QUFFQTs7QUFFQTtBQUNBLGdCQUFnQixrQkFBa0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsbUJBQU8sQ0FBQyxvSEFBOEM7QUFDakUsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQSxnQkFBZ0IscUJBQU07QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxZQUFZO0FBQ2hCO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQSwyQ0FBMkMsY0FBYztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsY0FBYztBQUMzQjtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2lzLXR5cGVkLWFycmF5L2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJ2ZvcmVhY2gnKTtcbnZhciBhdmFpbGFibGVUeXBlZEFycmF5cyA9IHJlcXVpcmUoJ2F2YWlsYWJsZS10eXBlZC1hcnJheXMnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG5cbnZhciAkdG9TdHJpbmcgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUudG9TdHJpbmcnKTtcbnZhciBoYXNTeW1ib2xzID0gcmVxdWlyZSgnaGFzLXN5bWJvbHMnKSgpO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gaGFzU3ltYm9scyAmJiB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcblxudmFyIHR5cGVkQXJyYXlzID0gYXZhaWxhYmxlVHlwZWRBcnJheXMoKTtcblxudmFyICRpbmRleE9mID0gY2FsbEJvdW5kKCdBcnJheS5wcm90b3R5cGUuaW5kZXhPZicsIHRydWUpIHx8IGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRpZiAoYXJyYXlbaV0gPT09IHZhbHVlKSB7XG5cdFx0XHRyZXR1cm4gaTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIC0xO1xufTtcbnZhciAkc2xpY2UgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuc2xpY2UnKTtcbnZhciB0b1N0clRhZ3MgPSB7fTtcbnZhciBnT1BEID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvaGVscGVycy9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjsgLy8gcmVxdWlyZSgnZ2V0cHJvdG90eXBlb2YnKTtcbmlmIChoYXNUb1N0cmluZ1RhZyAmJiBnT1BEICYmIGdldFByb3RvdHlwZU9mKSB7XG5cdGZvckVhY2godHlwZWRBcnJheXMsIGZ1bmN0aW9uICh0eXBlZEFycmF5KSB7XG5cdFx0dmFyIGFyciA9IG5ldyBnbG9iYWxbdHlwZWRBcnJheV0oKTtcblx0XHRpZiAoIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gYXJyKSkge1xuXHRcdFx0dGhyb3cgbmV3IEV2YWxFcnJvcigndGhpcyBlbmdpbmUgaGFzIHN1cHBvcnQgZm9yIFN5bWJvbC50b1N0cmluZ1RhZywgYnV0ICcgKyB0eXBlZEFycmF5ICsgJyBkb2VzIG5vdCBoYXZlIHRoZSBwcm9wZXJ0eSEgUGxlYXNlIHJlcG9ydCB0aGlzLicpO1xuXHRcdH1cblx0XHR2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGVPZihhcnIpO1xuXHRcdHZhciBkZXNjcmlwdG9yID0gZ09QRChwcm90bywgU3ltYm9sLnRvU3RyaW5nVGFnKTtcblx0XHRpZiAoIWRlc2NyaXB0b3IpIHtcblx0XHRcdHZhciBzdXBlclByb3RvID0gZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuXHRcdFx0ZGVzY3JpcHRvciA9IGdPUEQoc3VwZXJQcm90bywgU3ltYm9sLnRvU3RyaW5nVGFnKTtcblx0XHR9XG5cdFx0dG9TdHJUYWdzW3R5cGVkQXJyYXldID0gZGVzY3JpcHRvci5nZXQ7XG5cdH0pO1xufVxuXG52YXIgdHJ5VHlwZWRBcnJheXMgPSBmdW5jdGlvbiB0cnlBbGxUeXBlZEFycmF5cyh2YWx1ZSkge1xuXHR2YXIgYW55VHJ1ZSA9IGZhbHNlO1xuXHRmb3JFYWNoKHRvU3RyVGFncywgZnVuY3Rpb24gKGdldHRlciwgdHlwZWRBcnJheSkge1xuXHRcdGlmICghYW55VHJ1ZSkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0YW55VHJ1ZSA9IGdldHRlci5jYWxsKHZhbHVlKSA9PT0gdHlwZWRBcnJheTtcblx0XHRcdH0gY2F0Y2ggKGUpIHsgLyoqLyB9XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIGFueVRydWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzVHlwZWRBcnJheSh2YWx1ZSkge1xuXHRpZiAoIXZhbHVlIHx8IHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICghaGFzVG9TdHJpbmdUYWcpIHtcblx0XHR2YXIgdGFnID0gJHNsaWNlKCR0b1N0cmluZyh2YWx1ZSksIDgsIC0xKTtcblx0XHRyZXR1cm4gJGluZGV4T2YodHlwZWRBcnJheXMsIHRhZykgPiAtMTtcblx0fVxuXHRpZiAoIWdPUEQpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdHJldHVybiB0cnlUeXBlZEFycmF5cyh2YWx1ZSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/is-typed-array/index.js\n")},"./node_modules/loglevel/lib/loglevel.js":function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    "use strict";\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === \'function\' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {}\n}(this, function () {\n    "use strict";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = "undefined";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        "trace",\n        "debug",\n        "info",\n        "warn",\n        "error"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === \'function\') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn\'t print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don\'t have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === \'debug\') {\n            methodName = \'log\';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === \'trace\' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, \'log\');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn\'t present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      var storageKey = "loglevel";\n      if (name) {\n        storageKey += ":" + name;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || \'silent\').toUpperCase();\n\n          if (typeof window === undefinedType) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + "=" + levelName + ";";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + "=");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,\n          "ERROR": 4, "SILENT": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return "No console available for logging";\n              }\n          } else {\n              throw "log.setLevel() called with invalid level: " + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel == null ? "WARN" : defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if (typeof name !== "string" || name === "") {\n          throw new TypeError("You must supply a name when creating a logger.");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    return defaultLogger;\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/loglevel/lib/loglevel.js\n')},"./node_modules/precond/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('/*\n * Copyright (c) 2012 Mathieu Turcotte\n * Licensed under the MIT license.\n */\n\nmodule.exports = __webpack_require__(/*! ./lib/checks */ "./node_modules/precond/lib/checks.js");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvcHJlY29uZC9pbmRleC5qcz9jY2MxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGdHQUF3QyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9wcmVjb25kL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxMiBNYXRoaWV1IFR1cmNvdHRlXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9jaGVja3MnKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/precond/index.js\n')},"./node_modules/precond/lib/checks.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("/*\n * Copyright (c) 2012 Mathieu Turcotte\n * Licensed under the MIT license.\n */\n\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\nvar errors = module.exports = __webpack_require__(/*! ./errors */ \"./node_modules/precond/lib/errors.js\");\n\nfunction failCheck(ExceptionConstructor, callee, messageFormat, formatArgs) {\n    messageFormat = messageFormat || '';\n    var message = util.format.apply(this, [messageFormat].concat(formatArgs));\n    var error = new ExceptionConstructor(message);\n    Error.captureStackTrace(error, callee);\n    throw error;\n}\n\nfunction failArgumentCheck(callee, message, formatArgs) {\n    failCheck(errors.IllegalArgumentError, callee, message, formatArgs);\n}\n\nfunction failStateCheck(callee, message, formatArgs) {\n    failCheck(errors.IllegalStateError, callee, message, formatArgs);\n}\n\nmodule.exports.checkArgument = function(value, message) {\n    if (!value) {\n        failArgumentCheck(arguments.callee, message,\n            Array.prototype.slice.call(arguments, 2));\n    }\n};\n\nmodule.exports.checkState = function(value, message) {\n    if (!value) {\n        failStateCheck(arguments.callee, message,\n            Array.prototype.slice.call(arguments, 2));\n    }\n};\n\nmodule.exports.checkIsDef = function(value, message) {\n    if (value !== undefined) {\n        return value;\n    }\n\n    failArgumentCheck(arguments.callee, message ||\n        'Expected value to be defined but was undefined.',\n        Array.prototype.slice.call(arguments, 2));\n};\n\nmodule.exports.checkIsDefAndNotNull = function(value, message) {\n    // Note that undefined == null.\n    if (value != null) {\n        return value;\n    }\n\n    failArgumentCheck(arguments.callee, message ||\n        'Expected value to be defined and not null but got \"' +\n        typeOf(value) + '\".', Array.prototype.slice.call(arguments, 2));\n};\n\n// Fixed version of the typeOf operator which returns 'null' for null values\n// and 'array' for arrays.\nfunction typeOf(value) {\n    var s = typeof value;\n    if (s == 'object') {\n        if (!value) {\n            return 'null';\n        } else if (value instanceof Array) {\n            return 'array';\n        }\n    }\n    return s;\n}\n\nfunction typeCheck(expect) {\n    return function(value, message) {\n        var type = typeOf(value);\n\n        if (type == expect) {\n            return value;\n        }\n\n        failArgumentCheck(arguments.callee, message ||\n            'Expected \"' + expect + '\" but got \"' + type + '\".',\n            Array.prototype.slice.call(arguments, 2));\n    };\n}\n\nmodule.exports.checkIsString = typeCheck('string');\nmodule.exports.checkIsArray = typeCheck('array');\nmodule.exports.checkIsNumber = typeCheck('number');\nmodule.exports.checkIsBoolean = typeCheck('boolean');\nmodule.exports.checkIsFunction = typeCheck('function');\nmodule.exports.checkIsObject = typeCheck('object');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvcHJlY29uZC9saWIvY2hlY2tzLmpzPzFjZGMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsV0FBVyxtQkFBTyxDQUFDLHlDQUFNOztBQUV6QixhQUFhLDRGQUFvQzs7QUFFakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw0QkFBNEI7QUFDNUIsMkJBQTJCO0FBQzNCLDRCQUE0QjtBQUM1Qiw2QkFBNkI7QUFDN0IsOEJBQThCO0FBQzlCLDRCQUE0QiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9wcmVjb25kL2xpYi9jaGVja3MuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIE1hdGhpZXUgVHVyY290dGVcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqL1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxudmFyIGVycm9ycyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9lcnJvcnMnKTtcblxuZnVuY3Rpb24gZmFpbENoZWNrKEV4Y2VwdGlvbkNvbnN0cnVjdG9yLCBjYWxsZWUsIG1lc3NhZ2VGb3JtYXQsIGZvcm1hdEFyZ3MpIHtcbiAgICBtZXNzYWdlRm9ybWF0ID0gbWVzc2FnZUZvcm1hdCB8fCAnJztcbiAgICB2YXIgbWVzc2FnZSA9IHV0aWwuZm9ybWF0LmFwcGx5KHRoaXMsIFttZXNzYWdlRm9ybWF0XS5jb25jYXQoZm9ybWF0QXJncykpO1xuICAgIHZhciBlcnJvciA9IG5ldyBFeGNlcHRpb25Db25zdHJ1Y3RvcihtZXNzYWdlKTtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShlcnJvciwgY2FsbGVlKTtcbiAgICB0aHJvdyBlcnJvcjtcbn1cblxuZnVuY3Rpb24gZmFpbEFyZ3VtZW50Q2hlY2soY2FsbGVlLCBtZXNzYWdlLCBmb3JtYXRBcmdzKSB7XG4gICAgZmFpbENoZWNrKGVycm9ycy5JbGxlZ2FsQXJndW1lbnRFcnJvciwgY2FsbGVlLCBtZXNzYWdlLCBmb3JtYXRBcmdzKTtcbn1cblxuZnVuY3Rpb24gZmFpbFN0YXRlQ2hlY2soY2FsbGVlLCBtZXNzYWdlLCBmb3JtYXRBcmdzKSB7XG4gICAgZmFpbENoZWNrKGVycm9ycy5JbGxlZ2FsU3RhdGVFcnJvciwgY2FsbGVlLCBtZXNzYWdlLCBmb3JtYXRBcmdzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMuY2hlY2tBcmd1bWVudCA9IGZ1bmN0aW9uKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICBmYWlsQXJndW1lbnRDaGVjayhhcmd1bWVudHMuY2FsbGVlLCBtZXNzYWdlLFxuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSk7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuY2hlY2tTdGF0ZSA9IGZ1bmN0aW9uKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICBmYWlsU3RhdGVDaGVjayhhcmd1bWVudHMuY2FsbGVlLCBtZXNzYWdlLFxuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSk7XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMuY2hlY2tJc0RlZiA9IGZ1bmN0aW9uKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIGZhaWxBcmd1bWVudENoZWNrKGFyZ3VtZW50cy5jYWxsZWUsIG1lc3NhZ2UgfHxcbiAgICAgICAgJ0V4cGVjdGVkIHZhbHVlIHRvIGJlIGRlZmluZWQgYnV0IHdhcyB1bmRlZmluZWQuJyxcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5jaGVja0lzRGVmQW5kTm90TnVsbCA9IGZ1bmN0aW9uKHZhbHVlLCBtZXNzYWdlKSB7XG4gICAgLy8gTm90ZSB0aGF0IHVuZGVmaW5lZCA9PSBudWxsLlxuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBmYWlsQXJndW1lbnRDaGVjayhhcmd1bWVudHMuY2FsbGVlLCBtZXNzYWdlIHx8XG4gICAgICAgICdFeHBlY3RlZCB2YWx1ZSB0byBiZSBkZWZpbmVkIGFuZCBub3QgbnVsbCBidXQgZ290IFwiJyArXG4gICAgICAgIHR5cGVPZih2YWx1ZSkgKyAnXCIuJywgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSk7XG59O1xuXG4vLyBGaXhlZCB2ZXJzaW9uIG9mIHRoZSB0eXBlT2Ygb3BlcmF0b3Igd2hpY2ggcmV0dXJucyAnbnVsbCcgZm9yIG51bGwgdmFsdWVzXG4vLyBhbmQgJ2FycmF5JyBmb3IgYXJyYXlzLlxuZnVuY3Rpb24gdHlwZU9mKHZhbHVlKSB7XG4gICAgdmFyIHMgPSB0eXBlb2YgdmFsdWU7XG4gICAgaWYgKHMgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuICdudWxsJztcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICByZXR1cm4gJ2FycmF5JztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcztcbn1cblxuZnVuY3Rpb24gdHlwZUNoZWNrKGV4cGVjdCkge1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgbWVzc2FnZSkge1xuICAgICAgICB2YXIgdHlwZSA9IHR5cGVPZih2YWx1ZSk7XG5cbiAgICAgICAgaWYgKHR5cGUgPT0gZXhwZWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBmYWlsQXJndW1lbnRDaGVjayhhcmd1bWVudHMuY2FsbGVlLCBtZXNzYWdlIHx8XG4gICAgICAgICAgICAnRXhwZWN0ZWQgXCInICsgZXhwZWN0ICsgJ1wiIGJ1dCBnb3QgXCInICsgdHlwZSArICdcIi4nLFxuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSk7XG4gICAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMuY2hlY2tJc1N0cmluZyA9IHR5cGVDaGVjaygnc3RyaW5nJyk7XG5tb2R1bGUuZXhwb3J0cy5jaGVja0lzQXJyYXkgPSB0eXBlQ2hlY2soJ2FycmF5Jyk7XG5tb2R1bGUuZXhwb3J0cy5jaGVja0lzTnVtYmVyID0gdHlwZUNoZWNrKCdudW1iZXInKTtcbm1vZHVsZS5leHBvcnRzLmNoZWNrSXNCb29sZWFuID0gdHlwZUNoZWNrKCdib29sZWFuJyk7XG5tb2R1bGUuZXhwb3J0cy5jaGVja0lzRnVuY3Rpb24gPSB0eXBlQ2hlY2soJ2Z1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cy5jaGVja0lzT2JqZWN0ID0gdHlwZUNoZWNrKCdvYmplY3QnKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/precond/lib/checks.js\n")},"./node_modules/precond/lib/errors.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("/*\n * Copyright (c) 2012 Mathieu Turcotte\n * Licensed under the MIT license.\n */\n\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\nfunction IllegalArgumentError(message) {\n    Error.call(this, message);\n    this.message = message;\n}\nutil.inherits(IllegalArgumentError, Error);\n\nIllegalArgumentError.prototype.name = 'IllegalArgumentError';\n\nfunction IllegalStateError(message) {\n    Error.call(this, message);\n    this.message = message;\n}\nutil.inherits(IllegalStateError, Error);\n\nIllegalStateError.prototype.name = 'IllegalStateError';\n\nmodule.exports.IllegalStateError = IllegalStateError;\nmodule.exports.IllegalArgumentError = IllegalArgumentError;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvcHJlY29uZC9saWIvZXJyb3JzLmpzPzc3YmUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsV0FBVyxtQkFBTyxDQUFDLHlDQUFNOztBQUV6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsZ0NBQWdDO0FBQ2hDLG1DQUFtQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9wcmVjb25kL2xpYi9lcnJvcnMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIE1hdGhpZXUgVHVyY290dGVcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiAqL1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuZnVuY3Rpb24gSWxsZWdhbEFyZ3VtZW50RXJyb3IobWVzc2FnZSkge1xuICAgIEVycm9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cbnV0aWwuaW5oZXJpdHMoSWxsZWdhbEFyZ3VtZW50RXJyb3IsIEVycm9yKTtcblxuSWxsZWdhbEFyZ3VtZW50RXJyb3IucHJvdG90eXBlLm5hbWUgPSAnSWxsZWdhbEFyZ3VtZW50RXJyb3InO1xuXG5mdW5jdGlvbiBJbGxlZ2FsU3RhdGVFcnJvcihtZXNzYWdlKSB7XG4gICAgRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlKTtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xufVxudXRpbC5pbmhlcml0cyhJbGxlZ2FsU3RhdGVFcnJvciwgRXJyb3IpO1xuXG5JbGxlZ2FsU3RhdGVFcnJvci5wcm90b3R5cGUubmFtZSA9ICdJbGxlZ2FsU3RhdGVFcnJvcic7XG5cbm1vZHVsZS5leHBvcnRzLklsbGVnYWxTdGF0ZUVycm9yID0gSWxsZWdhbFN0YXRlRXJyb3I7XG5tb2R1bGUuZXhwb3J0cy5JbGxlZ2FsQXJndW1lbnRFcnJvciA9IElsbGVnYWxBcmd1bWVudEVycm9yOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/precond/lib/errors.js\n")},"./node_modules/process/browser.js":module=>{eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n")},"./node_modules/regenerator-runtime/runtime-module.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// This method of obtaining a reference to the global object needs to be\n// kept identical to the way it is obtained in runtime.js\nvar g = (function() { return this })() || Function("return this")();\n\n// Use `getOwnPropertyNames` because not all browsers support calling\n// `hasOwnProperty` on the global `self` object in a worker. See #183.\nvar hadRuntime = g.regeneratorRuntime &&\n  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;\n\n// Save the old regeneratorRuntime in case it needs to be restored later.\nvar oldRuntime = hadRuntime && g.regeneratorRuntime;\n\n// Force reevalutation of runtime.js.\ng.regeneratorRuntime = undefined;\n\nmodule.exports = __webpack_require__(/*! ./runtime */ "./node_modules/regenerator-runtime/runtime.js");\n\nif (hadRuntime) {\n  // Restore the original runtime.\n  g.regeneratorRuntime = oldRuntime;\n} else {\n  // Remove the global property added by runtime.js.\n  try {\n    delete g.regeneratorRuntime;\n  } catch(e) {\n    g.regeneratorRuntime = undefined;\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLW1vZHVsZS5qcz9iYmRkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EscUJBQXFCLGNBQWM7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxzR0FBcUM7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS1tb2R1bGUuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8vIFRoaXMgbWV0aG9kIG9mIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdCBuZWVkcyB0byBiZVxuLy8ga2VwdCBpZGVudGljYWwgdG8gdGhlIHdheSBpdCBpcyBvYnRhaW5lZCBpbiBydW50aW1lLmpzXG52YXIgZyA9IChmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMgfSkoKSB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG5cbi8vIFVzZSBgZ2V0T3duUHJvcGVydHlOYW1lc2AgYmVjYXVzZSBub3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgY2FsbGluZ1xuLy8gYGhhc093blByb3BlcnR5YCBvbiB0aGUgZ2xvYmFsIGBzZWxmYCBvYmplY3QgaW4gYSB3b3JrZXIuIFNlZSAjMTgzLlxudmFyIGhhZFJ1bnRpbWUgPSBnLnJlZ2VuZXJhdG9yUnVudGltZSAmJlxuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhnKS5pbmRleE9mKFwicmVnZW5lcmF0b3JSdW50aW1lXCIpID49IDA7XG5cbi8vIFNhdmUgdGhlIG9sZCByZWdlbmVyYXRvclJ1bnRpbWUgaW4gY2FzZSBpdCBuZWVkcyB0byBiZSByZXN0b3JlZCBsYXRlci5cbnZhciBvbGRSdW50aW1lID0gaGFkUnVudGltZSAmJiBnLnJlZ2VuZXJhdG9yUnVudGltZTtcblxuLy8gRm9yY2UgcmVldmFsdXRhdGlvbiBvZiBydW50aW1lLmpzLlxuZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSB1bmRlZmluZWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vcnVudGltZVwiKTtcblxuaWYgKGhhZFJ1bnRpbWUpIHtcbiAgLy8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgcnVudGltZS5cbiAgZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBvbGRSdW50aW1lO1xufSBlbHNlIHtcbiAgLy8gUmVtb3ZlIHRoZSBnbG9iYWwgcHJvcGVydHkgYWRkZWQgYnkgcnVudGltZS5qcy5cbiAgdHJ5IHtcbiAgICBkZWxldGUgZy5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIH0gY2F0Y2goZSkge1xuICAgIGcucmVnZW5lcmF0b3JSdW50aW1lID0gdW5kZWZpbmVkO1xuICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/regenerator-runtime/runtime-module.js\n')},"./node_modules/regenerator-runtime/runtime.js":module=>{eval('/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  "use strict";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === "function" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || "@@iterator";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";\n  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";\n\n  var inModule = "object" === "object";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we\'re in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don\'t bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we\'re in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there\'s no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don\'t have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: "normal", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: "throw", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = "suspendedStart";\n  var GenStateSuspendedYield = "suspendedYield";\n  var GenStateExecuting = "executing";\n  var GenStateCompleted = "completed";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don\'t natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = "GeneratorFunction";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    ["next", "throw", "return"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === "function" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === "GeneratorFunction"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = "GeneratorFunction";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, "__await")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === "throw") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === "object" &&\n            hasOwn.call(value, "__await")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke("next", value, resolve, reject);\n          }, function(err) {\n            invoke("throw", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error("Generator is already running");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === "throw") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === "next") {\n          // Setting context._sent for legacy support of Babel\'s\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === "throw") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === "return") {\n          context.abrupt("return", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === "normal") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === "throw") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = "throw";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === "throw") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = "return";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === "throw") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // "return" to "throw", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = "throw";\n        context.arg = new TypeError(\n          "The iterator does not provide a \'throw\' method");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === "throw") {\n      context.method = "throw";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = "throw";\n      context.arg = new TypeError("iterator result is not an object");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was "throw" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was "next", forget context.arg since it has been\n      // "consumed" by the delegate iterator. If context.method was\n      // "return", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== "return") {\n        context.method = "next";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = "Generator";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers\' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn\'t happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return "[object Generator]";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = "normal";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: "root" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === "function") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel\'s\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = "next";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === "t" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === "throw") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = "throw";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = "next";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === "root") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle("end");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, "catchLoc");\n          var hasFinally = hasOwn.call(entry, "finallyLoc");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error("try statement without catch or finally");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, "finallyLoc") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === "break" ||\n           type === "continue") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = "next";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === "throw") {\n        throw record.arg;\n      }\n\n      if (record.type === "break" ||\n          record.type === "continue") {\n        this.next = record.arg;\n      } else if (record.type === "return") {\n        this.rval = this.arg = record.arg;\n        this.method = "return";\n        this.next = "end";\n      } else if (record.type === "normal" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    "catch": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === "throw") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error("illegal catch attempt");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === "next") {\n        // Deliberately forget the last sent value so that we don\'t\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we\'re in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function("return this")()\n);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regenerator-runtime/runtime.js\n')},"./node_modules/rtcpeerconnection-shim/rtcpeerconnection.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n\n\nvar SDPUtils = __webpack_require__(/*! sdp */ \"./node_modules/sdp/sdp.js\");\n\nfunction writeMediaSection(transceiver, caps, type, stream, dtlsRole) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n      transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n      transceiver.dtlsTransport.getLocalParameters(),\n      type === 'offer' ? 'actpass' : dtlsRole || 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    var trackId = transceiver.rtpSender._initialTrackId ||\n        transceiver.rtpSender.track.id;\n    transceiver.rtpSender._initialTrackId = trackId;\n    // spec.\n    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' +\n        trackId + '\\r\\n';\n    sdp += 'a=' + msid;\n    // for Chrome. Legacy should no longer be required.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n\n    // RTX\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n}\n\n// Edge does not like\n// 1) stun: filtered after 14393 unless ?transport=udp is present\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\n// 4) turn: occurring muliple times\nfunction filterIceServers(iceServers, edgeVersion) {\n  var hasTurn = false;\n  iceServers = JSON.parse(JSON.stringify(iceServers));\n  return iceServers.filter(function(server) {\n    if (server && (server.urls || server.url)) {\n      var urls = server.urls || server.url;\n      if (server.url && !server.urls) {\n        console.warn('RTCIceServer.url is deprecated! Use urls instead.');\n      }\n      var isString = typeof urls === 'string';\n      if (isString) {\n        urls = [urls];\n      }\n      urls = urls.filter(function(url) {\n        var validTurn = url.indexOf('turn:') === 0 &&\n            url.indexOf('transport=udp') !== -1 &&\n            url.indexOf('turn:[') === -1 &&\n            !hasTurn;\n\n        if (validTurn) {\n          hasTurn = true;\n          return true;\n        }\n        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&\n            url.indexOf('?transport=udp') === -1;\n      });\n\n      delete server.url;\n      server.urls = isString ? urls[0] : urls;\n      return !!urls.length;\n    }\n  });\n}\n\n// Determines the intersection of local and remote capabilities.\nfunction getCommonCapabilities(localCapabilities, remoteCapabilities) {\n  var commonCapabilities = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: []\n  };\n\n  var findCodecByPayloadType = function(pt, codecs) {\n    pt = parseInt(pt, 10);\n    for (var i = 0; i < codecs.length; i++) {\n      if (codecs[i].payloadType === pt ||\n          codecs[i].preferredPayloadType === pt) {\n        return codecs[i];\n      }\n    }\n  };\n\n  var rtxCapabilityMatches = function(lRtx, rRtx, lCodecs, rCodecs) {\n    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);\n    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);\n    return lCodec && rCodec &&\n        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();\n  };\n\n  localCapabilities.codecs.forEach(function(lCodec) {\n    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {\n      var rCodec = remoteCapabilities.codecs[i];\n      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&\n          lCodec.clockRate === rCodec.clockRate) {\n        if (lCodec.name.toLowerCase() === 'rtx' &&\n            lCodec.parameters && rCodec.parameters.apt) {\n          // for RTX we need to find the local rtx that has a apt\n          // which points to the same local codec as the remote one.\n          if (!rtxCapabilityMatches(lCodec, rCodec,\n              localCapabilities.codecs, remoteCapabilities.codecs)) {\n            continue;\n          }\n        }\n        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy\n        // number of channels is the highest common number of channels\n        rCodec.numChannels = Math.min(lCodec.numChannels,\n            rCodec.numChannels);\n        // push rCodec so we reply with offerer payload type\n        commonCapabilities.codecs.push(rCodec);\n\n        // determine common feedback mechanisms\n        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {\n          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {\n            if (lCodec.rtcpFeedback[j].type === fb.type &&\n                lCodec.rtcpFeedback[j].parameter === fb.parameter) {\n              return true;\n            }\n          }\n          return false;\n        });\n        // FIXME: also need to determine .parameters\n        //  see https://github.com/openpeer/ortc/issues/569\n        break;\n      }\n    }\n  });\n\n  localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {\n    for (var i = 0; i < remoteCapabilities.headerExtensions.length;\n         i++) {\n      var rHeaderExtension = remoteCapabilities.headerExtensions[i];\n      if (lHeaderExtension.uri === rHeaderExtension.uri) {\n        commonCapabilities.headerExtensions.push(rHeaderExtension);\n        break;\n      }\n    }\n  });\n\n  // FIXME: fecMechanisms\n  return commonCapabilities;\n}\n\n// is action=setLocalDescription with type allowed in signalingState\nfunction isActionAllowedInSignalingState(action, type, signalingState) {\n  return {\n    offer: {\n      setLocalDescription: ['stable', 'have-local-offer'],\n      setRemoteDescription: ['stable', 'have-remote-offer']\n    },\n    answer: {\n      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],\n      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']\n    }\n  }[type][action].indexOf(signalingState) !== -1;\n}\n\nfunction maybeAddCandidate(iceTransport, candidate) {\n  // Edge's internal representation adds some fields therefore\n  // not all fieldѕ are taken into account.\n  var alreadyAdded = iceTransport.getRemoteCandidates()\n      .find(function(remoteCandidate) {\n        return candidate.foundation === remoteCandidate.foundation &&\n            candidate.ip === remoteCandidate.ip &&\n            candidate.port === remoteCandidate.port &&\n            candidate.priority === remoteCandidate.priority &&\n            candidate.protocol === remoteCandidate.protocol &&\n            candidate.type === remoteCandidate.type;\n      });\n  if (!alreadyAdded) {\n    iceTransport.addRemoteCandidate(candidate);\n  }\n  return !alreadyAdded;\n}\n\n\nfunction makeError(name, description) {\n  var e = new Error(description);\n  e.name = name;\n  return e;\n}\n\nmodule.exports = function(window, edgeVersion) {\n  // https://w3c.github.io/mediacapture-main/#mediastream\n  // Helper function to add the track to the stream and\n  // dispatch the event ourselves.\n  function addTrackToStreamAndFireEvent(track, stream) {\n    stream.addTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack',\n        {track: track}));\n  }\n\n  function removeTrackFromStreamAndFireEvent(track, stream) {\n    stream.removeTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack',\n        {track: track}));\n  }\n\n  function fireAddTrack(pc, track, receiver, streams) {\n    var trackEvent = new Event('track');\n    trackEvent.track = track;\n    trackEvent.receiver = receiver;\n    trackEvent.transceiver = {receiver: receiver};\n    trackEvent.streams = streams;\n    window.setTimeout(function() {\n      pc._dispatchEvent('track', trackEvent);\n    });\n  }\n\n  var RTCPeerConnection = function(config) {\n    var pc = this;\n\n    var _eventTarget = document.createDocumentFragment();\n    ['addEventListener', 'removeEventListener', 'dispatchEvent']\n        .forEach(function(method) {\n          pc[method] = _eventTarget[method].bind(_eventTarget);\n        });\n\n    this.canTrickleIceCandidates = null;\n\n    this.needNegotiation = false;\n\n    this.localStreams = [];\n    this.remoteStreams = [];\n\n    this.localDescription = null;\n    this.remoteDescription = null;\n\n    this.signalingState = 'stable';\n    this.iceConnectionState = 'new';\n    this.iceGatheringState = 'new';\n\n    config = JSON.parse(JSON.stringify(config || {}));\n\n    this.usingBundle = config.bundlePolicy === 'max-bundle';\n    if (config.rtcpMuxPolicy === 'negotiate') {\n      throw(makeError('NotSupportedError',\n          'rtcpMuxPolicy \\'negotiate\\' is not supported'));\n    } else if (!config.rtcpMuxPolicy) {\n      config.rtcpMuxPolicy = 'require';\n    }\n\n    switch (config.iceTransportPolicy) {\n      case 'all':\n      case 'relay':\n        break;\n      default:\n        config.iceTransportPolicy = 'all';\n        break;\n    }\n\n    switch (config.bundlePolicy) {\n      case 'balanced':\n      case 'max-compat':\n      case 'max-bundle':\n        break;\n      default:\n        config.bundlePolicy = 'balanced';\n        break;\n    }\n\n    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);\n\n    this._iceGatherers = [];\n    if (config.iceCandidatePoolSize) {\n      for (var i = config.iceCandidatePoolSize; i > 0; i--) {\n        this._iceGatherers.push(new window.RTCIceGatherer({\n          iceServers: config.iceServers,\n          gatherPolicy: config.iceTransportPolicy\n        }));\n      }\n    } else {\n      config.iceCandidatePoolSize = 0;\n    }\n\n    this._config = config;\n\n    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...\n    // everything that is needed to describe a SDP m-line.\n    this.transceivers = [];\n\n    this._sdpSessionId = SDPUtils.generateSessionId();\n    this._sdpSessionVersion = 0;\n\n    this._dtlsRole = undefined; // role for a=setup to use in answers.\n\n    this._isClosed = false;\n  };\n\n  // set up event handlers on prototype\n  RTCPeerConnection.prototype.onicecandidate = null;\n  RTCPeerConnection.prototype.onaddstream = null;\n  RTCPeerConnection.prototype.ontrack = null;\n  RTCPeerConnection.prototype.onremovestream = null;\n  RTCPeerConnection.prototype.onsignalingstatechange = null;\n  RTCPeerConnection.prototype.oniceconnectionstatechange = null;\n  RTCPeerConnection.prototype.onicegatheringstatechange = null;\n  RTCPeerConnection.prototype.onnegotiationneeded = null;\n  RTCPeerConnection.prototype.ondatachannel = null;\n\n  RTCPeerConnection.prototype._dispatchEvent = function(name, event) {\n    if (this._isClosed) {\n      return;\n    }\n    this.dispatchEvent(event);\n    if (typeof this['on' + name] === 'function') {\n      this['on' + name](event);\n    }\n  };\n\n  RTCPeerConnection.prototype._emitGatheringStateChange = function() {\n    var event = new Event('icegatheringstatechange');\n    this._dispatchEvent('icegatheringstatechange', event);\n  };\n\n  RTCPeerConnection.prototype.getConfiguration = function() {\n    return this._config;\n  };\n\n  RTCPeerConnection.prototype.getLocalStreams = function() {\n    return this.localStreams;\n  };\n\n  RTCPeerConnection.prototype.getRemoteStreams = function() {\n    return this.remoteStreams;\n  };\n\n  // internal helper to create a transceiver object.\n  // (whih is not yet the same as the WebRTC 1.0 transceiver)\n  RTCPeerConnection.prototype._createTransceiver = function(kind) {\n    var hasBundleTransport = this.transceivers.length > 0;\n    var transceiver = {\n      track: null,\n      iceGatherer: null,\n      iceTransport: null,\n      dtlsTransport: null,\n      localCapabilities: null,\n      remoteCapabilities: null,\n      rtpSender: null,\n      rtpReceiver: null,\n      kind: kind,\n      mid: null,\n      sendEncodingParameters: null,\n      recvEncodingParameters: null,\n      stream: null,\n      associatedRemoteMediaStreams: [],\n      wantReceive: true\n    };\n    if (this.usingBundle && hasBundleTransport) {\n      transceiver.iceTransport = this.transceivers[0].iceTransport;\n      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;\n    } else {\n      var transports = this._createIceAndDtlsTransports();\n      transceiver.iceTransport = transports.iceTransport;\n      transceiver.dtlsTransport = transports.dtlsTransport;\n    }\n    this.transceivers.push(transceiver);\n    return transceiver;\n  };\n\n  RTCPeerConnection.prototype.addTrack = function(track, stream) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call addTrack on a closed peerconnection.');\n    }\n\n    var alreadyExists = this.transceivers.find(function(s) {\n      return s.track === track;\n    });\n\n    if (alreadyExists) {\n      throw makeError('InvalidAccessError', 'Track already exists.');\n    }\n\n    var transceiver;\n    for (var i = 0; i < this.transceivers.length; i++) {\n      if (!this.transceivers[i].track &&\n          this.transceivers[i].kind === track.kind) {\n        transceiver = this.transceivers[i];\n      }\n    }\n    if (!transceiver) {\n      transceiver = this._createTransceiver(track.kind);\n    }\n\n    this._maybeFireNegotiationNeeded();\n\n    if (this.localStreams.indexOf(stream) === -1) {\n      this.localStreams.push(stream);\n    }\n\n    transceiver.track = track;\n    transceiver.stream = stream;\n    transceiver.rtpSender = new window.RTCRtpSender(track,\n        transceiver.dtlsTransport);\n    return transceiver.rtpSender;\n  };\n\n  RTCPeerConnection.prototype.addStream = function(stream) {\n    var pc = this;\n    if (edgeVersion >= 15025) {\n      stream.getTracks().forEach(function(track) {\n        pc.addTrack(track, stream);\n      });\n    } else {\n      // Clone is necessary for local demos mostly, attaching directly\n      // to two different senders does not work (build 10547).\n      // Fixed in 15025 (or earlier)\n      var clonedStream = stream.clone();\n      stream.getTracks().forEach(function(track, idx) {\n        var clonedTrack = clonedStream.getTracks()[idx];\n        track.addEventListener('enabled', function(event) {\n          clonedTrack.enabled = event.enabled;\n        });\n      });\n      clonedStream.getTracks().forEach(function(track) {\n        pc.addTrack(track, clonedStream);\n      });\n    }\n  };\n\n  RTCPeerConnection.prototype.removeTrack = function(sender) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call removeTrack on a closed peerconnection.');\n    }\n\n    if (!(sender instanceof window.RTCRtpSender)) {\n      throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' +\n          'does not implement interface RTCRtpSender.');\n    }\n\n    var transceiver = this.transceivers.find(function(t) {\n      return t.rtpSender === sender;\n    });\n\n    if (!transceiver) {\n      throw makeError('InvalidAccessError',\n          'Sender was not created by this connection.');\n    }\n    var stream = transceiver.stream;\n\n    transceiver.rtpSender.stop();\n    transceiver.rtpSender = null;\n    transceiver.track = null;\n    transceiver.stream = null;\n\n    // remove the stream from the set of local streams\n    var localStreams = this.transceivers.map(function(t) {\n      return t.stream;\n    });\n    if (localStreams.indexOf(stream) === -1 &&\n        this.localStreams.indexOf(stream) > -1) {\n      this.localStreams.splice(this.localStreams.indexOf(stream), 1);\n    }\n\n    this._maybeFireNegotiationNeeded();\n  };\n\n  RTCPeerConnection.prototype.removeStream = function(stream) {\n    var pc = this;\n    stream.getTracks().forEach(function(track) {\n      var sender = pc.getSenders().find(function(s) {\n        return s.track === track;\n      });\n      if (sender) {\n        pc.removeTrack(sender);\n      }\n    });\n  };\n\n  RTCPeerConnection.prototype.getSenders = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpSender;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpSender;\n    });\n  };\n\n  RTCPeerConnection.prototype.getReceivers = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpReceiver;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpReceiver;\n    });\n  };\n\n\n  RTCPeerConnection.prototype._createIceGatherer = function(sdpMLineIndex,\n      usingBundle) {\n    var pc = this;\n    if (usingBundle && sdpMLineIndex > 0) {\n      return this.transceivers[0].iceGatherer;\n    } else if (this._iceGatherers.length) {\n      return this._iceGatherers.shift();\n    }\n    var iceGatherer = new window.RTCIceGatherer({\n      iceServers: this._config.iceServers,\n      gatherPolicy: this._config.iceTransportPolicy\n    });\n    Object.defineProperty(iceGatherer, 'state',\n        {value: 'new', writable: true}\n    );\n\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];\n    this.transceivers[sdpMLineIndex].bufferCandidates = function(event) {\n      var end = !event.candidate || Object.keys(event.candidate).length === 0;\n      // polyfill since RTCIceGatherer.state is not implemented in\n      // Edge 10547 yet.\n      iceGatherer.state = end ? 'completed' : 'gathering';\n      if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {\n        pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);\n      }\n    };\n    iceGatherer.addEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    return iceGatherer;\n  };\n\n  // start gathering from an RTCIceGatherer.\n  RTCPeerConnection.prototype._gather = function(mid, sdpMLineIndex) {\n    var pc = this;\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer.onlocalcandidate) {\n      return;\n    }\n    var bufferedCandidateEvents =\n      this.transceivers[sdpMLineIndex].bufferedCandidateEvents;\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;\n    iceGatherer.removeEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    iceGatherer.onlocalcandidate = function(evt) {\n      if (pc.usingBundle && sdpMLineIndex > 0) {\n        // if we know that we use bundle we can drop candidates with\n        // ѕdpMLineIndex > 0. If we don't do this then our state gets\n        // confused since we dispose the extra ice gatherer.\n        return;\n      }\n      var event = new Event('icecandidate');\n      event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};\n\n      var cand = evt.candidate;\n      // Edge emits an empty object for RTCIceCandidateComplete‥\n      var end = !cand || Object.keys(cand).length === 0;\n      if (end) {\n        // polyfill since RTCIceGatherer.state is not implemented in\n        // Edge 10547 yet.\n        if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {\n          iceGatherer.state = 'completed';\n        }\n      } else {\n        if (iceGatherer.state === 'new') {\n          iceGatherer.state = 'gathering';\n        }\n        // RTCIceCandidate doesn't have a component, needs to be added\n        cand.component = 1;\n        var serializedCandidate = SDPUtils.writeCandidate(cand);\n        event.candidate = Object.assign(event.candidate,\n            SDPUtils.parseCandidate(serializedCandidate));\n        event.candidate.candidate = serializedCandidate;\n      }\n\n      // update local description.\n      var sections = SDPUtils.getMediaSections(pc.localDescription.sdp);\n      if (!end) {\n        sections[event.candidate.sdpMLineIndex] +=\n            'a=' + event.candidate.candidate + '\\r\\n';\n      } else {\n        sections[event.candidate.sdpMLineIndex] +=\n            'a=end-of-candidates\\r\\n';\n      }\n      pc.localDescription.sdp =\n          SDPUtils.getDescription(pc.localDescription.sdp) +\n          sections.join('');\n      var complete = pc.transceivers.every(function(transceiver) {\n        return transceiver.iceGatherer &&\n            transceiver.iceGatherer.state === 'completed';\n      });\n\n      if (pc.iceGatheringState !== 'gathering') {\n        pc.iceGatheringState = 'gathering';\n        pc._emitGatheringStateChange();\n      }\n\n      // Emit candidate. Also emit null candidate when all gatherers are\n      // complete.\n      if (!end) {\n        pc._dispatchEvent('icecandidate', event);\n      }\n      if (complete) {\n        pc._dispatchEvent('icecandidate', new Event('icecandidate'));\n        pc.iceGatheringState = 'complete';\n        pc._emitGatheringStateChange();\n      }\n    };\n\n    // emit already gathered candidates.\n    window.setTimeout(function() {\n      bufferedCandidateEvents.forEach(function(e) {\n        iceGatherer.onlocalcandidate(e);\n      });\n    }, 0);\n  };\n\n  // Create ICE transport and DTLS transport.\n  RTCPeerConnection.prototype._createIceAndDtlsTransports = function() {\n    var pc = this;\n    var iceTransport = new window.RTCIceTransport(null);\n    iceTransport.onicestatechange = function() {\n      pc._updateConnectionState();\n    };\n\n    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);\n    dtlsTransport.ondtlsstatechange = function() {\n      pc._updateConnectionState();\n    };\n    dtlsTransport.onerror = function() {\n      // onerror does not set state to failed by itself.\n      Object.defineProperty(dtlsTransport, 'state',\n          {value: 'failed', writable: true});\n      pc._updateConnectionState();\n    };\n\n    return {\n      iceTransport: iceTransport,\n      dtlsTransport: dtlsTransport\n    };\n  };\n\n  // Destroy ICE gatherer, ICE transport and DTLS transport.\n  // Without triggering the callbacks.\n  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function(\n      sdpMLineIndex) {\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer) {\n      delete iceGatherer.onlocalcandidate;\n      delete this.transceivers[sdpMLineIndex].iceGatherer;\n    }\n    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;\n    if (iceTransport) {\n      delete iceTransport.onicestatechange;\n      delete this.transceivers[sdpMLineIndex].iceTransport;\n    }\n    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;\n    if (dtlsTransport) {\n      delete dtlsTransport.ondtlsstatechange;\n      delete dtlsTransport.onerror;\n      delete this.transceivers[sdpMLineIndex].dtlsTransport;\n    }\n  };\n\n  // Start the RTP Sender and Receiver for a transceiver.\n  RTCPeerConnection.prototype._transceive = function(transceiver,\n      send, recv) {\n    var params = getCommonCapabilities(transceiver.localCapabilities,\n        transceiver.remoteCapabilities);\n    if (send && transceiver.rtpSender) {\n      params.encodings = transceiver.sendEncodingParameters;\n      params.rtcp = {\n        cname: SDPUtils.localCName,\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.recvEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpSender.send(params);\n    }\n    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {\n      // remove RTX field in Edge 14942\n      if (transceiver.kind === 'video'\n          && transceiver.recvEncodingParameters\n          && edgeVersion < 15019) {\n        transceiver.recvEncodingParameters.forEach(function(p) {\n          delete p.rtx;\n        });\n      }\n      if (transceiver.recvEncodingParameters.length) {\n        params.encodings = transceiver.recvEncodingParameters;\n      } else {\n        params.encodings = [{}];\n      }\n      params.rtcp = {\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.rtcpParameters.cname) {\n        params.rtcp.cname = transceiver.rtcpParameters.cname;\n      }\n      if (transceiver.sendEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpReceiver.receive(params);\n    }\n  };\n\n  RTCPeerConnection.prototype.setLocalDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setLocalDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set local ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var sections;\n    var sessionpart;\n    if (description.type === 'offer') {\n      // VERY limited support for SDP munging. Limited to:\n      // * changing the order of codecs\n      sections = SDPUtils.splitSections(description.sdp);\n      sessionpart = sections.shift();\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var caps = SDPUtils.parseRtpParameters(mediaSection);\n        pc.transceivers[sdpMLineIndex].localCapabilities = caps;\n      });\n\n      pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n        pc._gather(transceiver.mid, sdpMLineIndex);\n      });\n    } else if (description.type === 'answer') {\n      sections = SDPUtils.splitSections(pc.remoteDescription.sdp);\n      sessionpart = sections.shift();\n      var isIceLite = SDPUtils.matchPrefix(sessionpart,\n          'a=ice-lite').length > 0;\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        var iceGatherer = transceiver.iceGatherer;\n        var iceTransport = transceiver.iceTransport;\n        var dtlsTransport = transceiver.dtlsTransport;\n        var localCapabilities = transceiver.localCapabilities;\n        var remoteCapabilities = transceiver.remoteCapabilities;\n\n        // treat bundle-only as not-rejected.\n        var rejected = SDPUtils.isRejected(mediaSection) &&\n            SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n\n        if (!rejected && !transceiver.isDatachannel) {\n          var remoteIceParameters = SDPUtils.getIceParameters(\n              mediaSection, sessionpart);\n          var remoteDtlsParameters = SDPUtils.getDtlsParameters(\n              mediaSection, sessionpart);\n          if (isIceLite) {\n            remoteDtlsParameters.role = 'server';\n          }\n\n          if (!pc.usingBundle || sdpMLineIndex === 0) {\n            pc._gather(transceiver.mid, sdpMLineIndex);\n            if (iceTransport.state === 'new') {\n              iceTransport.start(iceGatherer, remoteIceParameters,\n                  isIceLite ? 'controlling' : 'controlled');\n            }\n            if (dtlsTransport.state === 'new') {\n              dtlsTransport.start(remoteDtlsParameters);\n            }\n          }\n\n          // Calculate intersection of capabilities.\n          var params = getCommonCapabilities(localCapabilities,\n              remoteCapabilities);\n\n          // Start the RTCRtpSender. The RTCRtpReceiver for this\n          // transceiver has already been started in setRemoteDescription.\n          pc._transceive(transceiver,\n              params.codecs.length > 0,\n              false);\n        }\n      });\n    }\n\n    pc.localDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-local-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.setRemoteDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setRemoteDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set remote ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var streams = {};\n    pc.remoteStreams.forEach(function(stream) {\n      streams[stream.id] = stream;\n    });\n    var receiverList = [];\n    var sections = SDPUtils.splitSections(description.sdp);\n    var sessionpart = sections.shift();\n    var isIceLite = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-lite').length > 0;\n    var usingBundle = SDPUtils.matchPrefix(sessionpart,\n        'a=group:BUNDLE ').length > 0;\n    pc.usingBundle = usingBundle;\n    var iceOptions = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-options:')[0];\n    if (iceOptions) {\n      pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ')\n          .indexOf('trickle') >= 0;\n    } else {\n      pc.canTrickleIceCandidates = false;\n    }\n\n    sections.forEach(function(mediaSection, sdpMLineIndex) {\n      var lines = SDPUtils.splitLines(mediaSection);\n      var kind = SDPUtils.getKind(mediaSection);\n      // treat bundle-only as not-rejected.\n      var rejected = SDPUtils.isRejected(mediaSection) &&\n          SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n      var protocol = lines[0].substr(2).split(' ')[2];\n\n      var direction = SDPUtils.getDirection(mediaSection, sessionpart);\n      var remoteMsid = SDPUtils.parseMsid(mediaSection);\n\n      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();\n\n      // Reject datachannels which are not implemented yet.\n      if (kind === 'application' && protocol === 'DTLS/SCTP') {\n        pc.transceivers[sdpMLineIndex] = {\n          mid: mid,\n          isDatachannel: true\n        };\n        return;\n      }\n\n      var transceiver;\n      var iceGatherer;\n      var iceTransport;\n      var dtlsTransport;\n      var rtpReceiver;\n      var sendEncodingParameters;\n      var recvEncodingParameters;\n      var localCapabilities;\n\n      var track;\n      // FIXME: ensure the mediaSection has rtcp-mux set.\n      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);\n      var remoteIceParameters;\n      var remoteDtlsParameters;\n      if (!rejected) {\n        remoteIceParameters = SDPUtils.getIceParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters.role = 'client';\n      }\n      recvEncodingParameters =\n          SDPUtils.parseRtpEncodingParameters(mediaSection);\n\n      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);\n\n      var isComplete = SDPUtils.matchPrefix(mediaSection,\n          'a=end-of-candidates', sessionpart).length > 0;\n      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')\n          .map(function(cand) {\n            return SDPUtils.parseCandidate(cand);\n          })\n          .filter(function(cand) {\n            return cand.component === 1;\n          });\n\n      // Check if we can use BUNDLE and dispose transports.\n      if ((description.type === 'offer' || description.type === 'answer') &&\n          !rejected && usingBundle && sdpMLineIndex > 0 &&\n          pc.transceivers[sdpMLineIndex]) {\n        pc._disposeIceAndDtlsTransports(sdpMLineIndex);\n        pc.transceivers[sdpMLineIndex].iceGatherer =\n            pc.transceivers[0].iceGatherer;\n        pc.transceivers[sdpMLineIndex].iceTransport =\n            pc.transceivers[0].iceTransport;\n        pc.transceivers[sdpMLineIndex].dtlsTransport =\n            pc.transceivers[0].dtlsTransport;\n        if (pc.transceivers[sdpMLineIndex].rtpSender) {\n          pc.transceivers[sdpMLineIndex].rtpSender.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n        if (pc.transceivers[sdpMLineIndex].rtpReceiver) {\n          pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n      }\n      if (description.type === 'offer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex] ||\n            pc._createTransceiver(kind);\n        transceiver.mid = mid;\n\n        if (!transceiver.iceGatherer) {\n          transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n              usingBundle);\n        }\n\n        if (cands.length && transceiver.iceTransport.state === 'new') {\n          if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {\n            transceiver.iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);\n\n        // filter RTX until additional stuff needed for RTX is implemented\n        // in adapter.js\n        if (edgeVersion < 15019) {\n          localCapabilities.codecs = localCapabilities.codecs.filter(\n              function(codec) {\n                return codec.name !== 'rtx';\n              });\n        }\n\n        sendEncodingParameters = transceiver.sendEncodingParameters || [{\n          ssrc: (2 * sdpMLineIndex + 2) * 1001\n        }];\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        var isNewTrack = false;\n        if (direction === 'sendrecv' || direction === 'sendonly') {\n          isNewTrack = !transceiver.rtpReceiver;\n          rtpReceiver = transceiver.rtpReceiver ||\n              new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);\n\n          if (isNewTrack) {\n            var stream;\n            track = rtpReceiver.track;\n            // FIXME: does not work with Plan B.\n            if (remoteMsid && remoteMsid.stream === '-') {\n              // no-op. a stream id of '-' means: no associated stream.\n            } else if (remoteMsid) {\n              if (!streams[remoteMsid.stream]) {\n                streams[remoteMsid.stream] = new window.MediaStream();\n                Object.defineProperty(streams[remoteMsid.stream], 'id', {\n                  get: function() {\n                    return remoteMsid.stream;\n                  }\n                });\n              }\n              Object.defineProperty(track, 'id', {\n                get: function() {\n                  return remoteMsid.track;\n                }\n              });\n              stream = streams[remoteMsid.stream];\n            } else {\n              if (!streams.default) {\n                streams.default = new window.MediaStream();\n              }\n              stream = streams.default;\n            }\n            if (stream) {\n              addTrackToStreamAndFireEvent(track, stream);\n              transceiver.associatedRemoteMediaStreams.push(stream);\n            }\n            receiverList.push([track, rtpReceiver, stream]);\n          }\n        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {\n          transceiver.associatedRemoteMediaStreams.forEach(function(s) {\n            var nativeTrack = s.getTracks().find(function(t) {\n              return t.id === transceiver.rtpReceiver.track.id;\n            });\n            if (nativeTrack) {\n              removeTrackFromStreamAndFireEvent(nativeTrack, s);\n            }\n          });\n          transceiver.associatedRemoteMediaStreams = [];\n        }\n\n        transceiver.localCapabilities = localCapabilities;\n        transceiver.remoteCapabilities = remoteCapabilities;\n        transceiver.rtpReceiver = rtpReceiver;\n        transceiver.rtcpParameters = rtcpParameters;\n        transceiver.sendEncodingParameters = sendEncodingParameters;\n        transceiver.recvEncodingParameters = recvEncodingParameters;\n\n        // Start the RTCRtpReceiver now. The RTPSender is started in\n        // setLocalDescription.\n        pc._transceive(pc.transceivers[sdpMLineIndex],\n            false,\n            isNewTrack);\n      } else if (description.type === 'answer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex];\n        iceGatherer = transceiver.iceGatherer;\n        iceTransport = transceiver.iceTransport;\n        dtlsTransport = transceiver.dtlsTransport;\n        rtpReceiver = transceiver.rtpReceiver;\n        sendEncodingParameters = transceiver.sendEncodingParameters;\n        localCapabilities = transceiver.localCapabilities;\n\n        pc.transceivers[sdpMLineIndex].recvEncodingParameters =\n            recvEncodingParameters;\n        pc.transceivers[sdpMLineIndex].remoteCapabilities =\n            remoteCapabilities;\n        pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;\n\n        if (cands.length && iceTransport.state === 'new') {\n          if ((isIceLite || isComplete) &&\n              (!usingBundle || sdpMLineIndex === 0)) {\n            iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        if (!usingBundle || sdpMLineIndex === 0) {\n          if (iceTransport.state === 'new') {\n            iceTransport.start(iceGatherer, remoteIceParameters,\n                'controlling');\n          }\n          if (dtlsTransport.state === 'new') {\n            dtlsTransport.start(remoteDtlsParameters);\n          }\n        }\n\n        pc._transceive(transceiver,\n            direction === 'sendrecv' || direction === 'recvonly',\n            direction === 'sendrecv' || direction === 'sendonly');\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        if (rtpReceiver &&\n            (direction === 'sendrecv' || direction === 'sendonly')) {\n          track = rtpReceiver.track;\n          if (remoteMsid) {\n            if (!streams[remoteMsid.stream]) {\n              streams[remoteMsid.stream] = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);\n            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);\n          } else {\n            if (!streams.default) {\n              streams.default = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams.default);\n            receiverList.push([track, rtpReceiver, streams.default]);\n          }\n        } else {\n          // FIXME: actually the receiver should be created later.\n          delete transceiver.rtpReceiver;\n        }\n      }\n    });\n\n    if (pc._dtlsRole === undefined) {\n      pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';\n    }\n\n    pc.remoteDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-remote-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n    Object.keys(streams).forEach(function(sid) {\n      var stream = streams[sid];\n      if (stream.getTracks().length) {\n        if (pc.remoteStreams.indexOf(stream) === -1) {\n          pc.remoteStreams.push(stream);\n          var event = new Event('addstream');\n          event.stream = stream;\n          window.setTimeout(function() {\n            pc._dispatchEvent('addstream', event);\n          });\n        }\n\n        receiverList.forEach(function(item) {\n          var track = item[0];\n          var receiver = item[1];\n          if (stream.id !== item[2].id) {\n            return;\n          }\n          fireAddTrack(pc, track, receiver, [stream]);\n        });\n      }\n    });\n    receiverList.forEach(function(item) {\n      if (item[2]) {\n        return;\n      }\n      fireAddTrack(pc, item[0], item[1], []);\n    });\n\n    // check whether addIceCandidate({}) was called within four seconds after\n    // setRemoteDescription.\n    window.setTimeout(function() {\n      if (!(pc && pc.transceivers)) {\n        return;\n      }\n      pc.transceivers.forEach(function(transceiver) {\n        if (transceiver.iceTransport &&\n            transceiver.iceTransport.state === 'new' &&\n            transceiver.iceTransport.getRemoteCandidates().length > 0) {\n          console.warn('Timeout for addRemoteCandidate. Consider sending ' +\n              'an end-of-candidates notification');\n          transceiver.iceTransport.addRemoteCandidate({});\n        }\n      });\n    }, 4000);\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.close = function() {\n    this.transceivers.forEach(function(transceiver) {\n      /* not yet\n      if (transceiver.iceGatherer) {\n        transceiver.iceGatherer.close();\n      }\n      */\n      if (transceiver.iceTransport) {\n        transceiver.iceTransport.stop();\n      }\n      if (transceiver.dtlsTransport) {\n        transceiver.dtlsTransport.stop();\n      }\n      if (transceiver.rtpSender) {\n        transceiver.rtpSender.stop();\n      }\n      if (transceiver.rtpReceiver) {\n        transceiver.rtpReceiver.stop();\n      }\n    });\n    // FIXME: clean up tracks, local streams, remote streams, etc\n    this._isClosed = true;\n    this._updateSignalingState('closed');\n  };\n\n  // Update the signaling state.\n  RTCPeerConnection.prototype._updateSignalingState = function(newState) {\n    this.signalingState = newState;\n    var event = new Event('signalingstatechange');\n    this._dispatchEvent('signalingstatechange', event);\n  };\n\n  // Determine whether to fire the negotiationneeded event.\n  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function() {\n    var pc = this;\n    if (this.signalingState !== 'stable' || this.needNegotiation === true) {\n      return;\n    }\n    this.needNegotiation = true;\n    window.setTimeout(function() {\n      if (pc.needNegotiation) {\n        pc.needNegotiation = false;\n        var event = new Event('negotiationneeded');\n        pc._dispatchEvent('negotiationneeded', event);\n      }\n    }, 0);\n  };\n\n  // Update the connection state.\n  RTCPeerConnection.prototype._updateConnectionState = function() {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      connecting: 0,\n      checking: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function(transceiver) {\n      states[transceiver.iceTransport.state]++;\n      states[transceiver.dtlsTransport.state]++;\n    });\n    // ICETransport.completed and connected are the same for this purpose.\n    states.connected += states.completed;\n\n    newState = 'new';\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.connecting > 0 || states.checking > 0) {\n      newState = 'connecting';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0 || states.completed > 0) {\n      newState = 'connected';\n    }\n\n    if (newState !== this.iceConnectionState) {\n      this.iceConnectionState = newState;\n      var event = new Event('iceconnectionstatechange');\n      this._dispatchEvent('iceconnectionstatechange', event);\n    }\n  };\n\n  RTCPeerConnection.prototype.createOffer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createOffer after close'));\n    }\n\n    var numAudioTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'audio';\n    }).length;\n    var numVideoTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'video';\n    }).length;\n\n    // Determine number of audio and video tracks we need to send/recv.\n    var offerOptions = arguments[0];\n    if (offerOptions) {\n      // Reject Chrome legacy constraints.\n      if (offerOptions.mandatory || offerOptions.optional) {\n        throw new TypeError(\n            'Legacy mandatory/optional constraints not supported.');\n      }\n      if (offerOptions.offerToReceiveAudio !== undefined) {\n        if (offerOptions.offerToReceiveAudio === true) {\n          numAudioTracks = 1;\n        } else if (offerOptions.offerToReceiveAudio === false) {\n          numAudioTracks = 0;\n        } else {\n          numAudioTracks = offerOptions.offerToReceiveAudio;\n        }\n      }\n      if (offerOptions.offerToReceiveVideo !== undefined) {\n        if (offerOptions.offerToReceiveVideo === true) {\n          numVideoTracks = 1;\n        } else if (offerOptions.offerToReceiveVideo === false) {\n          numVideoTracks = 0;\n        } else {\n          numVideoTracks = offerOptions.offerToReceiveVideo;\n        }\n      }\n    }\n\n    pc.transceivers.forEach(function(transceiver) {\n      if (transceiver.kind === 'audio') {\n        numAudioTracks--;\n        if (numAudioTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      } else if (transceiver.kind === 'video') {\n        numVideoTracks--;\n        if (numVideoTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      }\n    });\n\n    // Create M-lines for recvonly streams.\n    while (numAudioTracks > 0 || numVideoTracks > 0) {\n      if (numAudioTracks > 0) {\n        pc._createTransceiver('audio');\n        numAudioTracks--;\n      }\n      if (numVideoTracks > 0) {\n        pc._createTransceiver('video');\n        numVideoTracks--;\n      }\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      // For each track, create an ice gatherer, ice transport,\n      // dtls transport, potentially rtpsender and rtpreceiver.\n      var track = transceiver.track;\n      var kind = transceiver.kind;\n      var mid = transceiver.mid || SDPUtils.generateIdentifier();\n      transceiver.mid = mid;\n\n      if (!transceiver.iceGatherer) {\n        transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n            pc.usingBundle);\n      }\n\n      var localCapabilities = window.RTCRtpSender.getCapabilities(kind);\n      // filter RTX until additional stuff needed for RTX is implemented\n      // in adapter.js\n      if (edgeVersion < 15019) {\n        localCapabilities.codecs = localCapabilities.codecs.filter(\n            function(codec) {\n              return codec.name !== 'rtx';\n            });\n      }\n      localCapabilities.codecs.forEach(function(codec) {\n        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552\n        // by adding level-asymmetry-allowed=1\n        if (codec.name === 'H264' &&\n            codec.parameters['level-asymmetry-allowed'] === undefined) {\n          codec.parameters['level-asymmetry-allowed'] = '1';\n        }\n\n        // for subsequent offers, we might have to re-use the payload\n        // type of the last offer.\n        if (transceiver.remoteCapabilities &&\n            transceiver.remoteCapabilities.codecs) {\n          transceiver.remoteCapabilities.codecs.forEach(function(remoteCodec) {\n            if (codec.name.toLowerCase() === remoteCodec.name.toLowerCase() &&\n                codec.clockRate === remoteCodec.clockRate) {\n              codec.preferredPayloadType = remoteCodec.payloadType;\n            }\n          });\n        }\n      });\n      localCapabilities.headerExtensions.forEach(function(hdrExt) {\n        var remoteExtensions = transceiver.remoteCapabilities &&\n            transceiver.remoteCapabilities.headerExtensions || [];\n        remoteExtensions.forEach(function(rHdrExt) {\n          if (hdrExt.uri === rHdrExt.uri) {\n            hdrExt.id = rHdrExt.id;\n          }\n        });\n      });\n\n      // generate an ssrc now, to be used later in rtpSender.send\n      var sendEncodingParameters = transceiver.sendEncodingParameters || [{\n        ssrc: (2 * sdpMLineIndex + 1) * 1001\n      }];\n      if (track) {\n        // add RTX\n        if (edgeVersion >= 15019 && kind === 'video' &&\n            !sendEncodingParameters[0].rtx) {\n          sendEncodingParameters[0].rtx = {\n            ssrc: sendEncodingParameters[0].ssrc + 1\n          };\n        }\n      }\n\n      if (transceiver.wantReceive) {\n        transceiver.rtpReceiver = new window.RTCRtpReceiver(\n            transceiver.dtlsTransport, kind);\n      }\n\n      transceiver.localCapabilities = localCapabilities;\n      transceiver.sendEncodingParameters = sendEncodingParameters;\n    });\n\n    // always offer BUNDLE and dispose on return if not supported.\n    if (pc._config.bundlePolicy !== 'max-compat') {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    sdp += 'a=ice-options:trickle\\r\\n';\n\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      sdp += writeMediaSection(transceiver, transceiver.localCapabilities,\n          'offer', transceiver.stream, pc._dtlsRole);\n      sdp += 'a=rtcp-rsize\\r\\n';\n\n      if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' &&\n          (sdpMLineIndex === 0 || !pc.usingBundle)) {\n        transceiver.iceGatherer.getLocalCandidates().forEach(function(cand) {\n          cand.component = 1;\n          sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\\r\\n';\n        });\n\n        if (transceiver.iceGatherer.state === 'completed') {\n          sdp += 'a=end-of-candidates\\r\\n';\n        }\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'offer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.createAnswer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createAnswer after close'));\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    if (pc.usingBundle) {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    var mediaSectionsInOffer = SDPUtils.getMediaSections(\n        pc.remoteDescription.sdp).length;\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      if (sdpMLineIndex + 1 > mediaSectionsInOffer) {\n        return;\n      }\n      if (transceiver.isDatachannel) {\n        sdp += 'm=application 0 DTLS/SCTP 5000\\r\\n' +\n            'c=IN IP4 0.0.0.0\\r\\n' +\n            'a=mid:' + transceiver.mid + '\\r\\n';\n        return;\n      }\n\n      // FIXME: look at direction.\n      if (transceiver.stream) {\n        var localTrack;\n        if (transceiver.kind === 'audio') {\n          localTrack = transceiver.stream.getAudioTracks()[0];\n        } else if (transceiver.kind === 'video') {\n          localTrack = transceiver.stream.getVideoTracks()[0];\n        }\n        if (localTrack) {\n          // add RTX\n          if (edgeVersion >= 15019 && transceiver.kind === 'video' &&\n              !transceiver.sendEncodingParameters[0].rtx) {\n            transceiver.sendEncodingParameters[0].rtx = {\n              ssrc: transceiver.sendEncodingParameters[0].ssrc + 1\n            };\n          }\n        }\n      }\n\n      // Calculate intersection of capabilities.\n      var commonCapabilities = getCommonCapabilities(\n          transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n\n      var hasRtx = commonCapabilities.codecs.filter(function(c) {\n        return c.name.toLowerCase() === 'rtx';\n      }).length;\n      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n        delete transceiver.sendEncodingParameters[0].rtx;\n      }\n\n      sdp += writeMediaSection(transceiver, commonCapabilities,\n          'answer', transceiver.stream, pc._dtlsRole);\n      if (transceiver.rtcpParameters &&\n          transceiver.rtcpParameters.reducedSize) {\n        sdp += 'a=rtcp-rsize\\r\\n';\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'answer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.addIceCandidate = function(candidate) {\n    var pc = this;\n    var sections;\n    if (candidate && !(candidate.sdpMLineIndex !== undefined ||\n        candidate.sdpMid)) {\n      return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));\n    }\n\n    // TODO: needs to go into ops queue.\n    return new Promise(function(resolve, reject) {\n      if (!pc.remoteDescription) {\n        return reject(makeError('InvalidStateError',\n            'Can not add ICE candidate without a remote description'));\n      } else if (!candidate || candidate.candidate === '') {\n        for (var j = 0; j < pc.transceivers.length; j++) {\n          if (pc.transceivers[j].isDatachannel) {\n            continue;\n          }\n          pc.transceivers[j].iceTransport.addRemoteCandidate({});\n          sections = SDPUtils.getMediaSections(pc.remoteDescription.sdp);\n          sections[j] += 'a=end-of-candidates\\r\\n';\n          pc.remoteDescription.sdp =\n              SDPUtils.getDescription(pc.remoteDescription.sdp) +\n              sections.join('');\n          if (pc.usingBundle) {\n            break;\n          }\n        }\n      } else {\n        var sdpMLineIndex = candidate.sdpMLineIndex;\n        if (candidate.sdpMid) {\n          for (var i = 0; i < pc.transceivers.length; i++) {\n            if (pc.transceivers[i].mid === candidate.sdpMid) {\n              sdpMLineIndex = i;\n              break;\n            }\n          }\n        }\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        if (transceiver) {\n          if (transceiver.isDatachannel) {\n            return resolve();\n          }\n          var cand = Object.keys(candidate.candidate).length > 0 ?\n              SDPUtils.parseCandidate(candidate.candidate) : {};\n          // Ignore Chrome's invalid candidates since Edge does not like them.\n          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {\n            return resolve();\n          }\n          // Ignore RTCP candidates, we assume RTCP-MUX.\n          if (cand.component && cand.component !== 1) {\n            return resolve();\n          }\n          // when using bundle, avoid adding candidates to the wrong\n          // ice transport. And avoid adding candidates added in the SDP.\n          if (sdpMLineIndex === 0 || (sdpMLineIndex > 0 &&\n              transceiver.iceTransport !== pc.transceivers[0].iceTransport)) {\n            if (!maybeAddCandidate(transceiver.iceTransport, cand)) {\n              return reject(makeError('OperationError',\n                  'Can not add ICE candidate'));\n            }\n          }\n\n          // update the remoteDescription.\n          var candidateString = candidate.candidate.trim();\n          if (candidateString.indexOf('a=') === 0) {\n            candidateString = candidateString.substr(2);\n          }\n          sections = SDPUtils.getMediaSections(pc.remoteDescription.sdp);\n          sections[sdpMLineIndex] += 'a=' +\n              (cand.type ? candidateString : 'end-of-candidates')\n              + '\\r\\n';\n          pc.remoteDescription.sdp = sections.join('');\n        } else {\n          return reject(makeError('OperationError',\n              'Can not add ICE candidate'));\n        }\n      }\n      resolve();\n    });\n  };\n\n  RTCPeerConnection.prototype.getStats = function() {\n    var promises = [];\n    this.transceivers.forEach(function(transceiver) {\n      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',\n          'dtlsTransport'].forEach(function(method) {\n            if (transceiver[method]) {\n              promises.push(transceiver[method].getStats());\n            }\n          });\n    });\n    var fixStatsType = function(stat) {\n      return {\n        inboundrtp: 'inbound-rtp',\n        outboundrtp: 'outbound-rtp',\n        candidatepair: 'candidate-pair',\n        localcandidate: 'local-candidate',\n        remotecandidate: 'remote-candidate'\n      }[stat.type] || stat.type;\n    };\n    return new Promise(function(resolve) {\n      // shim getStats with maplike support\n      var results = new Map();\n      Promise.all(promises).then(function(res) {\n        res.forEach(function(result) {\n          Object.keys(result).forEach(function(id) {\n            result[id].type = fixStatsType(result[id]);\n            results.set(id, result[id]);\n          });\n        });\n        resolve(results);\n      });\n    });\n  };\n\n  // legacy callback shims. Should be moved to adapter.js some days.\n  var methods = ['createOffer', 'createAnswer'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[0] === 'function' ||\n          typeof args[1] === 'function') { // legacy\n        return nativeMethod.apply(this, [arguments[2]])\n        .then(function(description) {\n          if (typeof args[0] === 'function') {\n            args[0].apply(null, [description]);\n          }\n        }, function(error) {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function' ||\n          typeof args[2] === 'function') { // legacy\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        }, function(error) {\n          if (typeof args[2] === 'function') {\n            args[2].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  // getStats is special. It doesn't have a spec legacy method yet we support\n  // getStats(something, cb) without error callbacks.\n  ['getStats'].forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function') {\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  return RTCPeerConnection;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/rtcpeerconnection-shim/rtcpeerconnection.js\n")},"./node_modules/sdp/sdp.js":module=>{"use strict";eval("/* eslint-env node */\n\n\n// SDP helpers.\nvar SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(function(line) {\n    return line.trim();\n  });\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  var parts = blob.split('\\nm=');\n  return parts.map(function(part, index) {\n    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\n  });\n};\n\n// returns the session description.\nSDPUtils.getDescription = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(function(line) {\n    return line.indexOf(prefix) === 0;\n  });\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  var parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  var candidate = {\n    foundation: parts[0],\n    component: parseInt(parts[1], 10),\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    address: parts[4], // address is an alias for ip.\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7]\n  };\n\n  for (var i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compability.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag\n        candidate[parts[i]] = parts[i + 1];\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  var sdp = [];\n  sdp.push(candidate.foundation);\n  sdp.push(candidate.component);\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.address || candidate.ip);\n  sdp.push(candidate.port);\n\n  var type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress);\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort);\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.usernameFragment || candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.usernameFragment || candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n};\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  var parts = line.substr(9).split(' ');\n  var parsed = {\n    payloadType: parseInt(parts.shift(), 10) // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  parsed.channels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  // legacy alias, got renamed back to channels in ORTC.\n  parsed.numChannels = parsed.channels;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  var channels = codec.channels || codec.numChannels || 1;\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (channels !== 1 ? '/' + channels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1]\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n        ? '/' + headerExtension.direction\n        : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  var parsed = {};\n  var kv;\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (var j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  var line = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    var params = [];\n    Object.keys(codec.parameters).forEach(function(param) {\n      if (codec.parameters[param]) {\n        params.push(param + '=' + codec.parameters[param]);\n      } else {\n        params.push(param);\n      }\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  var parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' ')\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  var lines = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(function(fb) {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  var sp = line.indexOf(' ');\n  var parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10)\n  };\n  var colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\nSDPUtils.parseSsrcGroup = function(line) {\n  var parts = line.substr(13).split(' ');\n  return {\n    semantics: parts.shift(),\n    ssrcs: parts.map(function(ssrc) {\n      return parseInt(ssrc, 10);\n    })\n  };\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n};\n\nSDPUtils.parseFingerprint = function(line) {\n  var parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1]\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint)\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  var sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(function(fp) {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n\n// Parses a=crypto lines into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#dictionary-rtcsrtpsdesparameters-members\nSDPUtils.parseCryptoLine = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    tag: parseInt(parts[0], 10),\n    cryptoSuite: parts[1],\n    keyParams: parts[2],\n    sessionParams: parts.slice(3),\n  };\n};\n\nSDPUtils.writeCryptoLine = function(parameters) {\n  return 'a=crypto:' + parameters.tag + ' ' +\n    parameters.cryptoSuite + ' ' +\n    (typeof parameters.keyParams === 'object'\n      ? SDPUtils.writeCryptoKeyParams(parameters.keyParams)\n      : parameters.keyParams) +\n    (parameters.sessionParams ? ' ' + parameters.sessionParams.join(' ') : '') +\n    '\\r\\n';\n};\n\n// Parses the crypto key parameters into\n//   https://rawgit.com/aboba/edgertc/master/msortc-rs4.html#rtcsrtpkeyparam*\nSDPUtils.parseCryptoKeyParams = function(keyParams) {\n  if (keyParams.indexOf('inline:') !== 0) {\n    return null;\n  }\n  var parts = keyParams.substr(7).split('|');\n  return {\n    keyMethod: 'inline',\n    keySalt: parts[0],\n    lifeTime: parts[1],\n    mkiValue: parts[2] ? parts[2].split(':')[0] : undefined,\n    mkiLength: parts[2] ? parts[2].split(':')[1] : undefined,\n  };\n};\n\nSDPUtils.writeCryptoKeyParams = function(keyParams) {\n  return keyParams.keyMethod + ':'\n    + keyParams.keySalt +\n    (keyParams.lifeTime ? '|' + keyParams.lifeTime : '') +\n    (keyParams.mkiValue && keyParams.mkiLength\n      ? '|' + keyParams.mkiValue + ':' + keyParams.mkiLength\n      : '');\n};\n\n// Extracts all SDES paramters.\nSDPUtils.getCryptoParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=crypto:');\n  return lines.map(SDPUtils.parseCryptoLine);\n};\n\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  var ufrag = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-ufrag:')[0];\n  var pwd = SDPUtils.matchPrefix(mediaSection + sessionpart,\n    'a=ice-pwd:')[0];\n  if (!(ufrag && pwd)) {\n    return null;\n  }\n  return {\n    usernameFragment: ufrag.substr(12),\n    password: pwd.substr(10),\n  };\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  var description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: []\n  };\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    var pt = mline[i];\n    var rtpmapline = SDPUtils.matchPrefix(\n      mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      var codec = SDPUtils.parseRtpMap(rtpmapline);\n      var fmtps = SDPUtils.matchPrefix(\n        mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  var sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(function(codec) {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(function(codec) {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  var maxptime = 0;\n  caps.codecs.forEach(function(codec) {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n  sdp += 'a=rtcp-mux\\r\\n';\n\n  if (caps.headerExtensions) {\n    caps.headerExtensions.forEach(function(extension) {\n      sdp += SDPUtils.writeExtmap(extension);\n    });\n  }\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  var encodingParameters = [];\n  var description = SDPUtils.parseRtpParameters(mediaSection);\n  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(parts) {\n      return parts.attribute === 'cname';\n    });\n  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  var secondarySsrc;\n\n  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n    .map(function(line) {\n      var parts = line.substr(17).split(' ');\n      return parts.map(function(part) {\n        return parseInt(part, 10);\n      });\n    });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(function(codec) {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      var encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10)\n      };\n      if (primarySsrc && secondarySsrc) {\n        encParam.rtx = {ssrc: secondarySsrc};\n      }\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: primarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(function(params) {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  var rtcpParameters = {};\n\n  // Gets the first SSRC. Note tha with RTX there might be multiple\n  // SSRCs.\n  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(obj) {\n      return obj.attribute === 'cname';\n    })[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  var parts;\n  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n    .map(function(line) {\n      return SDPUtils.parseSsrcMedia(line);\n    })\n    .filter(function(msidParts) {\n      return msidParts.attribute === 'msid';\n    });\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// SCTP\n// parses draft-ietf-mmusic-sctp-sdp-26 first and falls back\n// to draft-ietf-mmusic-sctp-sdp-05\nSDPUtils.parseSctpDescription = function(mediaSection) {\n  var mline = SDPUtils.parseMLine(mediaSection);\n  var maxSizeLine = SDPUtils.matchPrefix(mediaSection, 'a=max-message-size:');\n  var maxMessageSize;\n  if (maxSizeLine.length > 0) {\n    maxMessageSize = parseInt(maxSizeLine[0].substr(19), 10);\n  }\n  if (isNaN(maxMessageSize)) {\n    maxMessageSize = 65536;\n  }\n  var sctpPort = SDPUtils.matchPrefix(mediaSection, 'a=sctp-port:');\n  if (sctpPort.length > 0) {\n    return {\n      port: parseInt(sctpPort[0].substr(12), 10),\n      protocol: mline.fmt,\n      maxMessageSize: maxMessageSize\n    };\n  }\n  var sctpMapLines = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:');\n  if (sctpMapLines.length > 0) {\n    var parts = SDPUtils.matchPrefix(mediaSection, 'a=sctpmap:')[0]\n      .substr(10)\n      .split(' ');\n    return {\n      port: parseInt(parts[0], 10),\n      protocol: parts[1],\n      maxMessageSize: maxMessageSize\n    };\n  }\n};\n\n// SCTP\n// outputs the draft-ietf-mmusic-sctp-sdp-26 version that all browsers\n// support by now receiving in this format, unless we originally parsed\n// as the draft-ietf-mmusic-sctp-sdp-05 format (indicated by the m-line\n// protocol of DTLS/SCTP -- without UDP/ or TCP/)\nSDPUtils.writeSctpDescription = function(media, sctp) {\n  var output = [];\n  if (media.protocol !== 'DTLS/SCTP') {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.protocol + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctp-port:' + sctp.port + '\\r\\n'\n    ];\n  } else {\n    output = [\n      'm=' + media.kind + ' 9 ' + media.protocol + ' ' + sctp.port + '\\r\\n',\n      'c=IN IP4 0.0.0.0\\r\\n',\n      'a=sctpmap:' + sctp.port + ' ' + sctp.protocol + ' 65535\\r\\n'\n    ];\n  }\n  if (sctp.maxMessageSize !== undefined) {\n    output.push('a=max-message-size:' + sctp.maxMessageSize + '\\r\\n');\n  }\n  return output.join('');\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boilder plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\n// sessUser is optional and defaults to 'thisisadapterortc'\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer, sessUser) {\n  var sessionId;\n  var version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  var user = sessUser || 'thisisadapterortc';\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=' + user + ' ' + sessionId + ' ' + version +\n        ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\nSDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n    transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n    transceiver.dtlsTransport.getLocalParameters(),\n    type === 'offer' ? 'actpass' : 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.direction) {\n    sdp += 'a=' + transceiver.direction + '\\r\\n';\n  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    // spec.\n    var msid = 'msid:' + stream.id + ' ' +\n        transceiver.rtpSender.track.id + '\\r\\n';\n    sdp += 'a=' + msid;\n\n    // for Chrome.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  var lines = SDPUtils.splitLines(mediaSection);\n  for (var i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' ')\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  var parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5]\n  };\n};\n\n// a very naive interpretation of a valid SDP.\nSDPUtils.isValidSDP = function(blob) {\n  if (typeof blob !== 'string' || blob.length === 0) {\n    return false;\n  }\n  var lines = SDPUtils.splitLines(blob);\n  for (var i = 0; i < lines.length; i++) {\n    if (lines[i].length < 2 || lines[i].charAt(1) !== '=') {\n      return false;\n    }\n    // TODO: check the modifier a bit more.\n  }\n  return true;\n};\n\n// Expose public methods.\nif (true) {\n  module.exports = SDPUtils;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/sdp/sdp.js\n")},"./node_modules/twilio-client/browser/ws.js":module=>{"use strict";eval("\nmodule.exports = WebSocket;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLWNsaWVudC9icm93c2VyL3dzLmpzPzAzODAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90d2lsaW8tY2xpZW50L2Jyb3dzZXIvd3MuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IFdlYlNvY2tldDtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/browser/ws.js\n")},"./node_modules/twilio-client/browser/xmlhttprequest.js":module=>{"use strict";eval("\nmodule.exports = { XMLHttpRequest: XMLHttpRequest };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLWNsaWVudC9icm93c2VyL3htbGh0dHByZXF1ZXN0LmpzPzM5OWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixrQkFBa0IiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdHdpbGlvLWNsaWVudC9icm93c2VyL3htbGh0dHByZXF1ZXN0LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSB7IFhNTEh0dHBSZXF1ZXN0OiBYTUxIdHRwUmVxdWVzdCB9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/browser/xmlhttprequest.js\n")},"./node_modules/twilio-client/es5/twilio.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\n/**\n * @packageDocumentation\n * @internalapi\n */\nvar events_1 = __webpack_require__(/*! events */ "./node_modules/events/events.js");\nvar connection_1 = __webpack_require__(/*! ./twilio/connection */ "./node_modules/twilio-client/es5/twilio/connection.js");\nexports.Connection = connection_1.default;\nvar device_1 = __webpack_require__(/*! ./twilio/device */ "./node_modules/twilio-client/es5/twilio/device.js");\nexports.Device = device_1.default;\nvar preflight_1 = __webpack_require__(/*! ./twilio/preflight/preflight */ "./node_modules/twilio-client/es5/twilio/preflight/preflight.js");\nexports.PreflightTest = preflight_1.PreflightTest;\nvar PStream = __webpack_require__(/*! ./twilio/pstream */ "./node_modules/twilio-client/es5/twilio/pstream.js");\nexports.PStream = PStream;\nvar instance;\nObject.defineProperty(device_1.default, \'instance\', {\n    get: function () { return instance; },\n    set: function (_instance) {\n        if (_instance === null) {\n            instance = null;\n        }\n    },\n});\ndevice_1.default.destroy = function destroySingleton() {\n    if (instance) {\n        instance.destroy();\n    }\n    bindSingleton();\n};\n/**\n * Create a new Device instance and bind its functions to the Device static. This maintains\n * backwards compatibility for the Device singleton behavior and will be removed in the next\n * breaking release.\n */\nfunction bindSingleton() {\n    instance = new device_1.default();\n    Object.getOwnPropertyNames(device_1.default.prototype)\n        .concat(Object.getOwnPropertyNames(events_1.EventEmitter.prototype))\n        .filter(function (prop) {\n        return typeof device_1.default.prototype[prop] === \'function\';\n    })\n        .filter(function (prop) { return prop !== \'destroy\'; })\n        .forEach(function (prop) {\n        device_1.default[prop] = device_1.default.prototype[prop].bind(instance);\n    });\n}\nbindSingleton();\nObject.getOwnPropertyNames(instance)\n    .filter(function (prop) { return typeof device_1.default.prototype[prop] !== \'function\'; })\n    .forEach(function (prop) {\n    Object.defineProperty(device_1.default, prop, {\n        get: function () {\n            if (instance) {\n                return instance[prop];\n            }\n        },\n        set: function (_prop) {\n            if (instance) {\n                instance[prop] = _prop;\n            }\n        },\n    });\n});\n//# sourceMappingURL=twilio.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLWNsaWVudC9lczUvdHdpbGlvLmpzP2U3MzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsQ0FBQyxjQUFjLEVBQUM7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1CQUFPLENBQUMsK0NBQVE7QUFDL0IsbUJBQW1CLG1CQUFPLENBQUMsa0ZBQXFCO0FBQ2hELGtCQUFrQjtBQUNsQixlQUFlLG1CQUFPLENBQUMsMEVBQWlCO0FBQ3hDLGNBQWM7QUFDZCxrQkFBa0IsbUJBQU8sQ0FBQyxvR0FBOEI7QUFDeEQscUJBQXFCO0FBQ3JCLGNBQWMsbUJBQU8sQ0FBQyw0RUFBa0I7QUFDeEMsZUFBZTtBQUNmO0FBQ0E7QUFDQSxzQkFBc0IsaUJBQWlCLEVBQUU7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsaUNBQWlDLDJCQUEyQixFQUFFO0FBQzlEO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLCtEQUErRCxFQUFFO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0wsQ0FBQztBQUNEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3R3aWxpby1jbGllbnQvZXM1L3R3aWxpby5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBpbnRlcm5hbGFwaVxuICovXG52YXIgZXZlbnRzXzEgPSByZXF1aXJlKFwiZXZlbnRzXCIpO1xudmFyIGNvbm5lY3Rpb25fMSA9IHJlcXVpcmUoXCIuL3R3aWxpby9jb25uZWN0aW9uXCIpO1xuZXhwb3J0cy5Db25uZWN0aW9uID0gY29ubmVjdGlvbl8xLmRlZmF1bHQ7XG52YXIgZGV2aWNlXzEgPSByZXF1aXJlKFwiLi90d2lsaW8vZGV2aWNlXCIpO1xuZXhwb3J0cy5EZXZpY2UgPSBkZXZpY2VfMS5kZWZhdWx0O1xudmFyIHByZWZsaWdodF8xID0gcmVxdWlyZShcIi4vdHdpbGlvL3ByZWZsaWdodC9wcmVmbGlnaHRcIik7XG5leHBvcnRzLlByZWZsaWdodFRlc3QgPSBwcmVmbGlnaHRfMS5QcmVmbGlnaHRUZXN0O1xudmFyIFBTdHJlYW0gPSByZXF1aXJlKCcuL3R3aWxpby9wc3RyZWFtJyk7XG5leHBvcnRzLlBTdHJlYW0gPSBQU3RyZWFtO1xudmFyIGluc3RhbmNlO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGRldmljZV8xLmRlZmF1bHQsICdpbnN0YW5jZScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGluc3RhbmNlOyB9LFxuICAgIHNldDogZnVuY3Rpb24gKF9pbnN0YW5jZSkge1xuICAgICAgICBpZiAoX2luc3RhbmNlID09PSBudWxsKSB7XG4gICAgICAgICAgICBpbnN0YW5jZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9LFxufSk7XG5kZXZpY2VfMS5kZWZhdWx0LmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95U2luZ2xldG9uKCkge1xuICAgIGlmIChpbnN0YW5jZSkge1xuICAgICAgICBpbnN0YW5jZS5kZXN0cm95KCk7XG4gICAgfVxuICAgIGJpbmRTaW5nbGV0b24oKTtcbn07XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBEZXZpY2UgaW5zdGFuY2UgYW5kIGJpbmQgaXRzIGZ1bmN0aW9ucyB0byB0aGUgRGV2aWNlIHN0YXRpYy4gVGhpcyBtYWludGFpbnNcbiAqIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IGZvciB0aGUgRGV2aWNlIHNpbmdsZXRvbiBiZWhhdmlvciBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0XG4gKiBicmVha2luZyByZWxlYXNlLlxuICovXG5mdW5jdGlvbiBiaW5kU2luZ2xldG9uKCkge1xuICAgIGluc3RhbmNlID0gbmV3IGRldmljZV8xLmRlZmF1bHQoKTtcbiAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhkZXZpY2VfMS5kZWZhdWx0LnByb3RvdHlwZSlcbiAgICAgICAgLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhldmVudHNfMS5FdmVudEVtaXR0ZXIucHJvdG90eXBlKSlcbiAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGRldmljZV8xLmRlZmF1bHQucHJvdG90eXBlW3Byb3BdID09PSAnZnVuY3Rpb24nO1xuICAgIH0pXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHByb3ApIHsgcmV0dXJuIHByb3AgIT09ICdkZXN0cm95JzsgfSlcbiAgICAgICAgLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgZGV2aWNlXzEuZGVmYXVsdFtwcm9wXSA9IGRldmljZV8xLmRlZmF1bHQucHJvdG90eXBlW3Byb3BdLmJpbmQoaW5zdGFuY2UpO1xuICAgIH0pO1xufVxuYmluZFNpbmdsZXRvbigpO1xuT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaW5zdGFuY2UpXG4gICAgLmZpbHRlcihmdW5jdGlvbiAocHJvcCkgeyByZXR1cm4gdHlwZW9mIGRldmljZV8xLmRlZmF1bHQucHJvdG90eXBlW3Byb3BdICE9PSAnZnVuY3Rpb24nOyB9KVxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRldmljZV8xLmRlZmF1bHQsIHByb3AsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5zdGFuY2VbcHJvcF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKF9wcm9wKSB7XG4gICAgICAgICAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBpbnN0YW5jZVtwcm9wXSA9IF9wcm9wO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH0pO1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10d2lsaW8uanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio.js\n')},"./node_modules/twilio-client/es5/twilio/asyncQueue.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError("Generator is already executing.");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\n/**\n * @packageDocumentation\n * @module Voice\n * @internalapi\n */\nvar deferred_1 = __webpack_require__(/*! ./deferred */ "./node_modules/twilio-client/es5/twilio/deferred.js");\n/**\n * Queue async operations and executes them synchronously.\n */\nvar AsyncQueue = /** @class */ (function () {\n    function AsyncQueue() {\n        /**\n         * The list of async operations in this queue\n         */\n        this._operations = [];\n    }\n    /**\n     * Adds the async operation to the queue\n     * @param callback An async callback that returns a promise\n     * @returns A promise that will get resolved or rejected after executing the callback\n     */\n    AsyncQueue.prototype.enqueue = function (callback) {\n        var hasPending = !!this._operations.length;\n        var deferred = new deferred_1.default();\n        this._operations.push({ deferred: deferred, callback: callback });\n        if (!hasPending) {\n            this._processQueue();\n        }\n        return deferred.promise;\n    };\n    /**\n     * Start processing the queue. This executes the first item and removes it after.\n     * Then do the same for next items until the queue is emptied.\n     */\n    AsyncQueue.prototype._processQueue = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, deferred, callback, result, error, hasResolved, e_1;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!this._operations.length) return [3 /*break*/, 5];\n                        _a = this._operations[0], deferred = _a.deferred, callback = _a.callback;\n                        result = void 0;\n                        error = void 0;\n                        hasResolved = void 0;\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, callback()];\n                    case 2:\n                        result = _b.sent();\n                        hasResolved = true;\n                        return [3 /*break*/, 4];\n                    case 3:\n                        e_1 = _b.sent();\n                        error = e_1;\n                        return [3 /*break*/, 4];\n                    case 4:\n                        // Remove the item\n                        this._operations.shift();\n                        if (hasResolved) {\n                            deferred.resolve(result);\n                        }\n                        else {\n                            deferred.reject(error);\n                        }\n                        return [3 /*break*/, 0];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return AsyncQueue;\n}());\nexports.AsyncQueue = AsyncQueue;\n//# sourceMappingURL=asyncQueue.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/asyncQueue.js\n')},"./node_modules/twilio-client/es5/twilio/audiohelper.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * @packageDocumentation\n * @module Voice\n */\nvar events_1 = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\nvar errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/twilio-client/es5/twilio/errors/index.js\");\nvar log_1 = __webpack_require__(/*! ./log */ \"./node_modules/twilio-client/es5/twilio/log.js\");\nvar outputdevicecollection_1 = __webpack_require__(/*! ./outputdevicecollection */ \"./node_modules/twilio-client/es5/twilio/outputdevicecollection.js\");\nvar defaultMediaDevices = __webpack_require__(/*! ./shims/mediadevices */ \"./node_modules/twilio-client/es5/twilio/shims/mediadevices.js\");\nvar util_1 = __webpack_require__(/*! ./util */ \"./node_modules/twilio-client/es5/twilio/util.js\");\nvar MediaDeviceInfoShim = __webpack_require__(/*! ./shims/mediadeviceinfo */ \"./node_modules/twilio-client/es5/twilio/shims/mediadeviceinfo.js\");\n/**\n * Aliases for audio kinds, used for labelling.\n * @private\n */\nvar kindAliases = {\n    audioinput: 'Audio Input',\n    audiooutput: 'Audio Output',\n};\n/**\n * Provides input and output audio-based functionality in one convenient class.\n * @publicapi\n */\nvar AudioHelper = /** @class */ (function (_super) {\n    __extends(AudioHelper, _super);\n    /**\n     * @constructor\n     * @private\n     * @param onActiveOutputsChanged - A callback to be called when the user changes the active output devices.\n     * @param onActiveInputChanged - A callback to be called when the user changes the active input device.\n     * @param getUserMedia - The getUserMedia method to use.\n     * @param [options]\n     */\n    function AudioHelper(onActiveOutputsChanged, onActiveInputChanged, getUserMedia, options) {\n        var _this = _super.call(this) || this;\n        /**\n         * A Map of all audio input devices currently available to the browser by their device ID.\n         */\n        _this.availableInputDevices = new Map();\n        /**\n         * A Map of all audio output devices currently available to the browser by their device ID.\n         */\n        _this.availableOutputDevices = new Map();\n        /**\n         * The currently set audio constraints set by setAudioConstraints().\n         */\n        _this._audioConstraints = null;\n        /**\n         * The current input device.\n         */\n        _this._inputDevice = null;\n        /**\n         * The current input stream.\n         */\n        _this._inputStream = null;\n        /**\n         * Whether the {@link AudioHelper} is currently polling the input stream's volume.\n         */\n        _this._isPollingInputVolume = false;\n        /**\n         * An instance of Logger to use.\n         */\n        _this._log = log_1.default.getInstance();\n        /**\n         * A record of unknown devices (Devices without labels)\n         */\n        _this._unknownDeviceIndexes = {\n            audioinput: {},\n            audiooutput: {},\n        };\n        /**\n         * Remove an input device from inputs\n         * @param lostDevice\n         * @returns Whether the device was active\n         */\n        _this._removeLostInput = function (lostDevice) {\n            if (!_this.inputDevice || _this.inputDevice.deviceId !== lostDevice.deviceId) {\n                return false;\n            }\n            _this._replaceStream(null);\n            _this._inputDevice = null;\n            _this._maybeStopPollingVolume();\n            var defaultDevice = _this.availableInputDevices.get('default')\n                || Array.from(_this.availableInputDevices.values())[0];\n            if (defaultDevice) {\n                _this.setInputDevice(defaultDevice.deviceId);\n            }\n            return true;\n        };\n        /**\n         * Remove an input device from outputs\n         * @param lostDevice\n         * @returns Whether the device was active\n         */\n        _this._removeLostOutput = function (lostDevice) {\n            var wasSpeakerLost = _this.speakerDevices.delete(lostDevice);\n            var wasRingtoneLost = _this.ringtoneDevices.delete(lostDevice);\n            return wasSpeakerLost || wasRingtoneLost;\n        };\n        /**\n         * Update the available input and output devices\n         */\n        _this._updateAvailableDevices = function () {\n            if (!_this._mediaDevices) {\n                return Promise.reject('Enumeration not supported');\n            }\n            return _this._mediaDevices.enumerateDevices().then(function (devices) {\n                _this._updateDevices(devices.filter(function (d) { return d.kind === 'audiooutput'; }), _this.availableOutputDevices, _this._removeLostOutput);\n                _this._updateDevices(devices.filter(function (d) { return d.kind === 'audioinput'; }), _this.availableInputDevices, _this._removeLostInput);\n                var defaultDevice = _this.availableOutputDevices.get('default')\n                    || Array.from(_this.availableOutputDevices.values())[0];\n                [_this.speakerDevices, _this.ringtoneDevices].forEach(function (outputDevices) {\n                    if (!outputDevices.get().size && _this.availableOutputDevices.size && _this.isOutputSelectionSupported) {\n                        outputDevices.set(defaultDevice.deviceId)\n                            .catch(function (reason) {\n                            _this._log.warn(\"Unable to set audio output devices. \" + reason);\n                        });\n                    }\n                });\n            });\n        };\n        options = Object.assign({\n            AudioContext: typeof AudioContext !== 'undefined' && AudioContext,\n            setSinkId: typeof HTMLAudioElement !== 'undefined' && HTMLAudioElement.prototype.setSinkId,\n        }, options);\n        _this._getUserMedia = getUserMedia;\n        _this._mediaDevices = options.mediaDevices || defaultMediaDevices;\n        _this._onActiveInputChanged = onActiveInputChanged;\n        var isAudioContextSupported = !!(options.AudioContext || options.audioContext);\n        var isEnumerationSupported = !!(_this._mediaDevices && _this._mediaDevices.enumerateDevices);\n        var isSetSinkSupported = typeof options.setSinkId === 'function';\n        _this.isOutputSelectionSupported = isEnumerationSupported && isSetSinkSupported;\n        _this.isVolumeSupported = isAudioContextSupported;\n        if (options.enabledSounds) {\n            _this._addEnabledSounds(options.enabledSounds);\n        }\n        if (_this.isVolumeSupported) {\n            _this._audioContext = options.audioContext || options.AudioContext && new options.AudioContext();\n            if (_this._audioContext) {\n                _this._inputVolumeAnalyser = _this._audioContext.createAnalyser();\n                _this._inputVolumeAnalyser.fftSize = 32;\n                _this._inputVolumeAnalyser.smoothingTimeConstant = 0.3;\n            }\n        }\n        _this.ringtoneDevices = new outputdevicecollection_1.default('ringtone', _this.availableOutputDevices, onActiveOutputsChanged, _this.isOutputSelectionSupported);\n        _this.speakerDevices = new outputdevicecollection_1.default('speaker', _this.availableOutputDevices, onActiveOutputsChanged, _this.isOutputSelectionSupported);\n        _this.addListener('newListener', function (eventName) {\n            if (eventName === 'inputVolume') {\n                _this._maybeStartPollingVolume();\n            }\n        });\n        _this.addListener('removeListener', function (eventName) {\n            if (eventName === 'inputVolume') {\n                _this._maybeStopPollingVolume();\n            }\n        });\n        _this.once('newListener', function () {\n            // NOTE (rrowland): Ideally we would only check isEnumerationSupported here, but\n            //   in at least one browser version (Tested in FF48) enumerateDevices actually\n            //   returns bad data for the listed devices. Instead, we check for\n            //   isOutputSelectionSupported to avoid these quirks that may negatively affect customers.\n            if (!_this.isOutputSelectionSupported) {\n                _this._log.warn('Warning: This browser does not support audio output selection.');\n            }\n            if (!_this.isVolumeSupported) {\n                _this._log.warn(\"Warning: This browser does not support Twilio's volume indicator feature.\");\n            }\n        });\n        if (isEnumerationSupported) {\n            _this._initializeEnumeration();\n        }\n        return _this;\n    }\n    Object.defineProperty(AudioHelper.prototype, \"audioConstraints\", {\n        /**\n         * The currently set audio constraints set by setAudioConstraints(). Starts as null.\n         */\n        get: function () { return this._audioConstraints; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AudioHelper.prototype, \"inputDevice\", {\n        /**\n         * The active input device. Having no inputDevice specified by `setInputDevice()`\n         * will disable input selection related functionality.\n         */\n        get: function () { return this._inputDevice; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AudioHelper.prototype, \"inputStream\", {\n        /**\n         * The current input stream.\n         */\n        get: function () { return this._inputStream; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Start polling volume if it's supported and there's an input stream to poll.\n     * @private\n     */\n    AudioHelper.prototype._maybeStartPollingVolume = function () {\n        var _this = this;\n        if (!this.isVolumeSupported || !this._inputStream) {\n            return;\n        }\n        this._updateVolumeSource();\n        if (this._isPollingInputVolume || !this._inputVolumeAnalyser) {\n            return;\n        }\n        var bufferLength = this._inputVolumeAnalyser.frequencyBinCount;\n        var buffer = new Uint8Array(bufferLength);\n        this._isPollingInputVolume = true;\n        var emitVolume = function () {\n            if (!_this._isPollingInputVolume) {\n                return;\n            }\n            if (_this._inputVolumeAnalyser) {\n                _this._inputVolumeAnalyser.getByteFrequencyData(buffer);\n                var inputVolume = util_1.average(buffer);\n                _this.emit('inputVolume', inputVolume / 255);\n            }\n            requestAnimationFrame(emitVolume);\n        };\n        requestAnimationFrame(emitVolume);\n    };\n    /**\n     * Stop polling volume if it's currently polling and there are no listeners.\n     * @private\n     */\n    AudioHelper.prototype._maybeStopPollingVolume = function () {\n        if (!this.isVolumeSupported) {\n            return;\n        }\n        if (!this._isPollingInputVolume || (this._inputStream && this.listenerCount('inputVolume'))) {\n            return;\n        }\n        if (this._inputVolumeSource) {\n            this._inputVolumeSource.disconnect();\n            delete this._inputVolumeSource;\n        }\n        this._isPollingInputVolume = false;\n    };\n    /**\n     * Unbind the listeners from mediaDevices.\n     * @private\n     */\n    AudioHelper.prototype._unbind = function () {\n        if (!this._mediaDevices) {\n            throw new errors_1.NotSupportedError('Enumeration is not supported');\n        }\n        if (this._mediaDevices.removeEventListener) {\n            this._mediaDevices.removeEventListener('devicechange', this._updateAvailableDevices);\n            this._mediaDevices.removeEventListener('deviceinfochange', this._updateAvailableDevices);\n        }\n    };\n    /**\n     * Set the MediaTrackConstraints to be applied on every getUserMedia call for new input\n     * device audio. Any deviceId specified here will be ignored. Instead, device IDs should\n     * be specified using {@link AudioHelper#setInputDevice}. The returned Promise resolves\n     * when the media is successfully reacquired, or immediately if no input device is set.\n     * @param audioConstraints - The MediaTrackConstraints to apply.\n     */\n    AudioHelper.prototype.setAudioConstraints = function (audioConstraints) {\n        this._audioConstraints = Object.assign({}, audioConstraints);\n        delete this._audioConstraints.deviceId;\n        return this.inputDevice\n            ? this._setInputDevice(this.inputDevice.deviceId, true)\n            : Promise.resolve();\n    };\n    /**\n     * Replace the current input device with a new device by ID.\n     * @param deviceId - An ID of a device to replace the existing\n     *   input device with.\n     */\n    AudioHelper.prototype.setInputDevice = function (deviceId) {\n        return !util_1.isFirefox()\n            ? this._setInputDevice(deviceId, false)\n            : Promise.reject(new errors_1.NotSupportedError('Firefox does not currently support opening multiple ' +\n                'audio input tracks simultaneously, even across different tabs. As a result, ' +\n                'Device.audio.setInputDevice is disabled on Firefox until support is added.\\n' +\n                'Related BugZilla thread: https://bugzilla.mozilla.org/show_bug.cgi?id=1299324'));\n    };\n    /**\n     * Unset the MediaTrackConstraints to be applied on every getUserMedia call for new input\n     * device audio. The returned Promise resolves when the media is successfully reacquired,\n     * or immediately if no input device is set.\n     */\n    AudioHelper.prototype.unsetAudioConstraints = function () {\n        this._audioConstraints = null;\n        return this.inputDevice\n            ? this._setInputDevice(this.inputDevice.deviceId, true)\n            : Promise.resolve();\n    };\n    /**\n     * Unset the input device, stopping the tracks. This should only be called when not in a connection, and\n     *   will not allow removal of the input device during a live call.\n     */\n    AudioHelper.prototype.unsetInputDevice = function () {\n        var _this = this;\n        if (!this.inputDevice) {\n            return Promise.resolve();\n        }\n        return this._onActiveInputChanged(null).then(function () {\n            _this._replaceStream(null);\n            _this._inputDevice = null;\n            _this._maybeStopPollingVolume();\n        });\n    };\n    /**\n     * Merge the passed enabledSounds into {@link AudioHelper}. Currently used to merge the deprecated\n     *   Device.sounds object onto the new {@link AudioHelper} interface. Mutates\n     *   by reference, sharing state between {@link Device} and {@link AudioHelper}.\n     * @param enabledSounds - The initial sound settings to merge.\n     * @private\n     */\n    AudioHelper.prototype._addEnabledSounds = function (enabledSounds) {\n        var _this = this;\n        function setValue(key, value) {\n            if (typeof value !== 'undefined') {\n                enabledSounds[key] = value;\n            }\n            return enabledSounds[key];\n        }\n        Object.keys(enabledSounds).forEach(function (key) {\n            _this[key] = setValue.bind(null, key);\n        });\n    };\n    /**\n     * Get the index of an un-labeled Device.\n     * @param mediaDeviceInfo\n     * @returns The index of the passed MediaDeviceInfo\n     */\n    AudioHelper.prototype._getUnknownDeviceIndex = function (mediaDeviceInfo) {\n        var id = mediaDeviceInfo.deviceId;\n        var kind = mediaDeviceInfo.kind;\n        var index = this._unknownDeviceIndexes[kind][id];\n        if (!index) {\n            index = Object.keys(this._unknownDeviceIndexes[kind]).length + 1;\n            this._unknownDeviceIndexes[kind][id] = index;\n        }\n        return index;\n    };\n    /**\n     * Initialize output device enumeration.\n     */\n    AudioHelper.prototype._initializeEnumeration = function () {\n        var _this = this;\n        if (!this._mediaDevices) {\n            throw new errors_1.NotSupportedError('Enumeration is not supported');\n        }\n        if (this._mediaDevices.addEventListener) {\n            this._mediaDevices.addEventListener('devicechange', this._updateAvailableDevices);\n            this._mediaDevices.addEventListener('deviceinfochange', this._updateAvailableDevices);\n        }\n        this._updateAvailableDevices().then(function () {\n            if (!_this.isOutputSelectionSupported) {\n                return;\n            }\n            Promise.all([\n                _this.speakerDevices.set('default'),\n                _this.ringtoneDevices.set('default'),\n            ]).catch(function (reason) {\n                _this._log.warn(\"Warning: Unable to set audio output devices. \" + reason);\n            });\n        });\n    };\n    /**\n     * Stop the tracks on the current input stream before replacing it with the passed stream.\n     * @param stream - The new stream\n     */\n    AudioHelper.prototype._replaceStream = function (stream) {\n        if (this._inputStream) {\n            this._inputStream.getTracks().forEach(function (track) {\n                track.stop();\n            });\n        }\n        this._inputStream = stream;\n    };\n    /**\n     * Replace the current input device with a new device by ID.\n     * @param deviceId - An ID of a device to replace the existing\n     *   input device with.\n     * @param forceGetUserMedia - If true, getUserMedia will be called even if\n     *   the specified device is already active.\n     */\n    AudioHelper.prototype._setInputDevice = function (deviceId, forceGetUserMedia) {\n        var _this = this;\n        if (typeof deviceId !== 'string') {\n            return Promise.reject(new errors_1.InvalidArgumentError('Must specify the device to set'));\n        }\n        var device = this.availableInputDevices.get(deviceId);\n        if (!device) {\n            return Promise.reject(new errors_1.InvalidArgumentError(\"Device not found: \" + deviceId));\n        }\n        if (this._inputDevice && this._inputDevice.deviceId === deviceId && this._inputStream) {\n            if (!forceGetUserMedia) {\n                return Promise.resolve();\n            }\n            // If the currently active track is still in readyState `live`, gUM may return the same track\n            // rather than returning a fresh track.\n            this._inputStream.getTracks().forEach(function (track) {\n                track.stop();\n            });\n        }\n        var constraints = { audio: Object.assign({ deviceId: { exact: deviceId } }, this.audioConstraints) };\n        return this._getUserMedia(constraints).then(function (stream) {\n            return _this._onActiveInputChanged(stream).then(function () {\n                _this._replaceStream(stream);\n                _this._inputDevice = device;\n                _this._maybeStartPollingVolume();\n            });\n        });\n    };\n    /**\n     * Update a set of devices.\n     * @param updatedDevices - An updated list of available Devices\n     * @param availableDevices - The previous list of available Devices\n     * @param removeLostDevice - The method to call if a previously available Device is\n     *   no longer available.\n     */\n    AudioHelper.prototype._updateDevices = function (updatedDevices, availableDevices, removeLostDevice) {\n        var _this = this;\n        var updatedDeviceIds = updatedDevices.map(function (d) { return d.deviceId; });\n        var knownDeviceIds = Array.from(availableDevices.values()).map(function (d) { return d.deviceId; });\n        var lostActiveDevices = [];\n        // Remove lost devices\n        var lostDeviceIds = util_1.difference(knownDeviceIds, updatedDeviceIds);\n        lostDeviceIds.forEach(function (lostDeviceId) {\n            var lostDevice = availableDevices.get(lostDeviceId);\n            if (lostDevice) {\n                availableDevices.delete(lostDeviceId);\n                if (removeLostDevice(lostDevice)) {\n                    lostActiveDevices.push(lostDevice);\n                }\n            }\n        });\n        // Add any new devices, or devices with updated labels\n        var deviceChanged = false;\n        updatedDevices.forEach(function (newDevice) {\n            var existingDevice = availableDevices.get(newDevice.deviceId);\n            var newMediaDeviceInfo = _this._wrapMediaDeviceInfo(newDevice);\n            if (!existingDevice || existingDevice.label !== newMediaDeviceInfo.label) {\n                availableDevices.set(newDevice.deviceId, newMediaDeviceInfo);\n                deviceChanged = true;\n            }\n        });\n        if (deviceChanged || lostDeviceIds.length) {\n            // Force a new gUM in case the underlying tracks of the active stream have changed. One\n            //   reason this might happen is when `default` is selected and set to a USB device,\n            //   then that device is unplugged or plugged back in. We can't check for the 'ended'\n            //   event or readyState because it is asynchronous and may take upwards of 5 seconds,\n            //   in my testing. (rrowland)\n            if (this.inputDevice !== null && this.inputDevice.deviceId === 'default') {\n                this._log.warn(\"Calling getUserMedia after device change to ensure that the           tracks of the active device (default) have not gone stale.\");\n                this._setInputDevice(this.inputDevice.deviceId, true);\n            }\n            this.emit('deviceChange', lostActiveDevices);\n        }\n    };\n    /**\n     * Disconnect the old input volume source, and create and connect a new one with the current\n     * input stream.\n     */\n    AudioHelper.prototype._updateVolumeSource = function () {\n        if (!this._inputStream || !this._audioContext || !this._inputVolumeAnalyser) {\n            return;\n        }\n        if (this._inputVolumeSource) {\n            this._inputVolumeSource.disconnect();\n        }\n        this._inputVolumeSource = this._audioContext.createMediaStreamSource(this._inputStream);\n        this._inputVolumeSource.connect(this._inputVolumeAnalyser);\n    };\n    /**\n     * Convert a MediaDeviceInfo to a IMediaDeviceInfoShim.\n     * @param mediaDeviceInfo - The info to convert\n     * @returns The converted shim\n     */\n    AudioHelper.prototype._wrapMediaDeviceInfo = function (mediaDeviceInfo) {\n        var options = {\n            deviceId: mediaDeviceInfo.deviceId,\n            groupId: mediaDeviceInfo.groupId,\n            kind: mediaDeviceInfo.kind,\n            label: mediaDeviceInfo.label,\n        };\n        if (!options.label) {\n            if (options.deviceId === 'default') {\n                options.label = 'Default';\n            }\n            else {\n                var index = this._getUnknownDeviceIndex(mediaDeviceInfo);\n                options.label = \"Unknown \" + kindAliases[options.kind] + \" Device \" + index;\n            }\n        }\n        return new MediaDeviceInfoShim(options);\n    };\n    return AudioHelper;\n}(events_1.EventEmitter));\n(function (AudioHelper) {\n})(AudioHelper || (AudioHelper = {}));\nexports.default = AudioHelper;\n//# sourceMappingURL=audiohelper.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/audiohelper.js\n")},"./node_modules/twilio-client/es5/twilio/connection.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * @packageDocumentation\n * @module Voice\n * @publicapi\n * @internal\n */\nvar events_1 = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\nvar device_1 = __webpack_require__(/*! ./device */ \"./node_modules/twilio-client/es5/twilio/device.js\");\nvar errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/twilio-client/es5/twilio/errors/index.js\");\nvar log_1 = __webpack_require__(/*! ./log */ \"./node_modules/twilio-client/es5/twilio/log.js\");\nvar icecandidate_1 = __webpack_require__(/*! ./rtc/icecandidate */ \"./node_modules/twilio-client/es5/twilio/rtc/icecandidate.js\");\nvar statsMonitor_1 = __webpack_require__(/*! ./statsMonitor */ \"./node_modules/twilio-client/es5/twilio/statsMonitor.js\");\nvar util_1 = __webpack_require__(/*! ./util */ \"./node_modules/twilio-client/es5/twilio/util.js\");\nvar Backoff = __webpack_require__(/*! backoff */ \"./node_modules/backoff/index.js\");\nvar C = __webpack_require__(/*! ./constants */ \"./node_modules/twilio-client/es5/twilio/constants.js\");\nvar PeerConnection = __webpack_require__(/*! ./rtc */ \"./node_modules/twilio-client/es5/twilio/rtc/index.js\").PeerConnection;\nvar getPreferredCodecInfo = __webpack_require__(/*! ./rtc/sdp */ \"./node_modules/twilio-client/es5/twilio/rtc/sdp.js\").getPreferredCodecInfo;\nvar BACKOFF_CONFIG = {\n    factor: 1.1,\n    initialDelay: 1,\n    maxDelay: 30000,\n    randomisationFactor: 0.5,\n};\nvar DTMF_INTER_TONE_GAP = 70;\nvar DTMF_PAUSE_DURATION = 500;\nvar DTMF_TONE_DURATION = 160;\nvar METRICS_BATCH_SIZE = 10;\nvar METRICS_DELAY = 5000;\nvar MEDIA_DISCONNECT_ERROR = {\n    disconnect: true,\n    info: {\n        code: 31003,\n        message: 'Connection with Twilio was interrupted.',\n        twilioError: new errors_1.MediaErrors.ConnectionError(),\n    },\n};\nvar MULTIPLE_THRESHOLD_WARNING_NAMES = {\n    // The stat `packetsLostFraction` is monitored by two separate thresholds,\n    // `maxAverage` and `max`. Each threshold emits a different warning name.\n    packetsLostFraction: {\n        max: 'packet-loss',\n        maxAverage: 'packets-lost-fraction',\n    },\n};\nvar WARNING_NAMES = {\n    audioInputLevel: 'audio-input-level',\n    audioOutputLevel: 'audio-output-level',\n    bytesReceived: 'bytes-received',\n    bytesSent: 'bytes-sent',\n    jitter: 'jitter',\n    mos: 'mos',\n    rtt: 'rtt',\n};\nvar WARNING_PREFIXES = {\n    max: 'high-',\n    maxAverage: 'high-',\n    maxDuration: 'constant-',\n    min: 'low-',\n    minStandardDeviation: 'constant-',\n};\nvar hasBeenWarnedHandlers = false;\n/**\n * A {@link Connection} represents a media and signaling connection to a TwiML application.\n * @publicapi\n */\nvar Connection = /** @class */ (function (_super) {\n    __extends(Connection, _super);\n    /**\n     * @constructor\n     * @private\n     * @param config - Mandatory configuration options\n     * @param [options] - Optional settings\n     */\n    function Connection(config, options) {\n        var _this = _super.call(this) || this;\n        /**\n         * Call parameters received from Twilio for an incoming call.\n         */\n        _this.parameters = {};\n        /**\n         * The number of times input volume has been the same consecutively.\n         */\n        _this._inputVolumeStreak = 0;\n        /**\n         * Whether the call has been answered.\n         */\n        _this._isAnswered = false;\n        /**\n         * Whether the call has been cancelled.\n         */\n        _this._isCancelled = false;\n        /**\n         * The most recent public input volume value. 0 -> 1 representing -100 to -30 dB.\n         */\n        _this._latestInputVolume = 0;\n        /**\n         * The most recent public output volume value. 0 -> 1 representing -100 to -30 dB.\n         */\n        _this._latestOutputVolume = 0;\n        /**\n         * An instance of Logger to use.\n         */\n        _this._log = log_1.default.getInstance();\n        /**\n         * A batch of metrics samples to send to Insights. Gets cleared after\n         * each send and appended to on each new sample.\n         */\n        _this._metricsSamples = [];\n        /**\n         * The number of times output volume has been the same consecutively.\n         */\n        _this._outputVolumeStreak = 0;\n        /**\n         * A Map of Sounds to play.\n         */\n        _this._soundcache = new Map();\n        /**\n         * State of the {@link Connection}.\n         */\n        _this._status = Connection.State.Pending;\n        /**\n         * Options passed to this {@link Connection}.\n         */\n        _this.options = {\n            enableRingingState: false,\n            mediaStreamFactory: PeerConnection,\n            offerSdp: null,\n            shouldPlayDisconnect: function () { return true; },\n        };\n        /**\n         * Whether the {@link Connection} should send a hangup on disconnect.\n         */\n        _this.sendHangup = true;\n        /**\n         * String representation of {@link Connection} instance.\n         * @private\n         */\n        _this.toString = function () { return '[Twilio.Connection instance]'; };\n        _this._emitWarning = function (groupPrefix, warningName, threshold, value, wasCleared, warningData) {\n            var groupSuffix = wasCleared ? '-cleared' : '-raised';\n            var groupName = groupPrefix + \"warning\" + groupSuffix;\n            // Ignore constant input if the Connection is muted (Expected)\n            if (warningName === 'constant-audio-input-level' && _this.isMuted()) {\n                return;\n            }\n            var level = wasCleared ? 'info' : 'warning';\n            // Avoid throwing false positives as warnings until we refactor volume metrics\n            if (warningName === 'constant-audio-output-level') {\n                level = 'info';\n            }\n            var payloadData = { threshold: threshold };\n            if (value) {\n                if (value instanceof Array) {\n                    payloadData.values = value.map(function (val) {\n                        if (typeof val === 'number') {\n                            return Math.round(val * 100) / 100;\n                        }\n                        return value;\n                    });\n                }\n                else {\n                    payloadData.value = value;\n                }\n            }\n            _this._publisher.post(level, groupName, warningName, { data: payloadData }, _this);\n            if (warningName !== 'constant-audio-output-level') {\n                var emitName = wasCleared ? 'warning-cleared' : 'warning';\n                _this.emit(emitName, warningName, warningData && !wasCleared ? warningData : null);\n            }\n        };\n        /**\n         * Called when the {@link Connection} is answered.\n         * @param payload\n         */\n        _this._onAnswer = function (payload) {\n            // answerOnBridge=false will send a 183 which we need to catch in _onRinging when\n            // the enableRingingState flag is disabled. In that case, we will receive a 200 after\n            // the callee accepts the call firing a second `accept` event if we don't\n            // short circuit here.\n            if (_this._isAnswered) {\n                return;\n            }\n            _this._setCallSid(payload);\n            _this._isAnswered = true;\n            _this._maybeTransitionToOpen();\n        };\n        /**\n         * Called when the {@link Connection} is cancelled.\n         * @param payload\n         */\n        _this._onCancel = function (payload) {\n            // (rrowland) Is this check necessary? Verify, and if so move to pstream / VSP module.\n            var callsid = payload.callsid;\n            if (_this.parameters.CallSid === callsid) {\n                _this._isCancelled = true;\n                _this._publisher.info('connection', 'cancel', null, _this);\n                _this._cleanupEventListeners();\n                _this.mediaStream.close();\n                _this._status = Connection.State.Closed;\n                _this.emit('cancel');\n                _this.pstream.removeListener('cancel', _this._onCancel);\n            }\n        };\n        /**\n         * Called when the {@link Connection} is hung up.\n         * @param payload\n         */\n        _this._onHangup = function (payload) {\n            /**\n             *  see if callsid passed in message matches either callsid or outbound id\n             *  connection should always have either callsid or outbound id\n             *  if no callsid passed hangup anyways\n             */\n            if (payload.callsid && (_this.parameters.CallSid || _this.outboundConnectionId)) {\n                if (payload.callsid !== _this.parameters.CallSid\n                    && payload.callsid !== _this.outboundConnectionId) {\n                    return;\n                }\n            }\n            else if (payload.callsid) {\n                // hangup is for another connection\n                return;\n            }\n            _this._log.info('Received HANGUP from gateway');\n            if (payload.error) {\n                var error = {\n                    code: payload.error.code || 31000,\n                    connection: _this,\n                    message: payload.error.message || 'Error sent from gateway in HANGUP',\n                    twilioError: new errors_1.GeneralErrors.ConnectionError(),\n                };\n                _this._log.error('Received an error from the gateway:', error);\n                _this.emit('error', error);\n            }\n            _this.sendHangup = false;\n            _this._publisher.info('connection', 'disconnected-by-remote', null, _this);\n            _this._disconnect(null, true);\n            _this._cleanupEventListeners();\n        };\n        /**\n         * Called when there is a media failure.\n         * Manages all media-related states and takes action base on the states\n         * @param type - Type of media failure\n         */\n        _this._onMediaFailure = function (type) {\n            var _a = Connection.MediaFailure, ConnectionDisconnected = _a.ConnectionDisconnected, ConnectionFailed = _a.ConnectionFailed, IceGatheringFailed = _a.IceGatheringFailed, LowBytes = _a.LowBytes;\n            // These types signifies the end of a single ICE cycle\n            var isEndOfIceCycle = type === ConnectionFailed || type === IceGatheringFailed;\n            // Default behavior on ice failures with disabled ice restart.\n            if ((!_this.options.enableIceRestart && isEndOfIceCycle)\n                // All browsers except chrome doesn't update pc.iceConnectionState and pc.connectionState\n                // after issuing an ICE Restart, which we use to determine if ICE Restart is complete.\n                // Since we cannot detect if ICE Restart is complete, we will not retry.\n                || (!util_1.isChrome(window, window.navigator) && type === ConnectionFailed)) {\n                return _this.mediaStream.onerror(MEDIA_DISCONNECT_ERROR);\n            }\n            // Ignore any other type of media failure if ice restart is disabled\n            if (!_this.options.enableIceRestart) {\n                return;\n            }\n            // Ignore subsequent requests if ice restart is in progress\n            if (_this._status === Connection.State.Reconnecting) {\n                // This is a retry. Previous ICE Restart failed\n                if (isEndOfIceCycle) {\n                    // We already exceeded max retry time.\n                    if (Date.now() - _this._mediaReconnectStartTime > BACKOFF_CONFIG.maxDelay) {\n                        _this._log.info('Exceeded max ICE retries');\n                        return _this.mediaStream.onerror(MEDIA_DISCONNECT_ERROR);\n                    }\n                    // Issue ICE restart with backoff\n                    _this._mediaReconnectBackoff.backoff();\n                }\n                return;\n            }\n            var pc = _this.mediaStream.version.pc;\n            var isIceDisconnected = pc && pc.iceConnectionState === 'disconnected';\n            var hasLowBytesWarning = _this._monitor.hasActiveWarning('bytesSent', 'min')\n                || _this._monitor.hasActiveWarning('bytesReceived', 'min');\n            // Only certain conditions can trigger media reconnection\n            if ((type === LowBytes && isIceDisconnected)\n                || (type === ConnectionDisconnected && hasLowBytesWarning)\n                || isEndOfIceCycle) {\n                var mediaReconnectionError = {\n                    code: 53405,\n                    message: 'Media connection failed.',\n                    twilioError: new errors_1.MediaErrors.ConnectionError(),\n                };\n                _this._log.warn('ICE Connection disconnected.');\n                _this._publisher.warn('connection', 'error', mediaReconnectionError, _this);\n                _this._publisher.info('connection', 'reconnecting', null, _this);\n                _this._mediaReconnectStartTime = Date.now();\n                _this._status = Connection.State.Reconnecting;\n                _this._mediaReconnectBackoff.reset();\n                _this._mediaReconnectBackoff.backoff();\n                _this.emit('reconnecting', mediaReconnectionError);\n            }\n        };\n        /**\n         * Called when media connection is restored\n         */\n        _this._onMediaReconnected = function () {\n            // Only trigger once.\n            // This can trigger on pc.onIceConnectionChange and pc.onConnectionChange.\n            if (_this._status !== Connection.State.Reconnecting) {\n                return;\n            }\n            _this._log.info('ICE Connection reestablished.');\n            _this._publisher.info('connection', 'reconnected', null, _this);\n            _this._status = Connection.State.Open;\n            _this.emit('reconnected');\n        };\n        /**\n         * When we get a RINGING signal from PStream, update the {@link Connection} status.\n         * @param payload\n         */\n        _this._onRinging = function (payload) {\n            _this._setCallSid(payload);\n            // If we're not in 'connecting' or 'ringing' state, this event was received out of order.\n            if (_this._status !== Connection.State.Connecting && _this._status !== Connection.State.Ringing) {\n                return;\n            }\n            var hasEarlyMedia = !!payload.sdp;\n            if (_this.options.enableRingingState) {\n                _this._status = Connection.State.Ringing;\n                _this._publisher.info('connection', 'outgoing-ringing', { hasEarlyMedia: hasEarlyMedia }, _this);\n                _this.emit('ringing', hasEarlyMedia);\n                // answerOnBridge=false will send a 183, which we need to interpret as `answer` when\n                // the enableRingingState flag is disabled in order to maintain a non-breaking API from 1.4.24\n            }\n            else if (hasEarlyMedia) {\n                _this._onAnswer(payload);\n            }\n        };\n        /**\n         * Called each time StatsMonitor emits a sample.\n         * Emits stats event and batches the call stats metrics and sends them to Insights.\n         * @param sample\n         */\n        _this._onRTCSample = function (sample) {\n            var callMetrics = __assign(__assign({}, sample), { inputVolume: _this._latestInputVolume, outputVolume: _this._latestOutputVolume });\n            _this._codec = callMetrics.codecName;\n            _this._metricsSamples.push(callMetrics);\n            if (_this._metricsSamples.length >= METRICS_BATCH_SIZE) {\n                _this._publishMetrics();\n            }\n            _this.emit('sample', sample);\n        };\n        /**\n         * Called when we receive a transportClose event from pstream.\n         * Re-emits the event.\n         */\n        _this._onTransportClose = function () {\n            _this._log.error('Received transportClose from pstream');\n            _this.emit('transportClose');\n        };\n        /**\n         * Re-emit an StatsMonitor warning as a {@link Connection}.warning or .warning-cleared event.\n         * @param warningData\n         * @param wasCleared - Whether this is a -cleared or -raised event.\n         */\n        _this._reemitWarning = function (warningData, wasCleared) {\n            var groupPrefix = /^audio/.test(warningData.name) ?\n                'audio-level-' : 'network-quality-';\n            var warningPrefix = WARNING_PREFIXES[warningData.threshold.name];\n            /**\n             * NOTE: There are two \"packet-loss\" warnings: `high-packet-loss` and\n             * `high-packets-lost-fraction`, so in this case we need to use a different\n             * `WARNING_NAME` mapping.\n             */\n            var warningName;\n            if (warningData.name in MULTIPLE_THRESHOLD_WARNING_NAMES) {\n                warningName = MULTIPLE_THRESHOLD_WARNING_NAMES[warningData.name][warningData.threshold.name];\n            }\n            else if (warningData.name in WARNING_NAMES) {\n                warningName = WARNING_NAMES[warningData.name];\n            }\n            var warning = warningPrefix + warningName;\n            _this._emitWarning(groupPrefix, warning, warningData.threshold.value, warningData.values || warningData.value, wasCleared, warningData);\n        };\n        /**\n         * Re-emit an StatsMonitor warning-cleared as a .warning-cleared event.\n         * @param warningData\n         */\n        _this._reemitWarningCleared = function (warningData) {\n            _this._reemitWarning(warningData, true);\n        };\n        _this._isUnifiedPlanDefault = config.isUnifiedPlanDefault;\n        _this._soundcache = config.soundcache;\n        _this.message = options && options.twimlParams || {};\n        _this.customParameters = new Map(Object.entries(_this.message).map(function (_a) {\n            var key = _a[0], val = _a[1];\n            return [key, String(val)];\n        }));\n        Object.assign(_this.options, options);\n        if (_this.options.callParameters) {\n            _this.parameters = _this.options.callParameters;\n        }\n        _this._direction = _this.parameters.CallSid ? Connection.CallDirection.Incoming : Connection.CallDirection.Outgoing;\n        if (_this._direction === Connection.CallDirection.Incoming && _this.parameters) {\n            _this.callerInfo = _this.parameters.StirStatus\n                ? { isVerified: _this.parameters.StirStatus === 'TN-Validation-Passed-A' }\n                : null;\n        }\n        else {\n            _this.callerInfo = null;\n        }\n        _this._mediaReconnectBackoff = Backoff.exponential(BACKOFF_CONFIG);\n        _this._mediaReconnectBackoff.on('ready', function () { return _this.mediaStream.iceRestart(); });\n        // temporary call sid to be used for outgoing calls\n        _this.outboundConnectionId = generateTempCallSid();\n        var publisher = _this._publisher = config.publisher;\n        if (_this._direction === Connection.CallDirection.Incoming) {\n            publisher.info('connection', 'incoming', null, _this);\n        }\n        else {\n            publisher.info('connection', 'outgoing', { preflight: _this.options.preflight }, _this);\n        }\n        var monitor = _this._monitor = new (_this.options.StatsMonitor || statsMonitor_1.default)();\n        monitor.on('sample', _this._onRTCSample);\n        // First 20 seconds or so are choppy, so let's not bother with these warnings.\n        monitor.disableWarnings();\n        setTimeout(function () { return monitor.enableWarnings(); }, METRICS_DELAY);\n        monitor.on('warning', function (data, wasCleared) {\n            if (data.name === 'bytesSent' || data.name === 'bytesReceived') {\n                _this._onMediaFailure(Connection.MediaFailure.LowBytes);\n            }\n            _this._reemitWarning(data, wasCleared);\n        });\n        monitor.on('warning-cleared', function (data) {\n            _this._reemitWarningCleared(data);\n        });\n        _this.mediaStream = new (_this.options.MediaStream || _this.options.mediaStreamFactory)(config.audioHelper, config.pstream, config.getUserMedia, {\n            codecPreferences: _this.options.codecPreferences,\n            dscp: _this.options.dscp,\n            enableIceRestart: _this.options.enableIceRestart,\n            forceAggressiveIceNomination: _this.options.forceAggressiveIceNomination,\n            isUnifiedPlan: _this._isUnifiedPlanDefault,\n            maxAverageBitrate: _this.options.maxAverageBitrate,\n            preflight: _this.options.preflight,\n        });\n        _this.on('volume', function (inputVolume, outputVolume) {\n            _this._inputVolumeStreak = _this._checkVolume(inputVolume, _this._inputVolumeStreak, _this._latestInputVolume, 'input');\n            _this._outputVolumeStreak = _this._checkVolume(outputVolume, _this._outputVolumeStreak, _this._latestOutputVolume, 'output');\n            _this._latestInputVolume = inputVolume;\n            _this._latestOutputVolume = outputVolume;\n        });\n        _this.mediaStream.onvolume = function (inputVolume, outputVolume, internalInputVolume, internalOutputVolume) {\n            // (rrowland) These values mock the 0 -> 32767 format used by legacy getStats. We should look into\n            // migrating to a newer standard, either 0.0 -> linear or -127 to 0 in dB, matching the range\n            // chosen below.\n            monitor.addVolumes((internalInputVolume / 255) * 32767, (internalOutputVolume / 255) * 32767);\n            // (rrowland) 0.0 -> 1.0 linear\n            _this.emit('volume', inputVolume, outputVolume);\n        };\n        _this.mediaStream.ondtlstransportstatechange = function (state) {\n            var level = state === 'failed' ? 'error' : 'debug';\n            _this._publisher.post(level, 'dtls-transport-state', state, null, _this);\n        };\n        _this.mediaStream.onpcconnectionstatechange = function (state) {\n            var level = 'debug';\n            var dtlsTransport = _this.mediaStream.getRTCDtlsTransport();\n            if (state === 'failed') {\n                level = dtlsTransport && dtlsTransport.state === 'failed' ? 'error' : 'warning';\n            }\n            _this._publisher.post(level, 'pc-connection-state', state, null, _this);\n        };\n        _this.mediaStream.onicecandidate = function (candidate) {\n            var payload = new icecandidate_1.IceCandidate(candidate).toPayload();\n            _this._publisher.debug('ice-candidate', 'ice-candidate', payload, _this);\n        };\n        _this.mediaStream.onselectedcandidatepairchange = function (pair) {\n            var localCandidatePayload = new icecandidate_1.IceCandidate(pair.local).toPayload();\n            var remoteCandidatePayload = new icecandidate_1.IceCandidate(pair.remote, true).toPayload();\n            _this._publisher.debug('ice-candidate', 'selected-ice-candidate-pair', {\n                local_candidate: localCandidatePayload,\n                remote_candidate: remoteCandidatePayload,\n            }, _this);\n        };\n        _this.mediaStream.oniceconnectionstatechange = function (state) {\n            var level = state === 'failed' ? 'error' : 'debug';\n            _this._publisher.post(level, 'ice-connection-state', state, null, _this);\n        };\n        _this.mediaStream.onicegatheringfailure = function (type) {\n            _this._publisher.warn('ice-gathering-state', type, null, _this);\n            _this._onMediaFailure(Connection.MediaFailure.IceGatheringFailed);\n        };\n        _this.mediaStream.onicegatheringstatechange = function (state) {\n            _this._publisher.debug('ice-gathering-state', state, null, _this);\n        };\n        _this.mediaStream.onsignalingstatechange = function (state) {\n            _this._publisher.debug('signaling-state', state, null, _this);\n        };\n        _this.mediaStream.ondisconnected = function (msg) {\n            _this._log.info(msg);\n            _this._publisher.warn('network-quality-warning-raised', 'ice-connectivity-lost', {\n                message: msg,\n            }, _this);\n            _this.emit('warning', 'ice-connectivity-lost');\n            _this._onMediaFailure(Connection.MediaFailure.ConnectionDisconnected);\n        };\n        _this.mediaStream.onfailed = function (msg) {\n            _this._onMediaFailure(Connection.MediaFailure.ConnectionFailed);\n        };\n        _this.mediaStream.onconnected = function () {\n            // First time mediaStream is connected, but ICE Gathering issued an ICE restart and succeeded.\n            if (_this._status === Connection.State.Reconnecting) {\n                _this._onMediaReconnected();\n            }\n        };\n        _this.mediaStream.onreconnected = function (msg) {\n            _this._log.info(msg);\n            _this._publisher.info('network-quality-warning-cleared', 'ice-connectivity-lost', {\n                message: msg,\n            }, _this);\n            _this.emit('warning-cleared', 'ice-connectivity-lost');\n            _this._onMediaReconnected();\n        };\n        _this.mediaStream.onerror = function (e) {\n            if (e.disconnect === true) {\n                _this._disconnect(e.info && e.info.message);\n            }\n            var error = {\n                code: e.info.code,\n                connection: _this,\n                info: e.info,\n                message: e.info.message || 'Error with mediastream',\n                twilioError: e.info.twilioError,\n            };\n            _this._log.error('Received an error from MediaStream:', e);\n            _this.emit('error', error);\n        };\n        _this.mediaStream.onopen = function () {\n            // NOTE(mroberts): While this may have been happening in previous\n            // versions of Chrome, since Chrome 45 we have seen the\n            // PeerConnection's onsignalingstatechange handler invoked multiple\n            // times in the same signalingState 'stable'. When this happens, we\n            // invoke this onopen function. If we invoke it twice without checking\n            // for _status 'open', we'd accidentally close the PeerConnection.\n            //\n            // See <https://code.google.com/p/webrtc/issues/detail?id=4996>.\n            if (_this._status === Connection.State.Open || _this._status === Connection.State.Reconnecting) {\n                return;\n            }\n            else if (_this._status === Connection.State.Ringing || _this._status === Connection.State.Connecting) {\n                _this.mute(false);\n                _this._maybeTransitionToOpen();\n            }\n            else {\n                // call was probably canceled sometime before this\n                _this.mediaStream.close();\n            }\n        };\n        _this.mediaStream.onclose = function () {\n            _this._status = Connection.State.Closed;\n            if (_this.options.shouldPlayDisconnect && _this.options.shouldPlayDisconnect()\n                // Don't play disconnect sound if this was from a cancel event. i.e. the call\n                // was ignored or hung up even before it was answered.\n                && !_this._isCancelled) {\n                _this._soundcache.get(device_1.default.SoundName.Disconnect).play();\n            }\n            monitor.disable();\n            _this._publishMetrics();\n            if (!_this._isCancelled) {\n                _this.emit('disconnect', _this);\n            }\n        };\n        _this.pstream = config.pstream;\n        _this.pstream.on('cancel', _this._onCancel);\n        _this.pstream.on('ringing', _this._onRinging);\n        _this.pstream.on('transportClose', _this._onTransportClose);\n        _this.on('error', function (error) {\n            _this._publisher.error('connection', 'error', {\n                code: error.code, message: error.message,\n            }, _this);\n            if (_this.pstream && _this.pstream.status === 'disconnected') {\n                _this._cleanupEventListeners();\n            }\n        });\n        _this.on('disconnect', function () {\n            _this._cleanupEventListeners();\n        });\n        return _this;\n    }\n    Object.defineProperty(Connection.prototype, \"direction\", {\n        /**\n         * Whether this {@link Connection} is incoming or outgoing.\n         */\n        get: function () {\n            return this._direction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Connection.prototype, \"codec\", {\n        /**\n         * Audio codec used for this {@link Connection}. Expecting {@link Connection.Codec} but\n         * will copy whatever we get from RTC stats.\n         */\n        get: function () {\n            return this._codec;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Get the real CallSid. Returns null if not present or is a temporary call sid.\n     * @deprecated\n     * @private\n     */\n    Connection.prototype._getRealCallSid = function () {\n        this._log.warn('_getRealCallSid is deprecated and will be removed in 2.0.');\n        return /^TJ/.test(this.parameters.CallSid) ? null : this.parameters.CallSid;\n    };\n    /**\n     * Get the temporary CallSid.\n     * @deprecated\n     * @private\n     */\n    Connection.prototype._getTempCallSid = function () {\n        this._log.warn('_getTempCallSid is deprecated and will be removed in 2.0. \\\n                    Please use outboundConnectionId instead.');\n        return this.outboundConnectionId;\n    };\n    /**\n     * Set the audio input tracks from a given stream.\n     * @param stream\n     * @private\n     */\n    Connection.prototype._setInputTracksFromStream = function (stream) {\n        return this.mediaStream.setInputTracksFromStream(stream);\n    };\n    /**\n     * Set the audio output sink IDs.\n     * @param sinkIds\n     * @private\n     */\n    Connection.prototype._setSinkIds = function (sinkIds) {\n        return this.mediaStream._setSinkIds(sinkIds);\n    };\n    Connection.prototype.accept = function (handlerOrConstraints, rtcConfiguration) {\n        var _this = this;\n        if (typeof handlerOrConstraints === 'function') {\n            this._addHandler('accept', handlerOrConstraints);\n            return;\n        }\n        if (this._status !== Connection.State.Pending) {\n            return;\n        }\n        var audioConstraints = handlerOrConstraints || this.options.audioConstraints;\n        this._status = Connection.State.Connecting;\n        var connect = function () {\n            if (_this._status !== Connection.State.Connecting) {\n                // call must have been canceled\n                _this._cleanupEventListeners();\n                _this.mediaStream.close();\n                return;\n            }\n            var onAnswer = function (pc) {\n                // Report that the call was answered, and directionality\n                var eventName = _this._direction === Connection.CallDirection.Incoming\n                    ? 'accepted-by-local'\n                    : 'accepted-by-remote';\n                _this._publisher.info('connection', eventName, null, _this);\n                // Report the preferred codec and params as they appear in the SDP\n                var _a = getPreferredCodecInfo(_this.mediaStream.version.getSDP()), codecName = _a.codecName, codecParams = _a.codecParams;\n                _this._publisher.info('settings', 'codec', {\n                    codec_params: codecParams,\n                    selected_codec: codecName,\n                }, _this);\n                // Enable RTC monitoring\n                _this._monitor.enable(pc);\n            };\n            var sinkIds = typeof _this.options.getSinkIds === 'function' && _this.options.getSinkIds();\n            if (Array.isArray(sinkIds)) {\n                _this.mediaStream._setSinkIds(sinkIds).catch(function () {\n                    // (rrowland) We don't want this to throw to console since the customer\n                    // can't control this. This will most commonly be rejected on browsers\n                    // that don't support setting sink IDs.\n                });\n            }\n            _this.pstream.addListener('hangup', _this._onHangup);\n            rtcConfiguration = rtcConfiguration || _this.options.rtcConfiguration;\n            if (_this._direction === Connection.CallDirection.Incoming) {\n                _this._isAnswered = true;\n                _this.mediaStream.answerIncomingCall(_this.parameters.CallSid, _this.options.offerSdp, _this.options.rtcConstraints, rtcConfiguration, onAnswer);\n            }\n            else {\n                var params = Array.from(_this.customParameters.entries()).map(function (pair) {\n                    return encodeURIComponent(pair[0]) + \"=\" + encodeURIComponent(pair[1]);\n                }).join('&');\n                _this.pstream.once('answer', _this._onAnswer.bind(_this));\n                _this.mediaStream.makeOutgoingCall(_this.pstream.token, params, _this.outboundConnectionId, _this.options.rtcConstraints, rtcConfiguration, onAnswer);\n            }\n        };\n        if (this.options.beforeAccept) {\n            this.options.beforeAccept(this);\n        }\n        var inputStream = typeof this.options.getInputStream === 'function' && this.options.getInputStream();\n        var promise = inputStream\n            ? this.mediaStream.setInputTracksFromStream(inputStream)\n            : this.mediaStream.openWithConstraints(audioConstraints);\n        promise.then(function () {\n            _this._publisher.info('get-user-media', 'succeeded', {\n                data: { audioConstraints: audioConstraints },\n            }, _this);\n            connect();\n        }, function (error) {\n            var message;\n            var code;\n            if (error.code === 31208\n                || ['PermissionDeniedError', 'NotAllowedError'].indexOf(error.name) !== -1) {\n                code = 31208;\n                message = 'User denied access to microphone, or the web browser did not allow microphone '\n                    + 'access at this address.';\n                _this._publisher.error('get-user-media', 'denied', {\n                    data: {\n                        audioConstraints: audioConstraints,\n                        error: error,\n                    },\n                }, _this);\n            }\n            else {\n                code = 31201;\n                message = \"Error occurred while accessing microphone: \" + error.name + (error.message\n                    ? \" (\" + error.message + \")\"\n                    : '');\n                _this._publisher.error('get-user-media', 'failed', {\n                    data: {\n                        audioConstraints: audioConstraints,\n                        error: error,\n                    },\n                }, _this);\n            }\n            _this._disconnect();\n            _this.emit('error', { message: message, code: code });\n        });\n    };\n    Connection.prototype.cancel = function (handler) {\n        this._log.warn('.cancel() is deprecated. Please use .ignore() instead.');\n        if (handler) {\n            this.ignore(handler);\n        }\n        else {\n            this.ignore();\n        }\n    };\n    Connection.prototype.disconnect = function (handler) {\n        if (typeof handler === 'function') {\n            this._addHandler('disconnect', handler);\n            return;\n        }\n        this._disconnect();\n    };\n    /**\n     * @deprecated - Set a handler for the {@link errorEvent}\n     */\n    Connection.prototype.error = function (handler) {\n        if (typeof handler === 'function') {\n            this._addHandler('error', handler);\n        }\n    };\n    /**\n     * Get the local MediaStream, if set.\n     */\n    Connection.prototype.getLocalStream = function () {\n        return this.mediaStream && this.mediaStream.stream;\n    };\n    /**\n     * Get the remote MediaStream, if set.\n     */\n    Connection.prototype.getRemoteStream = function () {\n        return this.mediaStream && this.mediaStream._remoteStream;\n    };\n    Connection.prototype.ignore = function (handler) {\n        if (typeof handler === 'function') {\n            this._addHandler('cancel', handler);\n            return;\n        }\n        if (this._status !== Connection.State.Pending) {\n            return;\n        }\n        this._status = Connection.State.Closed;\n        this.emit('cancel');\n        this.mediaStream.ignore(this.parameters.CallSid);\n        this._publisher.info('connection', 'ignored-by-local', null, this);\n    };\n    /**\n     * Check if connection is muted\n     */\n    Connection.prototype.isMuted = function () {\n        return this.mediaStream.isMuted;\n    };\n    Connection.prototype.mute = function (shouldMute) {\n        if (shouldMute === void 0) { shouldMute = true; }\n        if (typeof shouldMute === 'function') {\n            this._addHandler('mute', shouldMute);\n            return;\n        }\n        var wasMuted = this.mediaStream.isMuted;\n        this.mediaStream.mute(shouldMute);\n        var isMuted = this.mediaStream.isMuted;\n        if (wasMuted !== isMuted) {\n            this._publisher.info('connection', isMuted ? 'muted' : 'unmuted', null, this);\n            this.emit('mute', isMuted, this);\n        }\n    };\n    /**\n     * Post an event to Endpoint Analytics indicating that the end user\n     *   has given call quality feedback. Called without a score, this\n     *   will report that the customer declined to give feedback.\n     * @param score - The end-user's rating of the call; an\n     *   integer 1 through 5. Or undefined if the user declined to give\n     *   feedback.\n     * @param issue - The primary issue the end user\n     *   experienced on the call. Can be: ['one-way-audio', 'choppy-audio',\n     *   'dropped-call', 'audio-latency', 'noisy-call', 'echo']\n     */\n    Connection.prototype.postFeedback = function (score, issue) {\n        if (typeof score === 'undefined' || score === null) {\n            return this._postFeedbackDeclined();\n        }\n        if (!Object.values(Connection.FeedbackScore).includes(score)) {\n            throw new errors_1.InvalidArgumentError(\"Feedback score must be one of: \" + Object.values(Connection.FeedbackScore));\n        }\n        if (typeof issue !== 'undefined' && issue !== null && !Object.values(Connection.FeedbackIssue).includes(issue)) {\n            throw new errors_1.InvalidArgumentError(\"Feedback issue must be one of: \" + Object.values(Connection.FeedbackIssue));\n        }\n        return this._publisher.info('feedback', 'received', {\n            issue_name: issue,\n            quality_score: score,\n        }, this, true);\n    };\n    Connection.prototype.reject = function (handler) {\n        if (typeof handler === 'function') {\n            this._addHandler('reject', handler);\n            return;\n        }\n        if (this._status !== Connection.State.Pending) {\n            return;\n        }\n        this.pstream.reject(this.parameters.CallSid);\n        this._status = Connection.State.Closed;\n        this.emit('reject');\n        this.mediaStream.reject(this.parameters.CallSid);\n        this._publisher.info('connection', 'rejected-by-local', null, this);\n    };\n    /**\n     * Send a string of digits.\n     * @param digits\n     */\n    Connection.prototype.sendDigits = function (digits) {\n        if (digits.match(/[^0-9*#w]/)) {\n            throw new errors_1.InvalidArgumentError('Illegal character passed into sendDigits');\n        }\n        var sequence = [];\n        digits.split('').forEach(function (digit) {\n            var dtmf = (digit !== 'w') ? \"dtmf\" + digit : '';\n            if (dtmf === 'dtmf*') {\n                dtmf = 'dtmfs';\n            }\n            if (dtmf === 'dtmf#') {\n                dtmf = 'dtmfh';\n            }\n            sequence.push(dtmf);\n        });\n        // Binds soundCache to be used in recursion until all digits have been played.\n        (function playNextDigit(soundCache, dialtonePlayer) {\n            var digit = sequence.shift();\n            if (digit) {\n                if (dialtonePlayer) {\n                    dialtonePlayer.play(digit);\n                }\n                else {\n                    soundCache.get(digit).play();\n                }\n            }\n            if (sequence.length) {\n                setTimeout(playNextDigit.bind(null, soundCache), 200);\n            }\n        })(this._soundcache, this.options.dialtonePlayer);\n        var dtmfSender = this.mediaStream.getOrCreateDTMFSender();\n        function insertDTMF(dtmfs) {\n            if (!dtmfs.length) {\n                return;\n            }\n            var dtmf = dtmfs.shift();\n            if (dtmf && dtmf.length) {\n                dtmfSender.insertDTMF(dtmf, DTMF_TONE_DURATION, DTMF_INTER_TONE_GAP);\n            }\n            setTimeout(insertDTMF.bind(null, dtmfs), DTMF_PAUSE_DURATION);\n        }\n        if (dtmfSender) {\n            if (!('canInsertDTMF' in dtmfSender) || dtmfSender.canInsertDTMF) {\n                this._log.info('Sending digits using RTCDTMFSender');\n                // NOTE(mroberts): We can't just map 'w' to ',' since\n                // RTCDTMFSender's pause duration is 2 s and Twilio's is more\n                // like 500 ms. Instead, we will fudge it with setTimeout.\n                insertDTMF(digits.split('w'));\n                return;\n            }\n            this._log.info('RTCDTMFSender cannot insert DTMF');\n        }\n        // send pstream message to send DTMF\n        this._log.info('Sending digits over PStream');\n        if (this.pstream !== null && this.pstream.status !== 'disconnected') {\n            this.pstream.dtmf(this.parameters.CallSid, digits);\n        }\n        else {\n            var error = {\n                code: 31000,\n                connection: this,\n                message: 'Could not send DTMF: Signaling channel is disconnected',\n            };\n            this.emit('error', error);\n        }\n    };\n    /**\n     * Get the current {@link Connection} status.\n     */\n    Connection.prototype.status = function () {\n        return this._status;\n    };\n    /**\n     * @deprecated - Unmute the {@link Connection}.\n     */\n    Connection.prototype.unmute = function () {\n        this._log.warn('.unmute() is deprecated. Please use .mute(false) to unmute a call instead.');\n        this.mute(false);\n    };\n    /**\n     * @deprecated - Set a handler for the {@link volumeEvent}\n     * @param handler\n     */\n    Connection.prototype.volume = function (handler) {\n        if (!window || (!window.AudioContext && !window.webkitAudioContext)) {\n            this._log.warn('This browser does not support Connection.volume');\n        }\n        this._addHandler('volume', handler);\n    };\n    /**\n     * Add a handler for an EventEmitter and emit a deprecation warning on first call.\n     * @param eventName - Name of the event\n     * @param handler - A handler to call when the event is emitted\n     */\n    Connection.prototype._addHandler = function (eventName, handler) {\n        if (!hasBeenWarnedHandlers) {\n            this._log.warn(\"Connection callback handlers (accept, cancel, disconnect, error, ignore, mute, reject,\\n        volume) have been deprecated and will be removed in the next breaking release. Instead, the EventEmitter         interface can be used to set event listeners. Example: connection.on('\" + eventName + \"', handler)\");\n            hasBeenWarnedHandlers = true;\n        }\n        this.addListener(eventName, handler);\n        return this;\n    };\n    /**\n     * Check the volume passed, emitting a warning if one way audio is detected or cleared.\n     * @param currentVolume - The current volume for this direction\n     * @param streakFieldName - The name of the field on the {@link Connection} object that tracks how many times the\n     *   current value has been repeated consecutively.\n     * @param lastValueFieldName - The name of the field on the {@link Connection} object that tracks the most recent\n     *   volume for this direction\n     * @param direction - The directionality of this audio track, either 'input' or 'output'\n     * @returns The current streak; how many times in a row the same value has been polled.\n     */\n    Connection.prototype._checkVolume = function (currentVolume, currentStreak, lastValue, direction) {\n        var wasWarningRaised = currentStreak >= 10;\n        var newStreak = 0;\n        if (lastValue === currentVolume) {\n            newStreak = currentStreak;\n        }\n        if (newStreak >= 10) {\n            this._emitWarning('audio-level-', \"constant-audio-\" + direction + \"-level\", 10, newStreak, false);\n        }\n        else if (wasWarningRaised) {\n            this._emitWarning('audio-level-', \"constant-audio-\" + direction + \"-level\", 10, newStreak, true);\n        }\n        return newStreak;\n    };\n    /**\n     * Clean up event listeners.\n     */\n    Connection.prototype._cleanupEventListeners = function () {\n        var _this = this;\n        var cleanup = function () {\n            if (!_this.pstream) {\n                return;\n            }\n            _this.pstream.removeListener('answer', _this._onAnswer);\n            _this.pstream.removeListener('cancel', _this._onCancel);\n            _this.pstream.removeListener('hangup', _this._onHangup);\n            _this.pstream.removeListener('ringing', _this._onRinging);\n            _this.pstream.removeListener('transportClose', _this._onTransportClose);\n        };\n        // This is kind of a hack, but it lets us avoid rewriting more code.\n        // Basically, there's a sequencing problem with the way PeerConnection raises\n        // the\n        //\n        //   Cannot establish connection. Client is disconnected\n        //\n        // error in Connection#accept. It calls PeerConnection#onerror, which emits\n        // the error event on Connection. An error handler on Connection then calls\n        // cleanupEventListeners, but then control returns to Connection#accept. It's\n        // at this point that we add a listener for the answer event that never gets\n        // removed. setTimeout will allow us to rerun cleanup again, _after_\n        // Connection#accept returns.\n        cleanup();\n        setTimeout(cleanup, 0);\n    };\n    /**\n     * Create the payload wrapper for a batch of metrics to be sent to Insights.\n     */\n    Connection.prototype._createMetricPayload = function () {\n        var payload = {\n            call_sid: this.parameters.CallSid,\n            dscp: !!this.options.dscp,\n            sdk_version: C.RELEASE_VERSION,\n            selected_region: this.options.selectedRegion,\n        };\n        if (this.options.gateway) {\n            payload.gateway = this.options.gateway;\n        }\n        if (this.options.region) {\n            payload.region = this.options.region;\n        }\n        payload.direction = this._direction;\n        return payload;\n    };\n    /**\n     * Disconnect the {@link Connection}.\n     * @param message - A message explaining why the {@link Connection} is being disconnected.\n     * @param wasRemote - Whether the disconnect was triggered locally or remotely.\n     */\n    Connection.prototype._disconnect = function (message, wasRemote) {\n        message = typeof message === 'string' ? message : null;\n        if (this._status !== Connection.State.Open\n            && this._status !== Connection.State.Connecting\n            && this._status !== Connection.State.Reconnecting\n            && this._status !== Connection.State.Ringing) {\n            return;\n        }\n        this._log.info('Disconnecting...');\n        // send pstream hangup message\n        if (this.pstream !== null && this.pstream.status !== 'disconnected' && this.sendHangup) {\n            var callsid = this.parameters.CallSid || this.outboundConnectionId;\n            if (callsid) {\n                this.pstream.hangup(callsid, message);\n            }\n        }\n        this._cleanupEventListeners();\n        this.mediaStream.close();\n        if (!wasRemote) {\n            this._publisher.info('connection', 'disconnected-by-local', null, this);\n        }\n    };\n    /**\n     * Transition to {@link ConnectionStatus.Open} if criteria is met.\n     */\n    Connection.prototype._maybeTransitionToOpen = function () {\n        if (this.mediaStream && this.mediaStream.status === 'open' && this._isAnswered) {\n            this._status = Connection.State.Open;\n            this.emit('accept', this);\n        }\n    };\n    /**\n     * Post an event to Endpoint Analytics indicating that the end user\n     *   has ignored a request for feedback.\n     */\n    Connection.prototype._postFeedbackDeclined = function () {\n        return this._publisher.info('feedback', 'received-none', null, this, true);\n    };\n    /**\n     * Publish the current set of queued metrics samples to Insights.\n     */\n    Connection.prototype._publishMetrics = function () {\n        var _this = this;\n        if (this._metricsSamples.length === 0) {\n            return;\n        }\n        this._publisher.postMetrics('quality-metrics-samples', 'metrics-sample', this._metricsSamples.splice(0), this._createMetricPayload(), this).catch(function (e) {\n            _this._log.warn('Unable to post metrics to Insights. Received error:', e);\n        });\n    };\n    /**\n     * Set the CallSid\n     * @param payload\n     */\n    Connection.prototype._setCallSid = function (payload) {\n        var callSid = payload.callsid;\n        if (!callSid) {\n            return;\n        }\n        this.parameters.CallSid = callSid;\n        this.mediaStream.callSid = callSid;\n    };\n    /**\n     * String representation of the {@link Connection} class.\n     * @private\n     */\n    Connection.toString = function () { return '[Twilio.Connection class]'; };\n    return Connection;\n}(events_1.EventEmitter));\n(function (Connection) {\n    /**\n     * Possible states of the {@link Connection}.\n     */\n    var State;\n    (function (State) {\n        State[\"Closed\"] = \"closed\";\n        State[\"Connecting\"] = \"connecting\";\n        State[\"Open\"] = \"open\";\n        State[\"Pending\"] = \"pending\";\n        State[\"Reconnecting\"] = \"reconnecting\";\n        State[\"Ringing\"] = \"ringing\";\n    })(State = Connection.State || (Connection.State = {}));\n    /**\n     * Different issues that may have been experienced during a call, that can be\n     * reported to Twilio Insights via {@link Connection}.postFeedback().\n     */\n    var FeedbackIssue;\n    (function (FeedbackIssue) {\n        FeedbackIssue[\"AudioLatency\"] = \"audio-latency\";\n        FeedbackIssue[\"ChoppyAudio\"] = \"choppy-audio\";\n        FeedbackIssue[\"DroppedCall\"] = \"dropped-call\";\n        FeedbackIssue[\"Echo\"] = \"echo\";\n        FeedbackIssue[\"NoisyCall\"] = \"noisy-call\";\n        FeedbackIssue[\"OneWayAudio\"] = \"one-way-audio\";\n    })(FeedbackIssue = Connection.FeedbackIssue || (Connection.FeedbackIssue = {}));\n    /**\n     * A rating of call quality experienced during a call, to be reported to Twilio Insights\n     * via {@link Connection}.postFeedback().\n     */\n    var FeedbackScore;\n    (function (FeedbackScore) {\n        FeedbackScore[FeedbackScore[\"One\"] = 1] = \"One\";\n        FeedbackScore[FeedbackScore[\"Two\"] = 2] = \"Two\";\n        FeedbackScore[FeedbackScore[\"Three\"] = 3] = \"Three\";\n        FeedbackScore[FeedbackScore[\"Four\"] = 4] = \"Four\";\n        FeedbackScore[FeedbackScore[\"Five\"] = 5] = \"Five\";\n    })(FeedbackScore = Connection.FeedbackScore || (Connection.FeedbackScore = {}));\n    /**\n     * The directionality of the {@link Connection}, whether incoming or outgoing.\n     */\n    var CallDirection;\n    (function (CallDirection) {\n        CallDirection[\"Incoming\"] = \"INCOMING\";\n        CallDirection[\"Outgoing\"] = \"OUTGOING\";\n    })(CallDirection = Connection.CallDirection || (Connection.CallDirection = {}));\n    /**\n     * Valid audio codecs to use for the media connection.\n     */\n    var Codec;\n    (function (Codec) {\n        Codec[\"Opus\"] = \"opus\";\n        Codec[\"PCMU\"] = \"pcmu\";\n    })(Codec = Connection.Codec || (Connection.Codec = {}));\n    /**\n     * Possible ICE Gathering failures\n     */\n    var IceGatheringFailureReason;\n    (function (IceGatheringFailureReason) {\n        IceGatheringFailureReason[\"None\"] = \"none\";\n        IceGatheringFailureReason[\"Timeout\"] = \"timeout\";\n    })(IceGatheringFailureReason = Connection.IceGatheringFailureReason || (Connection.IceGatheringFailureReason = {}));\n    /**\n     * Possible media failures\n     */\n    var MediaFailure;\n    (function (MediaFailure) {\n        MediaFailure[\"ConnectionDisconnected\"] = \"ConnectionDisconnected\";\n        MediaFailure[\"ConnectionFailed\"] = \"ConnectionFailed\";\n        MediaFailure[\"IceGatheringFailed\"] = \"IceGatheringFailed\";\n        MediaFailure[\"LowBytes\"] = \"LowBytes\";\n    })(MediaFailure = Connection.MediaFailure || (Connection.MediaFailure = {}));\n})(Connection || (Connection = {}));\nfunction generateTempCallSid() {\n    return 'TJSxxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        /* tslint:disable:no-bitwise */\n        var r = Math.random() * 16 | 0;\n        var v = c === 'x' ? r : (r & 0x3 | 0x8);\n        /* tslint:enable:no-bitwise */\n        return v.toString(16);\n    });\n}\nexports.default = Connection;\n//# sourceMappingURL=connection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLWNsaWVudC9lczUvdHdpbGlvL2Nvbm5lY3Rpb24uanM/ZGI0ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGNBQWMsZ0JBQWdCLHNDQUFzQyxpQkFBaUIsRUFBRTtBQUN2Riw2QkFBNkIsdURBQXVEO0FBQ3BGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHNCQUFzQjtBQUM3QztBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxnREFBZ0QsT0FBTztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLENBQUMsY0FBYyxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQU8sQ0FBQywrQ0FBUTtBQUMvQixlQUFlLG1CQUFPLENBQUMsbUVBQVU7QUFDakMsZUFBZSxtQkFBTyxDQUFDLHlFQUFVO0FBQ2pDLFlBQVksbUJBQU8sQ0FBQyw2REFBTztBQUMzQixxQkFBcUIsbUJBQU8sQ0FBQyx1RkFBb0I7QUFDakQscUJBQXFCLG1CQUFPLENBQUMsK0VBQWdCO0FBQzdDLGFBQWEsbUJBQU8sQ0FBQywrREFBUTtBQUM3QixjQUFjLG1CQUFPLENBQUMsZ0RBQVM7QUFDL0IsUUFBUSxtQkFBTyxDQUFDLHlFQUFhO0FBQzdCLHFCQUFxQix1R0FBK0I7QUFDcEQsNEJBQTRCLGdIQUEwQztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSxpQkFBaUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGlCQUFpQjtBQUMxQztBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsaUJBQWlCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsYUFBYSxFQUFFO0FBQzlEO0FBQ0E7QUFDQSx3QkFBd0IsaUJBQWlCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxpQkFBaUI7QUFDdEQ7QUFDQTtBQUNBLHNDQUFzQyx1Q0FBdUM7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0Usb0JBQW9CO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixpQkFBaUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGlCQUFpQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixpQkFBaUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxpQkFBaUI7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSwrQkFBK0I7QUFDeEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxZQUFZLGlGQUFpRjtBQUMvSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxpQkFBaUI7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsdUNBQXVDLEVBQUU7QUFDdkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QscUNBQXFDO0FBQzNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsaUNBQWlDLEVBQUU7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixpQkFBaUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLHNDQUFzQyxpQkFBaUIsYUFBYSx1QkFBdUI7QUFDM0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIscUNBQXFDO0FBQzVELGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGlDQUFpQywrQkFBK0I7QUFDaEUsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLG1CQUFtQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdEQUF3RDtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixpQkFBaUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyxpQkFBaUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCxpQkFBaUI7QUFDL0U7QUFDQSxpRUFBaUUsaUJBQWlCO0FBQ2xGO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixpQkFBaUI7QUFDeEMsc0RBQXNELGlCQUFpQjtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiw0QkFBNEI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsaUJBQWlCO0FBQ3REO0FBQ0E7QUFDQSx1Q0FBdUMsb0NBQW9DO0FBQzNFO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSwrQkFBK0IsaUJBQWlCO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssb0RBQW9EO0FBQ3pEO0FBQ0E7QUFDQSx3Q0FBd0MsaUJBQWlCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssNEVBQTRFO0FBQ2pGO0FBQ0E7QUFDQSxZQUFZLGlCQUFpQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyw0RUFBNEU7QUFDakY7QUFDQSxrQ0FBa0MsaUJBQWlCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLLDRFQUE0RTtBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssb0RBQW9EO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyxnSEFBZ0g7QUFDckg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSyx5RUFBeUU7QUFDOUUsQ0FBQyxnQ0FBZ0M7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxlQUFlO0FBQ2YiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdHdpbGlvLWNsaWVudC9lczUvdHdpbGlvL2Nvbm5lY3Rpb24uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xudmFyIF9fYXNzaWduID0gKHRoaXMgJiYgdGhpcy5fX2Fzc2lnbikgfHwgZnVuY3Rpb24gKCkge1xuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbih0KSB7XG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSlcbiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9O1xuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIFZvaWNlXG4gKiBAcHVibGljYXBpXG4gKiBAaW50ZXJuYWxcbiAqL1xudmFyIGV2ZW50c18xID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbnZhciBkZXZpY2VfMSA9IHJlcXVpcmUoXCIuL2RldmljZVwiKTtcbnZhciBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuL2Vycm9yc1wiKTtcbnZhciBsb2dfMSA9IHJlcXVpcmUoXCIuL2xvZ1wiKTtcbnZhciBpY2VjYW5kaWRhdGVfMSA9IHJlcXVpcmUoXCIuL3J0Yy9pY2VjYW5kaWRhdGVcIik7XG52YXIgc3RhdHNNb25pdG9yXzEgPSByZXF1aXJlKFwiLi9zdGF0c01vbml0b3JcIik7XG52YXIgdXRpbF8xID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbnZhciBCYWNrb2ZmID0gcmVxdWlyZSgnYmFja29mZicpO1xudmFyIEMgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xudmFyIFBlZXJDb25uZWN0aW9uID0gcmVxdWlyZSgnLi9ydGMnKS5QZWVyQ29ubmVjdGlvbjtcbnZhciBnZXRQcmVmZXJyZWRDb2RlY0luZm8gPSByZXF1aXJlKCcuL3J0Yy9zZHAnKS5nZXRQcmVmZXJyZWRDb2RlY0luZm87XG52YXIgQkFDS09GRl9DT05GSUcgPSB7XG4gICAgZmFjdG9yOiAxLjEsXG4gICAgaW5pdGlhbERlbGF5OiAxLFxuICAgIG1heERlbGF5OiAzMDAwMCxcbiAgICByYW5kb21pc2F0aW9uRmFjdG9yOiAwLjUsXG59O1xudmFyIERUTUZfSU5URVJfVE9ORV9HQVAgPSA3MDtcbnZhciBEVE1GX1BBVVNFX0RVUkFUSU9OID0gNTAwO1xudmFyIERUTUZfVE9ORV9EVVJBVElPTiA9IDE2MDtcbnZhciBNRVRSSUNTX0JBVENIX1NJWkUgPSAxMDtcbnZhciBNRVRSSUNTX0RFTEFZID0gNTAwMDtcbnZhciBNRURJQV9ESVNDT05ORUNUX0VSUk9SID0ge1xuICAgIGRpc2Nvbm5lY3Q6IHRydWUsXG4gICAgaW5mbzoge1xuICAgICAgICBjb2RlOiAzMTAwMyxcbiAgICAgICAgbWVzc2FnZTogJ0Nvbm5lY3Rpb24gd2l0aCBUd2lsaW8gd2FzIGludGVycnVwdGVkLicsXG4gICAgICAgIHR3aWxpb0Vycm9yOiBuZXcgZXJyb3JzXzEuTWVkaWFFcnJvcnMuQ29ubmVjdGlvbkVycm9yKCksXG4gICAgfSxcbn07XG52YXIgTVVMVElQTEVfVEhSRVNIT0xEX1dBUk5JTkdfTkFNRVMgPSB7XG4gICAgLy8gVGhlIHN0YXQgYHBhY2tldHNMb3N0RnJhY3Rpb25gIGlzIG1vbml0b3JlZCBieSB0d28gc2VwYXJhdGUgdGhyZXNob2xkcyxcbiAgICAvLyBgbWF4QXZlcmFnZWAgYW5kIGBtYXhgLiBFYWNoIHRocmVzaG9sZCBlbWl0cyBhIGRpZmZlcmVudCB3YXJuaW5nIG5hbWUuXG4gICAgcGFja2V0c0xvc3RGcmFjdGlvbjoge1xuICAgICAgICBtYXg6ICdwYWNrZXQtbG9zcycsXG4gICAgICAgIG1heEF2ZXJhZ2U6ICdwYWNrZXRzLWxvc3QtZnJhY3Rpb24nLFxuICAgIH0sXG59O1xudmFyIFdBUk5JTkdfTkFNRVMgPSB7XG4gICAgYXVkaW9JbnB1dExldmVsOiAnYXVkaW8taW5wdXQtbGV2ZWwnLFxuICAgIGF1ZGlvT3V0cHV0TGV2ZWw6ICdhdWRpby1vdXRwdXQtbGV2ZWwnLFxuICAgIGJ5dGVzUmVjZWl2ZWQ6ICdieXRlcy1yZWNlaXZlZCcsXG4gICAgYnl0ZXNTZW50OiAnYnl0ZXMtc2VudCcsXG4gICAgaml0dGVyOiAnaml0dGVyJyxcbiAgICBtb3M6ICdtb3MnLFxuICAgIHJ0dDogJ3J0dCcsXG59O1xudmFyIFdBUk5JTkdfUFJFRklYRVMgPSB7XG4gICAgbWF4OiAnaGlnaC0nLFxuICAgIG1heEF2ZXJhZ2U6ICdoaWdoLScsXG4gICAgbWF4RHVyYXRpb246ICdjb25zdGFudC0nLFxuICAgIG1pbjogJ2xvdy0nLFxuICAgIG1pblN0YW5kYXJkRGV2aWF0aW9uOiAnY29uc3RhbnQtJyxcbn07XG52YXIgaGFzQmVlbldhcm5lZEhhbmRsZXJzID0gZmFsc2U7XG4vKipcbiAqIEEge0BsaW5rIENvbm5lY3Rpb259IHJlcHJlc2VudHMgYSBtZWRpYSBhbmQgc2lnbmFsaW5nIGNvbm5lY3Rpb24gdG8gYSBUd2lNTCBhcHBsaWNhdGlvbi5cbiAqIEBwdWJsaWNhcGlcbiAqL1xudmFyIENvbm5lY3Rpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKENvbm5lY3Rpb24sIF9zdXBlcik7XG4gICAgLyoqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0gY29uZmlnIC0gTWFuZGF0b3J5IGNvbmZpZ3VyYXRpb24gb3B0aW9uc1xuICAgICAqIEBwYXJhbSBbb3B0aW9uc10gLSBPcHRpb25hbCBzZXR0aW5nc1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIENvbm5lY3Rpb24oY29uZmlnLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsIHBhcmFtZXRlcnMgcmVjZWl2ZWQgZnJvbSBUd2lsaW8gZm9yIGFuIGluY29taW5nIGNhbGwuXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5wYXJhbWV0ZXJzID0ge307XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbnVtYmVyIG9mIHRpbWVzIGlucHV0IHZvbHVtZSBoYXMgYmVlbiB0aGUgc2FtZSBjb25zZWN1dGl2ZWx5LlxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuX2lucHV0Vm9sdW1lU3RyZWFrID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZXRoZXIgdGhlIGNhbGwgaGFzIGJlZW4gYW5zd2VyZWQuXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5faXNBbnN3ZXJlZCA9IGZhbHNlO1xuICAgICAgICAvKipcbiAgICAgICAgICogV2hldGhlciB0aGUgY2FsbCBoYXMgYmVlbiBjYW5jZWxsZWQuXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5faXNDYW5jZWxsZWQgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBtb3N0IHJlY2VudCBwdWJsaWMgaW5wdXQgdm9sdW1lIHZhbHVlLiAwIC0+IDEgcmVwcmVzZW50aW5nIC0xMDAgdG8gLTMwIGRCLlxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuX2xhdGVzdElucHV0Vm9sdW1lID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBtb3N0IHJlY2VudCBwdWJsaWMgb3V0cHV0IHZvbHVtZSB2YWx1ZS4gMCAtPiAxIHJlcHJlc2VudGluZyAtMTAwIHRvIC0zMCBkQi5cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLl9sYXRlc3RPdXRwdXRWb2x1bWUgPSAwO1xuICAgICAgICAvKipcbiAgICAgICAgICogQW4gaW5zdGFuY2Ugb2YgTG9nZ2VyIHRvIHVzZS5cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLl9sb2cgPSBsb2dfMS5kZWZhdWx0LmdldEluc3RhbmNlKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIGJhdGNoIG9mIG1ldHJpY3Mgc2FtcGxlcyB0byBzZW5kIHRvIEluc2lnaHRzLiBHZXRzIGNsZWFyZWQgYWZ0ZXJcbiAgICAgICAgICogZWFjaCBzZW5kIGFuZCBhcHBlbmRlZCB0byBvbiBlYWNoIG5ldyBzYW1wbGUuXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5fbWV0cmljc1NhbXBsZXMgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBudW1iZXIgb2YgdGltZXMgb3V0cHV0IHZvbHVtZSBoYXMgYmVlbiB0aGUgc2FtZSBjb25zZWN1dGl2ZWx5LlxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuX291dHB1dFZvbHVtZVN0cmVhayA9IDA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBIE1hcCBvZiBTb3VuZHMgdG8gcGxheS5cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLl9zb3VuZGNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICAvKipcbiAgICAgICAgICogU3RhdGUgb2YgdGhlIHtAbGluayBDb25uZWN0aW9ufS5cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLl9zdGF0dXMgPSBDb25uZWN0aW9uLlN0YXRlLlBlbmRpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPcHRpb25zIHBhc3NlZCB0byB0aGlzIHtAbGluayBDb25uZWN0aW9ufS5cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLm9wdGlvbnMgPSB7XG4gICAgICAgICAgICBlbmFibGVSaW5naW5nU3RhdGU6IGZhbHNlLFxuICAgICAgICAgICAgbWVkaWFTdHJlYW1GYWN0b3J5OiBQZWVyQ29ubmVjdGlvbixcbiAgICAgICAgICAgIG9mZmVyU2RwOiBudWxsLFxuICAgICAgICAgICAgc2hvdWxkUGxheURpc2Nvbm5lY3Q6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRydWU7IH0sXG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIHRoZSB7QGxpbmsgQ29ubmVjdGlvbn0gc2hvdWxkIHNlbmQgYSBoYW5ndXAgb24gZGlzY29ubmVjdC5cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLnNlbmRIYW5ndXAgPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogU3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHtAbGluayBDb25uZWN0aW9ufSBpbnN0YW5jZS5cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJ1tUd2lsaW8uQ29ubmVjdGlvbiBpbnN0YW5jZV0nOyB9O1xuICAgICAgICBfdGhpcy5fZW1pdFdhcm5pbmcgPSBmdW5jdGlvbiAoZ3JvdXBQcmVmaXgsIHdhcm5pbmdOYW1lLCB0aHJlc2hvbGQsIHZhbHVlLCB3YXNDbGVhcmVkLCB3YXJuaW5nRGF0YSkge1xuICAgICAgICAgICAgdmFyIGdyb3VwU3VmZml4ID0gd2FzQ2xlYXJlZCA/ICctY2xlYXJlZCcgOiAnLXJhaXNlZCc7XG4gICAgICAgICAgICB2YXIgZ3JvdXBOYW1lID0gZ3JvdXBQcmVmaXggKyBcIndhcm5pbmdcIiArIGdyb3VwU3VmZml4O1xuICAgICAgICAgICAgLy8gSWdub3JlIGNvbnN0YW50IGlucHV0IGlmIHRoZSBDb25uZWN0aW9uIGlzIG11dGVkIChFeHBlY3RlZClcbiAgICAgICAgICAgIGlmICh3YXJuaW5nTmFtZSA9PT0gJ2NvbnN0YW50LWF1ZGlvLWlucHV0LWxldmVsJyAmJiBfdGhpcy5pc011dGVkKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbGV2ZWwgPSB3YXNDbGVhcmVkID8gJ2luZm8nIDogJ3dhcm5pbmcnO1xuICAgICAgICAgICAgLy8gQXZvaWQgdGhyb3dpbmcgZmFsc2UgcG9zaXRpdmVzIGFzIHdhcm5pbmdzIHVudGlsIHdlIHJlZmFjdG9yIHZvbHVtZSBtZXRyaWNzXG4gICAgICAgICAgICBpZiAod2FybmluZ05hbWUgPT09ICdjb25zdGFudC1hdWRpby1vdXRwdXQtbGV2ZWwnKSB7XG4gICAgICAgICAgICAgICAgbGV2ZWwgPSAnaW5mbyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcGF5bG9hZERhdGEgPSB7IHRocmVzaG9sZDogdGhyZXNob2xkIH07XG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICBwYXlsb2FkRGF0YS52YWx1ZXMgPSB2YWx1ZS5tYXAoZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsICogMTAwKSAvIDEwMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwYXlsb2FkRGF0YS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLl9wdWJsaXNoZXIucG9zdChsZXZlbCwgZ3JvdXBOYW1lLCB3YXJuaW5nTmFtZSwgeyBkYXRhOiBwYXlsb2FkRGF0YSB9LCBfdGhpcyk7XG4gICAgICAgICAgICBpZiAod2FybmluZ05hbWUgIT09ICdjb25zdGFudC1hdWRpby1vdXRwdXQtbGV2ZWwnKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVtaXROYW1lID0gd2FzQ2xlYXJlZCA/ICd3YXJuaW5nLWNsZWFyZWQnIDogJ3dhcm5pbmcnO1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoZW1pdE5hbWUsIHdhcm5pbmdOYW1lLCB3YXJuaW5nRGF0YSAmJiAhd2FzQ2xlYXJlZCA/IHdhcm5pbmdEYXRhIDogbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsZWQgd2hlbiB0aGUge0BsaW5rIENvbm5lY3Rpb259IGlzIGFuc3dlcmVkLlxuICAgICAgICAgKiBAcGFyYW0gcGF5bG9hZFxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuX29uQW5zd2VyID0gZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAgICAgICAgICAgIC8vIGFuc3dlck9uQnJpZGdlPWZhbHNlIHdpbGwgc2VuZCBhIDE4MyB3aGljaCB3ZSBuZWVkIHRvIGNhdGNoIGluIF9vblJpbmdpbmcgd2hlblxuICAgICAgICAgICAgLy8gdGhlIGVuYWJsZVJpbmdpbmdTdGF0ZSBmbGFnIGlzIGRpc2FibGVkLiBJbiB0aGF0IGNhc2UsIHdlIHdpbGwgcmVjZWl2ZSBhIDIwMCBhZnRlclxuICAgICAgICAgICAgLy8gdGhlIGNhbGxlZSBhY2NlcHRzIHRoZSBjYWxsIGZpcmluZyBhIHNlY29uZCBgYWNjZXB0YCBldmVudCBpZiB3ZSBkb24ndFxuICAgICAgICAgICAgLy8gc2hvcnQgY2lyY3VpdCBoZXJlLlxuICAgICAgICAgICAgaWYgKF90aGlzLl9pc0Fuc3dlcmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuX3NldENhbGxTaWQocGF5bG9hZCk7XG4gICAgICAgICAgICBfdGhpcy5faXNBbnN3ZXJlZCA9IHRydWU7XG4gICAgICAgICAgICBfdGhpcy5fbWF5YmVUcmFuc2l0aW9uVG9PcGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsZWQgd2hlbiB0aGUge0BsaW5rIENvbm5lY3Rpb259IGlzIGNhbmNlbGxlZC5cbiAgICAgICAgICogQHBhcmFtIHBheWxvYWRcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLl9vbkNhbmNlbCA9IGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICAgICAgICAvLyAocnJvd2xhbmQpIElzIHRoaXMgY2hlY2sgbmVjZXNzYXJ5PyBWZXJpZnksIGFuZCBpZiBzbyBtb3ZlIHRvIHBzdHJlYW0gLyBWU1AgbW9kdWxlLlxuICAgICAgICAgICAgdmFyIGNhbGxzaWQgPSBwYXlsb2FkLmNhbGxzaWQ7XG4gICAgICAgICAgICBpZiAoX3RoaXMucGFyYW1ldGVycy5DYWxsU2lkID09PSBjYWxsc2lkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2lzQ2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfdGhpcy5fcHVibGlzaGVyLmluZm8oJ2Nvbm5lY3Rpb24nLCAnY2FuY2VsJywgbnVsbCwgX3RoaXMpO1xuICAgICAgICAgICAgICAgIF90aGlzLl9jbGVhbnVwRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5tZWRpYVN0cmVhbS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIF90aGlzLl9zdGF0dXMgPSBDb25uZWN0aW9uLlN0YXRlLkNsb3NlZDtcbiAgICAgICAgICAgICAgICBfdGhpcy5lbWl0KCdjYW5jZWwnKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5wc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdjYW5jZWwnLCBfdGhpcy5fb25DYW5jZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsbGVkIHdoZW4gdGhlIHtAbGluayBDb25uZWN0aW9ufSBpcyBodW5nIHVwLlxuICAgICAgICAgKiBAcGFyYW0gcGF5bG9hZFxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuX29uSGFuZ3VwID0gZnVuY3Rpb24gKHBheWxvYWQpIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogIHNlZSBpZiBjYWxsc2lkIHBhc3NlZCBpbiBtZXNzYWdlIG1hdGNoZXMgZWl0aGVyIGNhbGxzaWQgb3Igb3V0Ym91bmQgaWRcbiAgICAgICAgICAgICAqICBjb25uZWN0aW9uIHNob3VsZCBhbHdheXMgaGF2ZSBlaXRoZXIgY2FsbHNpZCBvciBvdXRib3VuZCBpZFxuICAgICAgICAgICAgICogIGlmIG5vIGNhbGxzaWQgcGFzc2VkIGhhbmd1cCBhbnl3YXlzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGlmIChwYXlsb2FkLmNhbGxzaWQgJiYgKF90aGlzLnBhcmFtZXRlcnMuQ2FsbFNpZCB8fCBfdGhpcy5vdXRib3VuZENvbm5lY3Rpb25JZCkpIHtcbiAgICAgICAgICAgICAgICBpZiAocGF5bG9hZC5jYWxsc2lkICE9PSBfdGhpcy5wYXJhbWV0ZXJzLkNhbGxTaWRcbiAgICAgICAgICAgICAgICAgICAgJiYgcGF5bG9hZC5jYWxsc2lkICE9PSBfdGhpcy5vdXRib3VuZENvbm5lY3Rpb25JZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocGF5bG9hZC5jYWxsc2lkKSB7XG4gICAgICAgICAgICAgICAgLy8gaGFuZ3VwIGlzIGZvciBhbm90aGVyIGNvbm5lY3Rpb25cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5fbG9nLmluZm8oJ1JlY2VpdmVkIEhBTkdVUCBmcm9tIGdhdGV3YXknKTtcbiAgICAgICAgICAgIGlmIChwYXlsb2FkLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVycm9yID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiBwYXlsb2FkLmVycm9yLmNvZGUgfHwgMzEwMDAsXG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb246IF90aGlzLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBwYXlsb2FkLmVycm9yLm1lc3NhZ2UgfHwgJ0Vycm9yIHNlbnQgZnJvbSBnYXRld2F5IGluIEhBTkdVUCcsXG4gICAgICAgICAgICAgICAgICAgIHR3aWxpb0Vycm9yOiBuZXcgZXJyb3JzXzEuR2VuZXJhbEVycm9ycy5Db25uZWN0aW9uRXJyb3IoKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIF90aGlzLl9sb2cuZXJyb3IoJ1JlY2VpdmVkIGFuIGVycm9yIGZyb20gdGhlIGdhdGV3YXk6JywgZXJyb3IpO1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuc2VuZEhhbmd1cCA9IGZhbHNlO1xuICAgICAgICAgICAgX3RoaXMuX3B1Ymxpc2hlci5pbmZvKCdjb25uZWN0aW9uJywgJ2Rpc2Nvbm5lY3RlZC1ieS1yZW1vdGUnLCBudWxsLCBfdGhpcyk7XG4gICAgICAgICAgICBfdGhpcy5fZGlzY29ubmVjdChudWxsLCB0cnVlKTtcbiAgICAgICAgICAgIF90aGlzLl9jbGVhbnVwRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGxlZCB3aGVuIHRoZXJlIGlzIGEgbWVkaWEgZmFpbHVyZS5cbiAgICAgICAgICogTWFuYWdlcyBhbGwgbWVkaWEtcmVsYXRlZCBzdGF0ZXMgYW5kIHRha2VzIGFjdGlvbiBiYXNlIG9uIHRoZSBzdGF0ZXNcbiAgICAgICAgICogQHBhcmFtIHR5cGUgLSBUeXBlIG9mIG1lZGlhIGZhaWx1cmVcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLl9vbk1lZGlhRmFpbHVyZSA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBDb25uZWN0aW9uLk1lZGlhRmFpbHVyZSwgQ29ubmVjdGlvbkRpc2Nvbm5lY3RlZCA9IF9hLkNvbm5lY3Rpb25EaXNjb25uZWN0ZWQsIENvbm5lY3Rpb25GYWlsZWQgPSBfYS5Db25uZWN0aW9uRmFpbGVkLCBJY2VHYXRoZXJpbmdGYWlsZWQgPSBfYS5JY2VHYXRoZXJpbmdGYWlsZWQsIExvd0J5dGVzID0gX2EuTG93Qnl0ZXM7XG4gICAgICAgICAgICAvLyBUaGVzZSB0eXBlcyBzaWduaWZpZXMgdGhlIGVuZCBvZiBhIHNpbmdsZSBJQ0UgY3ljbGVcbiAgICAgICAgICAgIHZhciBpc0VuZE9mSWNlQ3ljbGUgPSB0eXBlID09PSBDb25uZWN0aW9uRmFpbGVkIHx8IHR5cGUgPT09IEljZUdhdGhlcmluZ0ZhaWxlZDtcbiAgICAgICAgICAgIC8vIERlZmF1bHQgYmVoYXZpb3Igb24gaWNlIGZhaWx1cmVzIHdpdGggZGlzYWJsZWQgaWNlIHJlc3RhcnQuXG4gICAgICAgICAgICBpZiAoKCFfdGhpcy5vcHRpb25zLmVuYWJsZUljZVJlc3RhcnQgJiYgaXNFbmRPZkljZUN5Y2xlKVxuICAgICAgICAgICAgICAgIC8vIEFsbCBicm93c2VycyBleGNlcHQgY2hyb21lIGRvZXNuJ3QgdXBkYXRlIHBjLmljZUNvbm5lY3Rpb25TdGF0ZSBhbmQgcGMuY29ubmVjdGlvblN0YXRlXG4gICAgICAgICAgICAgICAgLy8gYWZ0ZXIgaXNzdWluZyBhbiBJQ0UgUmVzdGFydCwgd2hpY2ggd2UgdXNlIHRvIGRldGVybWluZSBpZiBJQ0UgUmVzdGFydCBpcyBjb21wbGV0ZS5cbiAgICAgICAgICAgICAgICAvLyBTaW5jZSB3ZSBjYW5ub3QgZGV0ZWN0IGlmIElDRSBSZXN0YXJ0IGlzIGNvbXBsZXRlLCB3ZSB3aWxsIG5vdCByZXRyeS5cbiAgICAgICAgICAgICAgICB8fCAoIXV0aWxfMS5pc0Nocm9tZSh3aW5kb3csIHdpbmRvdy5uYXZpZ2F0b3IpICYmIHR5cGUgPT09IENvbm5lY3Rpb25GYWlsZWQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLm1lZGlhU3RyZWFtLm9uZXJyb3IoTUVESUFfRElTQ09OTkVDVF9FUlJPUik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZ25vcmUgYW55IG90aGVyIHR5cGUgb2YgbWVkaWEgZmFpbHVyZSBpZiBpY2UgcmVzdGFydCBpcyBkaXNhYmxlZFxuICAgICAgICAgICAgaWYgKCFfdGhpcy5vcHRpb25zLmVuYWJsZUljZVJlc3RhcnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZ25vcmUgc3Vic2VxdWVudCByZXF1ZXN0cyBpZiBpY2UgcmVzdGFydCBpcyBpbiBwcm9ncmVzc1xuICAgICAgICAgICAgaWYgKF90aGlzLl9zdGF0dXMgPT09IENvbm5lY3Rpb24uU3RhdGUuUmVjb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIHJldHJ5LiBQcmV2aW91cyBJQ0UgUmVzdGFydCBmYWlsZWRcbiAgICAgICAgICAgICAgICBpZiAoaXNFbmRPZkljZUN5Y2xlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGFscmVhZHkgZXhjZWVkZWQgbWF4IHJldHJ5IHRpbWUuXG4gICAgICAgICAgICAgICAgICAgIGlmIChEYXRlLm5vdygpIC0gX3RoaXMuX21lZGlhUmVjb25uZWN0U3RhcnRUaW1lID4gQkFDS09GRl9DT05GSUcubWF4RGVsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9sb2cuaW5mbygnRXhjZWVkZWQgbWF4IElDRSByZXRyaWVzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMubWVkaWFTdHJlYW0ub25lcnJvcihNRURJQV9ESVNDT05ORUNUX0VSUk9SKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBJc3N1ZSBJQ0UgcmVzdGFydCB3aXRoIGJhY2tvZmZcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX21lZGlhUmVjb25uZWN0QmFja29mZi5iYWNrb2ZmKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBwYyA9IF90aGlzLm1lZGlhU3RyZWFtLnZlcnNpb24ucGM7XG4gICAgICAgICAgICB2YXIgaXNJY2VEaXNjb25uZWN0ZWQgPSBwYyAmJiBwYy5pY2VDb25uZWN0aW9uU3RhdGUgPT09ICdkaXNjb25uZWN0ZWQnO1xuICAgICAgICAgICAgdmFyIGhhc0xvd0J5dGVzV2FybmluZyA9IF90aGlzLl9tb25pdG9yLmhhc0FjdGl2ZVdhcm5pbmcoJ2J5dGVzU2VudCcsICdtaW4nKVxuICAgICAgICAgICAgICAgIHx8IF90aGlzLl9tb25pdG9yLmhhc0FjdGl2ZVdhcm5pbmcoJ2J5dGVzUmVjZWl2ZWQnLCAnbWluJyk7XG4gICAgICAgICAgICAvLyBPbmx5IGNlcnRhaW4gY29uZGl0aW9ucyBjYW4gdHJpZ2dlciBtZWRpYSByZWNvbm5lY3Rpb25cbiAgICAgICAgICAgIGlmICgodHlwZSA9PT0gTG93Qnl0ZXMgJiYgaXNJY2VEaXNjb25uZWN0ZWQpXG4gICAgICAgICAgICAgICAgfHwgKHR5cGUgPT09IENvbm5lY3Rpb25EaXNjb25uZWN0ZWQgJiYgaGFzTG93Qnl0ZXNXYXJuaW5nKVxuICAgICAgICAgICAgICAgIHx8IGlzRW5kT2ZJY2VDeWNsZSkge1xuICAgICAgICAgICAgICAgIHZhciBtZWRpYVJlY29ubmVjdGlvbkVycm9yID0ge1xuICAgICAgICAgICAgICAgICAgICBjb2RlOiA1MzQwNSxcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ01lZGlhIGNvbm5lY3Rpb24gZmFpbGVkLicsXG4gICAgICAgICAgICAgICAgICAgIHR3aWxpb0Vycm9yOiBuZXcgZXJyb3JzXzEuTWVkaWFFcnJvcnMuQ29ubmVjdGlvbkVycm9yKCksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBfdGhpcy5fbG9nLndhcm4oJ0lDRSBDb25uZWN0aW9uIGRpc2Nvbm5lY3RlZC4nKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5fcHVibGlzaGVyLndhcm4oJ2Nvbm5lY3Rpb24nLCAnZXJyb3InLCBtZWRpYVJlY29ubmVjdGlvbkVycm9yLCBfdGhpcyk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3B1Ymxpc2hlci5pbmZvKCdjb25uZWN0aW9uJywgJ3JlY29ubmVjdGluZycsIG51bGwsIF90aGlzKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5fbWVkaWFSZWNvbm5lY3RTdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICAgICAgICAgIF90aGlzLl9zdGF0dXMgPSBDb25uZWN0aW9uLlN0YXRlLlJlY29ubmVjdGluZztcbiAgICAgICAgICAgICAgICBfdGhpcy5fbWVkaWFSZWNvbm5lY3RCYWNrb2ZmLnJlc2V0KCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX21lZGlhUmVjb25uZWN0QmFja29mZi5iYWNrb2ZmKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdCgncmVjb25uZWN0aW5nJywgbWVkaWFSZWNvbm5lY3Rpb25FcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWxsZWQgd2hlbiBtZWRpYSBjb25uZWN0aW9uIGlzIHJlc3RvcmVkXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5fb25NZWRpYVJlY29ubmVjdGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gT25seSB0cmlnZ2VyIG9uY2UuXG4gICAgICAgICAgICAvLyBUaGlzIGNhbiB0cmlnZ2VyIG9uIHBjLm9uSWNlQ29ubmVjdGlvbkNoYW5nZSBhbmQgcGMub25Db25uZWN0aW9uQ2hhbmdlLlxuICAgICAgICAgICAgaWYgKF90aGlzLl9zdGF0dXMgIT09IENvbm5lY3Rpb24uU3RhdGUuUmVjb25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuX2xvZy5pbmZvKCdJQ0UgQ29ubmVjdGlvbiByZWVzdGFibGlzaGVkLicpO1xuICAgICAgICAgICAgX3RoaXMuX3B1Ymxpc2hlci5pbmZvKCdjb25uZWN0aW9uJywgJ3JlY29ubmVjdGVkJywgbnVsbCwgX3RoaXMpO1xuICAgICAgICAgICAgX3RoaXMuX3N0YXR1cyA9IENvbm5lY3Rpb24uU3RhdGUuT3BlbjtcbiAgICAgICAgICAgIF90aGlzLmVtaXQoJ3JlY29ubmVjdGVkJyk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGVuIHdlIGdldCBhIFJJTkdJTkcgc2lnbmFsIGZyb20gUFN0cmVhbSwgdXBkYXRlIHRoZSB7QGxpbmsgQ29ubmVjdGlvbn0gc3RhdHVzLlxuICAgICAgICAgKiBAcGFyYW0gcGF5bG9hZFxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuX29uUmluZ2luZyA9IGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICAgICAgICBfdGhpcy5fc2V0Q2FsbFNpZChwYXlsb2FkKTtcbiAgICAgICAgICAgIC8vIElmIHdlJ3JlIG5vdCBpbiAnY29ubmVjdGluZycgb3IgJ3JpbmdpbmcnIHN0YXRlLCB0aGlzIGV2ZW50IHdhcyByZWNlaXZlZCBvdXQgb2Ygb3JkZXIuXG4gICAgICAgICAgICBpZiAoX3RoaXMuX3N0YXR1cyAhPT0gQ29ubmVjdGlvbi5TdGF0ZS5Db25uZWN0aW5nICYmIF90aGlzLl9zdGF0dXMgIT09IENvbm5lY3Rpb24uU3RhdGUuUmluZ2luZykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBoYXNFYXJseU1lZGlhID0gISFwYXlsb2FkLnNkcDtcbiAgICAgICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmVuYWJsZVJpbmdpbmdTdGF0ZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9zdGF0dXMgPSBDb25uZWN0aW9uLlN0YXRlLlJpbmdpbmc7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3B1Ymxpc2hlci5pbmZvKCdjb25uZWN0aW9uJywgJ291dGdvaW5nLXJpbmdpbmcnLCB7IGhhc0Vhcmx5TWVkaWE6IGhhc0Vhcmx5TWVkaWEgfSwgX3RoaXMpO1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoJ3JpbmdpbmcnLCBoYXNFYXJseU1lZGlhKTtcbiAgICAgICAgICAgICAgICAvLyBhbnN3ZXJPbkJyaWRnZT1mYWxzZSB3aWxsIHNlbmQgYSAxODMsIHdoaWNoIHdlIG5lZWQgdG8gaW50ZXJwcmV0IGFzIGBhbnN3ZXJgIHdoZW5cbiAgICAgICAgICAgICAgICAvLyB0aGUgZW5hYmxlUmluZ2luZ1N0YXRlIGZsYWcgaXMgZGlzYWJsZWQgaW4gb3JkZXIgdG8gbWFpbnRhaW4gYSBub24tYnJlYWtpbmcgQVBJIGZyb20gMS40LjI0XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChoYXNFYXJseU1lZGlhKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX29uQW5zd2VyKHBheWxvYWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQ2FsbGVkIGVhY2ggdGltZSBTdGF0c01vbml0b3IgZW1pdHMgYSBzYW1wbGUuXG4gICAgICAgICAqIEVtaXRzIHN0YXRzIGV2ZW50IGFuZCBiYXRjaGVzIHRoZSBjYWxsIHN0YXRzIG1ldHJpY3MgYW5kIHNlbmRzIHRoZW0gdG8gSW5zaWdodHMuXG4gICAgICAgICAqIEBwYXJhbSBzYW1wbGVcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLl9vblJUQ1NhbXBsZSA9IGZ1bmN0aW9uIChzYW1wbGUpIHtcbiAgICAgICAgICAgIHZhciBjYWxsTWV0cmljcyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBzYW1wbGUpLCB7IGlucHV0Vm9sdW1lOiBfdGhpcy5fbGF0ZXN0SW5wdXRWb2x1bWUsIG91dHB1dFZvbHVtZTogX3RoaXMuX2xhdGVzdE91dHB1dFZvbHVtZSB9KTtcbiAgICAgICAgICAgIF90aGlzLl9jb2RlYyA9IGNhbGxNZXRyaWNzLmNvZGVjTmFtZTtcbiAgICAgICAgICAgIF90aGlzLl9tZXRyaWNzU2FtcGxlcy5wdXNoKGNhbGxNZXRyaWNzKTtcbiAgICAgICAgICAgIGlmIChfdGhpcy5fbWV0cmljc1NhbXBsZXMubGVuZ3RoID49IE1FVFJJQ1NfQkFUQ0hfU0laRSkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9wdWJsaXNoTWV0cmljcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX3RoaXMuZW1pdCgnc2FtcGxlJywgc2FtcGxlKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhbGxlZCB3aGVuIHdlIHJlY2VpdmUgYSB0cmFuc3BvcnRDbG9zZSBldmVudCBmcm9tIHBzdHJlYW0uXG4gICAgICAgICAqIFJlLWVtaXRzIHRoZSBldmVudC5cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLl9vblRyYW5zcG9ydENsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX2xvZy5lcnJvcignUmVjZWl2ZWQgdHJhbnNwb3J0Q2xvc2UgZnJvbSBwc3RyZWFtJyk7XG4gICAgICAgICAgICBfdGhpcy5lbWl0KCd0cmFuc3BvcnRDbG9zZScpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmUtZW1pdCBhbiBTdGF0c01vbml0b3Igd2FybmluZyBhcyBhIHtAbGluayBDb25uZWN0aW9ufS53YXJuaW5nIG9yIC53YXJuaW5nLWNsZWFyZWQgZXZlbnQuXG4gICAgICAgICAqIEBwYXJhbSB3YXJuaW5nRGF0YVxuICAgICAgICAgKiBAcGFyYW0gd2FzQ2xlYXJlZCAtIFdoZXRoZXIgdGhpcyBpcyBhIC1jbGVhcmVkIG9yIC1yYWlzZWQgZXZlbnQuXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5fcmVlbWl0V2FybmluZyA9IGZ1bmN0aW9uICh3YXJuaW5nRGF0YSwgd2FzQ2xlYXJlZCkge1xuICAgICAgICAgICAgdmFyIGdyb3VwUHJlZml4ID0gL15hdWRpby8udGVzdCh3YXJuaW5nRGF0YS5uYW1lKSA/XG4gICAgICAgICAgICAgICAgJ2F1ZGlvLWxldmVsLScgOiAnbmV0d29yay1xdWFsaXR5LSc7XG4gICAgICAgICAgICB2YXIgd2FybmluZ1ByZWZpeCA9IFdBUk5JTkdfUFJFRklYRVNbd2FybmluZ0RhdGEudGhyZXNob2xkLm5hbWVdO1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBOT1RFOiBUaGVyZSBhcmUgdHdvIFwicGFja2V0LWxvc3NcIiB3YXJuaW5nczogYGhpZ2gtcGFja2V0LWxvc3NgIGFuZFxuICAgICAgICAgICAgICogYGhpZ2gtcGFja2V0cy1sb3N0LWZyYWN0aW9uYCwgc28gaW4gdGhpcyBjYXNlIHdlIG5lZWQgdG8gdXNlIGEgZGlmZmVyZW50XG4gICAgICAgICAgICAgKiBgV0FSTklOR19OQU1FYCBtYXBwaW5nLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgd2FybmluZ05hbWU7XG4gICAgICAgICAgICBpZiAod2FybmluZ0RhdGEubmFtZSBpbiBNVUxUSVBMRV9USFJFU0hPTERfV0FSTklOR19OQU1FUykge1xuICAgICAgICAgICAgICAgIHdhcm5pbmdOYW1lID0gTVVMVElQTEVfVEhSRVNIT0xEX1dBUk5JTkdfTkFNRVNbd2FybmluZ0RhdGEubmFtZV1bd2FybmluZ0RhdGEudGhyZXNob2xkLm5hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAod2FybmluZ0RhdGEubmFtZSBpbiBXQVJOSU5HX05BTUVTKSB7XG4gICAgICAgICAgICAgICAgd2FybmluZ05hbWUgPSBXQVJOSU5HX05BTUVTW3dhcm5pbmdEYXRhLm5hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHdhcm5pbmcgPSB3YXJuaW5nUHJlZml4ICsgd2FybmluZ05hbWU7XG4gICAgICAgICAgICBfdGhpcy5fZW1pdFdhcm5pbmcoZ3JvdXBQcmVmaXgsIHdhcm5pbmcsIHdhcm5pbmdEYXRhLnRocmVzaG9sZC52YWx1ZSwgd2FybmluZ0RhdGEudmFsdWVzIHx8IHdhcm5pbmdEYXRhLnZhbHVlLCB3YXNDbGVhcmVkLCB3YXJuaW5nRGF0YSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZS1lbWl0IGFuIFN0YXRzTW9uaXRvciB3YXJuaW5nLWNsZWFyZWQgYXMgYSAud2FybmluZy1jbGVhcmVkIGV2ZW50LlxuICAgICAgICAgKiBAcGFyYW0gd2FybmluZ0RhdGFcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLl9yZWVtaXRXYXJuaW5nQ2xlYXJlZCA9IGZ1bmN0aW9uICh3YXJuaW5nRGF0YSkge1xuICAgICAgICAgICAgX3RoaXMuX3JlZW1pdFdhcm5pbmcod2FybmluZ0RhdGEsIHRydWUpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5faXNVbmlmaWVkUGxhbkRlZmF1bHQgPSBjb25maWcuaXNVbmlmaWVkUGxhbkRlZmF1bHQ7XG4gICAgICAgIF90aGlzLl9zb3VuZGNhY2hlID0gY29uZmlnLnNvdW5kY2FjaGU7XG4gICAgICAgIF90aGlzLm1lc3NhZ2UgPSBvcHRpb25zICYmIG9wdGlvbnMudHdpbWxQYXJhbXMgfHwge307XG4gICAgICAgIF90aGlzLmN1c3RvbVBhcmFtZXRlcnMgPSBuZXcgTWFwKE9iamVjdC5lbnRyaWVzKF90aGlzLm1lc3NhZ2UpLm1hcChmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBfYVswXSwgdmFsID0gX2FbMV07XG4gICAgICAgICAgICByZXR1cm4gW2tleSwgU3RyaW5nKHZhbCldO1xuICAgICAgICB9KSk7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oX3RoaXMub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIGlmIChfdGhpcy5vcHRpb25zLmNhbGxQYXJhbWV0ZXJzKSB7XG4gICAgICAgICAgICBfdGhpcy5wYXJhbWV0ZXJzID0gX3RoaXMub3B0aW9ucy5jYWxsUGFyYW1ldGVycztcbiAgICAgICAgfVxuICAgICAgICBfdGhpcy5fZGlyZWN0aW9uID0gX3RoaXMucGFyYW1ldGVycy5DYWxsU2lkID8gQ29ubmVjdGlvbi5DYWxsRGlyZWN0aW9uLkluY29taW5nIDogQ29ubmVjdGlvbi5DYWxsRGlyZWN0aW9uLk91dGdvaW5nO1xuICAgICAgICBpZiAoX3RoaXMuX2RpcmVjdGlvbiA9PT0gQ29ubmVjdGlvbi5DYWxsRGlyZWN0aW9uLkluY29taW5nICYmIF90aGlzLnBhcmFtZXRlcnMpIHtcbiAgICAgICAgICAgIF90aGlzLmNhbGxlckluZm8gPSBfdGhpcy5wYXJhbWV0ZXJzLlN0aXJTdGF0dXNcbiAgICAgICAgICAgICAgICA/IHsgaXNWZXJpZmllZDogX3RoaXMucGFyYW1ldGVycy5TdGlyU3RhdHVzID09PSAnVE4tVmFsaWRhdGlvbi1QYXNzZWQtQScgfVxuICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLmNhbGxlckluZm8gPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLl9tZWRpYVJlY29ubmVjdEJhY2tvZmYgPSBCYWNrb2ZmLmV4cG9uZW50aWFsKEJBQ0tPRkZfQ09ORklHKTtcbiAgICAgICAgX3RoaXMuX21lZGlhUmVjb25uZWN0QmFja29mZi5vbigncmVhZHknLCBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5tZWRpYVN0cmVhbS5pY2VSZXN0YXJ0KCk7IH0pO1xuICAgICAgICAvLyB0ZW1wb3JhcnkgY2FsbCBzaWQgdG8gYmUgdXNlZCBmb3Igb3V0Z29pbmcgY2FsbHNcbiAgICAgICAgX3RoaXMub3V0Ym91bmRDb25uZWN0aW9uSWQgPSBnZW5lcmF0ZVRlbXBDYWxsU2lkKCk7XG4gICAgICAgIHZhciBwdWJsaXNoZXIgPSBfdGhpcy5fcHVibGlzaGVyID0gY29uZmlnLnB1Ymxpc2hlcjtcbiAgICAgICAgaWYgKF90aGlzLl9kaXJlY3Rpb24gPT09IENvbm5lY3Rpb24uQ2FsbERpcmVjdGlvbi5JbmNvbWluZykge1xuICAgICAgICAgICAgcHVibGlzaGVyLmluZm8oJ2Nvbm5lY3Rpb24nLCAnaW5jb21pbmcnLCBudWxsLCBfdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwdWJsaXNoZXIuaW5mbygnY29ubmVjdGlvbicsICdvdXRnb2luZycsIHsgcHJlZmxpZ2h0OiBfdGhpcy5vcHRpb25zLnByZWZsaWdodCB9LCBfdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1vbml0b3IgPSBfdGhpcy5fbW9uaXRvciA9IG5ldyAoX3RoaXMub3B0aW9ucy5TdGF0c01vbml0b3IgfHwgc3RhdHNNb25pdG9yXzEuZGVmYXVsdCkoKTtcbiAgICAgICAgbW9uaXRvci5vbignc2FtcGxlJywgX3RoaXMuX29uUlRDU2FtcGxlKTtcbiAgICAgICAgLy8gRmlyc3QgMjAgc2Vjb25kcyBvciBzbyBhcmUgY2hvcHB5LCBzbyBsZXQncyBub3QgYm90aGVyIHdpdGggdGhlc2Ugd2FybmluZ3MuXG4gICAgICAgIG1vbml0b3IuZGlzYWJsZVdhcm5pbmdzKCk7XG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gbW9uaXRvci5lbmFibGVXYXJuaW5ncygpOyB9LCBNRVRSSUNTX0RFTEFZKTtcbiAgICAgICAgbW9uaXRvci5vbignd2FybmluZycsIGZ1bmN0aW9uIChkYXRhLCB3YXNDbGVhcmVkKSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5uYW1lID09PSAnYnl0ZXNTZW50JyB8fCBkYXRhLm5hbWUgPT09ICdieXRlc1JlY2VpdmVkJykge1xuICAgICAgICAgICAgICAgIF90aGlzLl9vbk1lZGlhRmFpbHVyZShDb25uZWN0aW9uLk1lZGlhRmFpbHVyZS5Mb3dCeXRlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5fcmVlbWl0V2FybmluZyhkYXRhLCB3YXNDbGVhcmVkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIG1vbml0b3Iub24oJ3dhcm5pbmctY2xlYXJlZCcsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICBfdGhpcy5fcmVlbWl0V2FybmluZ0NsZWFyZWQoZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpcy5tZWRpYVN0cmVhbSA9IG5ldyAoX3RoaXMub3B0aW9ucy5NZWRpYVN0cmVhbSB8fCBfdGhpcy5vcHRpb25zLm1lZGlhU3RyZWFtRmFjdG9yeSkoY29uZmlnLmF1ZGlvSGVscGVyLCBjb25maWcucHN0cmVhbSwgY29uZmlnLmdldFVzZXJNZWRpYSwge1xuICAgICAgICAgICAgY29kZWNQcmVmZXJlbmNlczogX3RoaXMub3B0aW9ucy5jb2RlY1ByZWZlcmVuY2VzLFxuICAgICAgICAgICAgZHNjcDogX3RoaXMub3B0aW9ucy5kc2NwLFxuICAgICAgICAgICAgZW5hYmxlSWNlUmVzdGFydDogX3RoaXMub3B0aW9ucy5lbmFibGVJY2VSZXN0YXJ0LFxuICAgICAgICAgICAgZm9yY2VBZ2dyZXNzaXZlSWNlTm9taW5hdGlvbjogX3RoaXMub3B0aW9ucy5mb3JjZUFnZ3Jlc3NpdmVJY2VOb21pbmF0aW9uLFxuICAgICAgICAgICAgaXNVbmlmaWVkUGxhbjogX3RoaXMuX2lzVW5pZmllZFBsYW5EZWZhdWx0LFxuICAgICAgICAgICAgbWF4QXZlcmFnZUJpdHJhdGU6IF90aGlzLm9wdGlvbnMubWF4QXZlcmFnZUJpdHJhdGUsXG4gICAgICAgICAgICBwcmVmbGlnaHQ6IF90aGlzLm9wdGlvbnMucHJlZmxpZ2h0LFxuICAgICAgICB9KTtcbiAgICAgICAgX3RoaXMub24oJ3ZvbHVtZScsIGZ1bmN0aW9uIChpbnB1dFZvbHVtZSwgb3V0cHV0Vm9sdW1lKSB7XG4gICAgICAgICAgICBfdGhpcy5faW5wdXRWb2x1bWVTdHJlYWsgPSBfdGhpcy5fY2hlY2tWb2x1bWUoaW5wdXRWb2x1bWUsIF90aGlzLl9pbnB1dFZvbHVtZVN0cmVhaywgX3RoaXMuX2xhdGVzdElucHV0Vm9sdW1lLCAnaW5wdXQnKTtcbiAgICAgICAgICAgIF90aGlzLl9vdXRwdXRWb2x1bWVTdHJlYWsgPSBfdGhpcy5fY2hlY2tWb2x1bWUob3V0cHV0Vm9sdW1lLCBfdGhpcy5fb3V0cHV0Vm9sdW1lU3RyZWFrLCBfdGhpcy5fbGF0ZXN0T3V0cHV0Vm9sdW1lLCAnb3V0cHV0Jyk7XG4gICAgICAgICAgICBfdGhpcy5fbGF0ZXN0SW5wdXRWb2x1bWUgPSBpbnB1dFZvbHVtZTtcbiAgICAgICAgICAgIF90aGlzLl9sYXRlc3RPdXRwdXRWb2x1bWUgPSBvdXRwdXRWb2x1bWU7XG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpcy5tZWRpYVN0cmVhbS5vbnZvbHVtZSA9IGZ1bmN0aW9uIChpbnB1dFZvbHVtZSwgb3V0cHV0Vm9sdW1lLCBpbnRlcm5hbElucHV0Vm9sdW1lLCBpbnRlcm5hbE91dHB1dFZvbHVtZSkge1xuICAgICAgICAgICAgLy8gKHJyb3dsYW5kKSBUaGVzZSB2YWx1ZXMgbW9jayB0aGUgMCAtPiAzMjc2NyBmb3JtYXQgdXNlZCBieSBsZWdhY3kgZ2V0U3RhdHMuIFdlIHNob3VsZCBsb29rIGludG9cbiAgICAgICAgICAgIC8vIG1pZ3JhdGluZyB0byBhIG5ld2VyIHN0YW5kYXJkLCBlaXRoZXIgMC4wIC0+IGxpbmVhciBvciAtMTI3IHRvIDAgaW4gZEIsIG1hdGNoaW5nIHRoZSByYW5nZVxuICAgICAgICAgICAgLy8gY2hvc2VuIGJlbG93LlxuICAgICAgICAgICAgbW9uaXRvci5hZGRWb2x1bWVzKChpbnRlcm5hbElucHV0Vm9sdW1lIC8gMjU1KSAqIDMyNzY3LCAoaW50ZXJuYWxPdXRwdXRWb2x1bWUgLyAyNTUpICogMzI3NjcpO1xuICAgICAgICAgICAgLy8gKHJyb3dsYW5kKSAwLjAgLT4gMS4wIGxpbmVhclxuICAgICAgICAgICAgX3RoaXMuZW1pdCgndm9sdW1lJywgaW5wdXRWb2x1bWUsIG91dHB1dFZvbHVtZSk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLm1lZGlhU3RyZWFtLm9uZHRsc3RyYW5zcG9ydHN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgICAgICB2YXIgbGV2ZWwgPSBzdGF0ZSA9PT0gJ2ZhaWxlZCcgPyAnZXJyb3InIDogJ2RlYnVnJztcbiAgICAgICAgICAgIF90aGlzLl9wdWJsaXNoZXIucG9zdChsZXZlbCwgJ2R0bHMtdHJhbnNwb3J0LXN0YXRlJywgc3RhdGUsIG51bGwsIF90aGlzKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMubWVkaWFTdHJlYW0ub25wY2Nvbm5lY3Rpb25zdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICAgICAgdmFyIGxldmVsID0gJ2RlYnVnJztcbiAgICAgICAgICAgIHZhciBkdGxzVHJhbnNwb3J0ID0gX3RoaXMubWVkaWFTdHJlYW0uZ2V0UlRDRHRsc1RyYW5zcG9ydCgpO1xuICAgICAgICAgICAgaWYgKHN0YXRlID09PSAnZmFpbGVkJykge1xuICAgICAgICAgICAgICAgIGxldmVsID0gZHRsc1RyYW5zcG9ydCAmJiBkdGxzVHJhbnNwb3J0LnN0YXRlID09PSAnZmFpbGVkJyA/ICdlcnJvcicgOiAnd2FybmluZyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5fcHVibGlzaGVyLnBvc3QobGV2ZWwsICdwYy1jb25uZWN0aW9uLXN0YXRlJywgc3RhdGUsIG51bGwsIF90aGlzKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMubWVkaWFTdHJlYW0ub25pY2VjYW5kaWRhdGUgPSBmdW5jdGlvbiAoY2FuZGlkYXRlKSB7XG4gICAgICAgICAgICB2YXIgcGF5bG9hZCA9IG5ldyBpY2VjYW5kaWRhdGVfMS5JY2VDYW5kaWRhdGUoY2FuZGlkYXRlKS50b1BheWxvYWQoKTtcbiAgICAgICAgICAgIF90aGlzLl9wdWJsaXNoZXIuZGVidWcoJ2ljZS1jYW5kaWRhdGUnLCAnaWNlLWNhbmRpZGF0ZScsIHBheWxvYWQsIF90aGlzKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMubWVkaWFTdHJlYW0ub25zZWxlY3RlZGNhbmRpZGF0ZXBhaXJjaGFuZ2UgPSBmdW5jdGlvbiAocGFpcikge1xuICAgICAgICAgICAgdmFyIGxvY2FsQ2FuZGlkYXRlUGF5bG9hZCA9IG5ldyBpY2VjYW5kaWRhdGVfMS5JY2VDYW5kaWRhdGUocGFpci5sb2NhbCkudG9QYXlsb2FkKCk7XG4gICAgICAgICAgICB2YXIgcmVtb3RlQ2FuZGlkYXRlUGF5bG9hZCA9IG5ldyBpY2VjYW5kaWRhdGVfMS5JY2VDYW5kaWRhdGUocGFpci5yZW1vdGUsIHRydWUpLnRvUGF5bG9hZCgpO1xuICAgICAgICAgICAgX3RoaXMuX3B1Ymxpc2hlci5kZWJ1ZygnaWNlLWNhbmRpZGF0ZScsICdzZWxlY3RlZC1pY2UtY2FuZGlkYXRlLXBhaXInLCB7XG4gICAgICAgICAgICAgICAgbG9jYWxfY2FuZGlkYXRlOiBsb2NhbENhbmRpZGF0ZVBheWxvYWQsXG4gICAgICAgICAgICAgICAgcmVtb3RlX2NhbmRpZGF0ZTogcmVtb3RlQ2FuZGlkYXRlUGF5bG9hZCxcbiAgICAgICAgICAgIH0sIF90aGlzKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMubWVkaWFTdHJlYW0ub25pY2Vjb25uZWN0aW9uc3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgICAgIHZhciBsZXZlbCA9IHN0YXRlID09PSAnZmFpbGVkJyA/ICdlcnJvcicgOiAnZGVidWcnO1xuICAgICAgICAgICAgX3RoaXMuX3B1Ymxpc2hlci5wb3N0KGxldmVsLCAnaWNlLWNvbm5lY3Rpb24tc3RhdGUnLCBzdGF0ZSwgbnVsbCwgX3RoaXMpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5tZWRpYVN0cmVhbS5vbmljZWdhdGhlcmluZ2ZhaWx1cmUgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgICAgX3RoaXMuX3B1Ymxpc2hlci53YXJuKCdpY2UtZ2F0aGVyaW5nLXN0YXRlJywgdHlwZSwgbnVsbCwgX3RoaXMpO1xuICAgICAgICAgICAgX3RoaXMuX29uTWVkaWFGYWlsdXJlKENvbm5lY3Rpb24uTWVkaWFGYWlsdXJlLkljZUdhdGhlcmluZ0ZhaWxlZCk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLm1lZGlhU3RyZWFtLm9uaWNlZ2F0aGVyaW5nc3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgICAgIF90aGlzLl9wdWJsaXNoZXIuZGVidWcoJ2ljZS1nYXRoZXJpbmctc3RhdGUnLCBzdGF0ZSwgbnVsbCwgX3RoaXMpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5tZWRpYVN0cmVhbS5vbnNpZ25hbGluZ3N0YXRlY2hhbmdlID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgICAgICBfdGhpcy5fcHVibGlzaGVyLmRlYnVnKCdzaWduYWxpbmctc3RhdGUnLCBzdGF0ZSwgbnVsbCwgX3RoaXMpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5tZWRpYVN0cmVhbS5vbmRpc2Nvbm5lY3RlZCA9IGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICAgICAgIF90aGlzLl9sb2cuaW5mbyhtc2cpO1xuICAgICAgICAgICAgX3RoaXMuX3B1Ymxpc2hlci53YXJuKCduZXR3b3JrLXF1YWxpdHktd2FybmluZy1yYWlzZWQnLCAnaWNlLWNvbm5lY3Rpdml0eS1sb3N0Jywge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1zZyxcbiAgICAgICAgICAgIH0sIF90aGlzKTtcbiAgICAgICAgICAgIF90aGlzLmVtaXQoJ3dhcm5pbmcnLCAnaWNlLWNvbm5lY3Rpdml0eS1sb3N0Jyk7XG4gICAgICAgICAgICBfdGhpcy5fb25NZWRpYUZhaWx1cmUoQ29ubmVjdGlvbi5NZWRpYUZhaWx1cmUuQ29ubmVjdGlvbkRpc2Nvbm5lY3RlZCk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLm1lZGlhU3RyZWFtLm9uZmFpbGVkID0gZnVuY3Rpb24gKG1zZykge1xuICAgICAgICAgICAgX3RoaXMuX29uTWVkaWFGYWlsdXJlKENvbm5lY3Rpb24uTWVkaWFGYWlsdXJlLkNvbm5lY3Rpb25GYWlsZWQpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5tZWRpYVN0cmVhbS5vbmNvbm5lY3RlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIEZpcnN0IHRpbWUgbWVkaWFTdHJlYW0gaXMgY29ubmVjdGVkLCBidXQgSUNFIEdhdGhlcmluZyBpc3N1ZWQgYW4gSUNFIHJlc3RhcnQgYW5kIHN1Y2NlZWRlZC5cbiAgICAgICAgICAgIGlmIChfdGhpcy5fc3RhdHVzID09PSBDb25uZWN0aW9uLlN0YXRlLlJlY29ubmVjdGluZykge1xuICAgICAgICAgICAgICAgIF90aGlzLl9vbk1lZGlhUmVjb25uZWN0ZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMubWVkaWFTdHJlYW0ub25yZWNvbm5lY3RlZCA9IGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICAgICAgIF90aGlzLl9sb2cuaW5mbyhtc2cpO1xuICAgICAgICAgICAgX3RoaXMuX3B1Ymxpc2hlci5pbmZvKCduZXR3b3JrLXF1YWxpdHktd2FybmluZy1jbGVhcmVkJywgJ2ljZS1jb25uZWN0aXZpdHktbG9zdCcsIHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBtc2csXG4gICAgICAgICAgICB9LCBfdGhpcyk7XG4gICAgICAgICAgICBfdGhpcy5lbWl0KCd3YXJuaW5nLWNsZWFyZWQnLCAnaWNlLWNvbm5lY3Rpdml0eS1sb3N0Jyk7XG4gICAgICAgICAgICBfdGhpcy5fb25NZWRpYVJlY29ubmVjdGVkKCk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLm1lZGlhU3RyZWFtLm9uZXJyb3IgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgaWYgKGUuZGlzY29ubmVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLl9kaXNjb25uZWN0KGUuaW5mbyAmJiBlLmluZm8ubWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSB7XG4gICAgICAgICAgICAgICAgY29kZTogZS5pbmZvLmNvZGUsXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbjogX3RoaXMsXG4gICAgICAgICAgICAgICAgaW5mbzogZS5pbmZvLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGUuaW5mby5tZXNzYWdlIHx8ICdFcnJvciB3aXRoIG1lZGlhc3RyZWFtJyxcbiAgICAgICAgICAgICAgICB0d2lsaW9FcnJvcjogZS5pbmZvLnR3aWxpb0Vycm9yLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIF90aGlzLl9sb2cuZXJyb3IoJ1JlY2VpdmVkIGFuIGVycm9yIGZyb20gTWVkaWFTdHJlYW06JywgZSk7XG4gICAgICAgICAgICBfdGhpcy5lbWl0KCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMubWVkaWFTdHJlYW0ub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gTk9URShtcm9iZXJ0cyk6IFdoaWxlIHRoaXMgbWF5IGhhdmUgYmVlbiBoYXBwZW5pbmcgaW4gcHJldmlvdXNcbiAgICAgICAgICAgIC8vIHZlcnNpb25zIG9mIENocm9tZSwgc2luY2UgQ2hyb21lIDQ1IHdlIGhhdmUgc2VlbiB0aGVcbiAgICAgICAgICAgIC8vIFBlZXJDb25uZWN0aW9uJ3Mgb25zaWduYWxpbmdzdGF0ZWNoYW5nZSBoYW5kbGVyIGludm9rZWQgbXVsdGlwbGVcbiAgICAgICAgICAgIC8vIHRpbWVzIGluIHRoZSBzYW1lIHNpZ25hbGluZ1N0YXRlICdzdGFibGUnLiBXaGVuIHRoaXMgaGFwcGVucywgd2VcbiAgICAgICAgICAgIC8vIGludm9rZSB0aGlzIG9ub3BlbiBmdW5jdGlvbi4gSWYgd2UgaW52b2tlIGl0IHR3aWNlIHdpdGhvdXQgY2hlY2tpbmdcbiAgICAgICAgICAgIC8vIGZvciBfc3RhdHVzICdvcGVuJywgd2UnZCBhY2NpZGVudGFsbHkgY2xvc2UgdGhlIFBlZXJDb25uZWN0aW9uLlxuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIFNlZSA8aHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC93ZWJydGMvaXNzdWVzL2RldGFpbD9pZD00OTk2Pi5cbiAgICAgICAgICAgIGlmIChfdGhpcy5fc3RhdHVzID09PSBDb25uZWN0aW9uLlN0YXRlLk9wZW4gfHwgX3RoaXMuX3N0YXR1cyA9PT0gQ29ubmVjdGlvbi5TdGF0ZS5SZWNvbm5lY3RpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChfdGhpcy5fc3RhdHVzID09PSBDb25uZWN0aW9uLlN0YXRlLlJpbmdpbmcgfHwgX3RoaXMuX3N0YXR1cyA9PT0gQ29ubmVjdGlvbi5TdGF0ZS5Db25uZWN0aW5nKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMubXV0ZShmYWxzZSk7XG4gICAgICAgICAgICAgICAgX3RoaXMuX21heWJlVHJhbnNpdGlvblRvT3BlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gY2FsbCB3YXMgcHJvYmFibHkgY2FuY2VsZWQgc29tZXRpbWUgYmVmb3JlIHRoaXNcbiAgICAgICAgICAgICAgICBfdGhpcy5tZWRpYVN0cmVhbS5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5tZWRpYVN0cmVhbS5vbmNsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX3N0YXR1cyA9IENvbm5lY3Rpb24uU3RhdGUuQ2xvc2VkO1xuICAgICAgICAgICAgaWYgKF90aGlzLm9wdGlvbnMuc2hvdWxkUGxheURpc2Nvbm5lY3QgJiYgX3RoaXMub3B0aW9ucy5zaG91bGRQbGF5RGlzY29ubmVjdCgpXG4gICAgICAgICAgICAgICAgLy8gRG9uJ3QgcGxheSBkaXNjb25uZWN0IHNvdW5kIGlmIHRoaXMgd2FzIGZyb20gYSBjYW5jZWwgZXZlbnQuIGkuZS4gdGhlIGNhbGxcbiAgICAgICAgICAgICAgICAvLyB3YXMgaWdub3JlZCBvciBodW5nIHVwIGV2ZW4gYmVmb3JlIGl0IHdhcyBhbnN3ZXJlZC5cbiAgICAgICAgICAgICAgICAmJiAhX3RoaXMuX2lzQ2FuY2VsbGVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3NvdW5kY2FjaGUuZ2V0KGRldmljZV8xLmRlZmF1bHQuU291bmROYW1lLkRpc2Nvbm5lY3QpLnBsYXkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1vbml0b3IuZGlzYWJsZSgpO1xuICAgICAgICAgICAgX3RoaXMuX3B1Ymxpc2hNZXRyaWNzKCk7XG4gICAgICAgICAgICBpZiAoIV90aGlzLl9pc0NhbmNlbGxlZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoJ2Rpc2Nvbm5lY3QnLCBfdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLnBzdHJlYW0gPSBjb25maWcucHN0cmVhbTtcbiAgICAgICAgX3RoaXMucHN0cmVhbS5vbignY2FuY2VsJywgX3RoaXMuX29uQ2FuY2VsKTtcbiAgICAgICAgX3RoaXMucHN0cmVhbS5vbigncmluZ2luZycsIF90aGlzLl9vblJpbmdpbmcpO1xuICAgICAgICBfdGhpcy5wc3RyZWFtLm9uKCd0cmFuc3BvcnRDbG9zZScsIF90aGlzLl9vblRyYW5zcG9ydENsb3NlKTtcbiAgICAgICAgX3RoaXMub24oJ2Vycm9yJywgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICBfdGhpcy5fcHVibGlzaGVyLmVycm9yKCdjb25uZWN0aW9uJywgJ2Vycm9yJywge1xuICAgICAgICAgICAgICAgIGNvZGU6IGVycm9yLmNvZGUsIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgICB9LCBfdGhpcyk7XG4gICAgICAgICAgICBpZiAoX3RoaXMucHN0cmVhbSAmJiBfdGhpcy5wc3RyZWFtLnN0YXR1cyA9PT0gJ2Rpc2Nvbm5lY3RlZCcpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fY2xlYW51cEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBfdGhpcy5vbignZGlzY29ubmVjdCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl9jbGVhbnVwRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbm5lY3Rpb24ucHJvdG90eXBlLCBcImRpcmVjdGlvblwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXaGV0aGVyIHRoaXMge0BsaW5rIENvbm5lY3Rpb259IGlzIGluY29taW5nIG9yIG91dGdvaW5nLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZGlyZWN0aW9uO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29ubmVjdGlvbi5wcm90b3R5cGUsIFwiY29kZWNcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogQXVkaW8gY29kZWMgdXNlZCBmb3IgdGhpcyB7QGxpbmsgQ29ubmVjdGlvbn0uIEV4cGVjdGluZyB7QGxpbmsgQ29ubmVjdGlvbi5Db2RlY30gYnV0XG4gICAgICAgICAqIHdpbGwgY29weSB3aGF0ZXZlciB3ZSBnZXQgZnJvbSBSVEMgc3RhdHMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb2RlYztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSByZWFsIENhbGxTaWQuIFJldHVybnMgbnVsbCBpZiBub3QgcHJlc2VudCBvciBpcyBhIHRlbXBvcmFyeSBjYWxsIHNpZC5cbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuX2dldFJlYWxDYWxsU2lkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9sb2cud2FybignX2dldFJlYWxDYWxsU2lkIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiAyLjAuJyk7XG4gICAgICAgIHJldHVybiAvXlRKLy50ZXN0KHRoaXMucGFyYW1ldGVycy5DYWxsU2lkKSA/IG51bGwgOiB0aGlzLnBhcmFtZXRlcnMuQ2FsbFNpZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdGVtcG9yYXJ5IENhbGxTaWQuXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLl9nZXRUZW1wQ2FsbFNpZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fbG9nLndhcm4oJ19nZXRUZW1wQ2FsbFNpZCBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gMi4wLiBcXFxuICAgICAgICAgICAgICAgICAgICBQbGVhc2UgdXNlIG91dGJvdW5kQ29ubmVjdGlvbklkIGluc3RlYWQuJyk7XG4gICAgICAgIHJldHVybiB0aGlzLm91dGJvdW5kQ29ubmVjdGlvbklkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBhdWRpbyBpbnB1dCB0cmFja3MgZnJvbSBhIGdpdmVuIHN0cmVhbS5cbiAgICAgKiBAcGFyYW0gc3RyZWFtXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5fc2V0SW5wdXRUcmFja3NGcm9tU3RyZWFtID0gZnVuY3Rpb24gKHN0cmVhbSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tZWRpYVN0cmVhbS5zZXRJbnB1dFRyYWNrc0Zyb21TdHJlYW0oc3RyZWFtKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgYXVkaW8gb3V0cHV0IHNpbmsgSURzLlxuICAgICAqIEBwYXJhbSBzaW5rSWRzXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5fc2V0U2lua0lkcyA9IGZ1bmN0aW9uIChzaW5rSWRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1lZGlhU3RyZWFtLl9zZXRTaW5rSWRzKHNpbmtJZHMpO1xuICAgIH07XG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24gKGhhbmRsZXJPckNvbnN0cmFpbnRzLCBydGNDb25maWd1cmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0eXBlb2YgaGFuZGxlck9yQ29uc3RyYWludHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZEhhbmRsZXIoJ2FjY2VwdCcsIGhhbmRsZXJPckNvbnN0cmFpbnRzKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fc3RhdHVzICE9PSBDb25uZWN0aW9uLlN0YXRlLlBlbmRpbmcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYXVkaW9Db25zdHJhaW50cyA9IGhhbmRsZXJPckNvbnN0cmFpbnRzIHx8IHRoaXMub3B0aW9ucy5hdWRpb0NvbnN0cmFpbnRzO1xuICAgICAgICB0aGlzLl9zdGF0dXMgPSBDb25uZWN0aW9uLlN0YXRlLkNvbm5lY3Rpbmc7XG4gICAgICAgIHZhciBjb25uZWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKF90aGlzLl9zdGF0dXMgIT09IENvbm5lY3Rpb24uU3RhdGUuQ29ubmVjdGluZykge1xuICAgICAgICAgICAgICAgIC8vIGNhbGwgbXVzdCBoYXZlIGJlZW4gY2FuY2VsZWRcbiAgICAgICAgICAgICAgICBfdGhpcy5fY2xlYW51cEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMubWVkaWFTdHJlYW0uY2xvc2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgb25BbnN3ZXIgPSBmdW5jdGlvbiAocGMpIHtcbiAgICAgICAgICAgICAgICAvLyBSZXBvcnQgdGhhdCB0aGUgY2FsbCB3YXMgYW5zd2VyZWQsIGFuZCBkaXJlY3Rpb25hbGl0eVxuICAgICAgICAgICAgICAgIHZhciBldmVudE5hbWUgPSBfdGhpcy5fZGlyZWN0aW9uID09PSBDb25uZWN0aW9uLkNhbGxEaXJlY3Rpb24uSW5jb21pbmdcbiAgICAgICAgICAgICAgICAgICAgPyAnYWNjZXB0ZWQtYnktbG9jYWwnXG4gICAgICAgICAgICAgICAgICAgIDogJ2FjY2VwdGVkLWJ5LXJlbW90ZSc7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3B1Ymxpc2hlci5pbmZvKCdjb25uZWN0aW9uJywgZXZlbnROYW1lLCBudWxsLCBfdGhpcyk7XG4gICAgICAgICAgICAgICAgLy8gUmVwb3J0IHRoZSBwcmVmZXJyZWQgY29kZWMgYW5kIHBhcmFtcyBhcyB0aGV5IGFwcGVhciBpbiB0aGUgU0RQXG4gICAgICAgICAgICAgICAgdmFyIF9hID0gZ2V0UHJlZmVycmVkQ29kZWNJbmZvKF90aGlzLm1lZGlhU3RyZWFtLnZlcnNpb24uZ2V0U0RQKCkpLCBjb2RlY05hbWUgPSBfYS5jb2RlY05hbWUsIGNvZGVjUGFyYW1zID0gX2EuY29kZWNQYXJhbXM7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3B1Ymxpc2hlci5pbmZvKCdzZXR0aW5ncycsICdjb2RlYycsIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZWNfcGFyYW1zOiBjb2RlY1BhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRfY29kZWM6IGNvZGVjTmFtZSxcbiAgICAgICAgICAgICAgICB9LCBfdGhpcyk7XG4gICAgICAgICAgICAgICAgLy8gRW5hYmxlIFJUQyBtb25pdG9yaW5nXG4gICAgICAgICAgICAgICAgX3RoaXMuX21vbml0b3IuZW5hYmxlKHBjKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgc2lua0lkcyA9IHR5cGVvZiBfdGhpcy5vcHRpb25zLmdldFNpbmtJZHMgPT09ICdmdW5jdGlvbicgJiYgX3RoaXMub3B0aW9ucy5nZXRTaW5rSWRzKCk7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzaW5rSWRzKSkge1xuICAgICAgICAgICAgICAgIF90aGlzLm1lZGlhU3RyZWFtLl9zZXRTaW5rSWRzKHNpbmtJZHMpLmNhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gKHJyb3dsYW5kKSBXZSBkb24ndCB3YW50IHRoaXMgdG8gdGhyb3cgdG8gY29uc29sZSBzaW5jZSB0aGUgY3VzdG9tZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gY2FuJ3QgY29udHJvbCB0aGlzLiBUaGlzIHdpbGwgbW9zdCBjb21tb25seSBiZSByZWplY3RlZCBvbiBicm93c2Vyc1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGF0IGRvbid0IHN1cHBvcnQgc2V0dGluZyBzaW5rIElEcy5cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLnBzdHJlYW0uYWRkTGlzdGVuZXIoJ2hhbmd1cCcsIF90aGlzLl9vbkhhbmd1cCk7XG4gICAgICAgICAgICBydGNDb25maWd1cmF0aW9uID0gcnRjQ29uZmlndXJhdGlvbiB8fCBfdGhpcy5vcHRpb25zLnJ0Y0NvbmZpZ3VyYXRpb247XG4gICAgICAgICAgICBpZiAoX3RoaXMuX2RpcmVjdGlvbiA9PT0gQ29ubmVjdGlvbi5DYWxsRGlyZWN0aW9uLkluY29taW5nKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX2lzQW5zd2VyZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF90aGlzLm1lZGlhU3RyZWFtLmFuc3dlckluY29taW5nQ2FsbChfdGhpcy5wYXJhbWV0ZXJzLkNhbGxTaWQsIF90aGlzLm9wdGlvbnMub2ZmZXJTZHAsIF90aGlzLm9wdGlvbnMucnRjQ29uc3RyYWludHMsIHJ0Y0NvbmZpZ3VyYXRpb24sIG9uQW5zd2VyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSBBcnJheS5mcm9tKF90aGlzLmN1c3RvbVBhcmFtZXRlcnMuZW50cmllcygpKS5tYXAoZnVuY3Rpb24gKHBhaXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChwYWlyWzBdKSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pO1xuICAgICAgICAgICAgICAgIH0pLmpvaW4oJyYnKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5wc3RyZWFtLm9uY2UoJ2Fuc3dlcicsIF90aGlzLl9vbkFuc3dlci5iaW5kKF90aGlzKSk7XG4gICAgICAgICAgICAgICAgX3RoaXMubWVkaWFTdHJlYW0ubWFrZU91dGdvaW5nQ2FsbChfdGhpcy5wc3RyZWFtLnRva2VuLCBwYXJhbXMsIF90aGlzLm91dGJvdW5kQ29ubmVjdGlvbklkLCBfdGhpcy5vcHRpb25zLnJ0Y0NvbnN0cmFpbnRzLCBydGNDb25maWd1cmF0aW9uLCBvbkFuc3dlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuYmVmb3JlQWNjZXB0KSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuYmVmb3JlQWNjZXB0KHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbnB1dFN0cmVhbSA9IHR5cGVvZiB0aGlzLm9wdGlvbnMuZ2V0SW5wdXRTdHJlYW0gPT09ICdmdW5jdGlvbicgJiYgdGhpcy5vcHRpb25zLmdldElucHV0U3RyZWFtKCk7XG4gICAgICAgIHZhciBwcm9taXNlID0gaW5wdXRTdHJlYW1cbiAgICAgICAgICAgID8gdGhpcy5tZWRpYVN0cmVhbS5zZXRJbnB1dFRyYWNrc0Zyb21TdHJlYW0oaW5wdXRTdHJlYW0pXG4gICAgICAgICAgICA6IHRoaXMubWVkaWFTdHJlYW0ub3BlbldpdGhDb25zdHJhaW50cyhhdWRpb0NvbnN0cmFpbnRzKTtcbiAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl9wdWJsaXNoZXIuaW5mbygnZ2V0LXVzZXItbWVkaWEnLCAnc3VjY2VlZGVkJywge1xuICAgICAgICAgICAgICAgIGRhdGE6IHsgYXVkaW9Db25zdHJhaW50czogYXVkaW9Db25zdHJhaW50cyB9LFxuICAgICAgICAgICAgfSwgX3RoaXMpO1xuICAgICAgICAgICAgY29ubmVjdCgpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHZhciBtZXNzYWdlO1xuICAgICAgICAgICAgdmFyIGNvZGU7XG4gICAgICAgICAgICBpZiAoZXJyb3IuY29kZSA9PT0gMzEyMDhcbiAgICAgICAgICAgICAgICB8fCBbJ1Blcm1pc3Npb25EZW5pZWRFcnJvcicsICdOb3RBbGxvd2VkRXJyb3InXS5pbmRleE9mKGVycm9yLm5hbWUpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGNvZGUgPSAzMTIwODtcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gJ1VzZXIgZGVuaWVkIGFjY2VzcyB0byBtaWNyb3Bob25lLCBvciB0aGUgd2ViIGJyb3dzZXIgZGlkIG5vdCBhbGxvdyBtaWNyb3Bob25lICdcbiAgICAgICAgICAgICAgICAgICAgKyAnYWNjZXNzIGF0IHRoaXMgYWRkcmVzcy4nO1xuICAgICAgICAgICAgICAgIF90aGlzLl9wdWJsaXNoZXIuZXJyb3IoJ2dldC11c2VyLW1lZGlhJywgJ2RlbmllZCcsIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXVkaW9Db25zdHJhaW50czogYXVkaW9Db25zdHJhaW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LCBfdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb2RlID0gMzEyMDE7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IFwiRXJyb3Igb2NjdXJyZWQgd2hpbGUgYWNjZXNzaW5nIG1pY3JvcGhvbmU6IFwiICsgZXJyb3IubmFtZSArIChlcnJvci5tZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgID8gXCIgKFwiICsgZXJyb3IubWVzc2FnZSArIFwiKVwiXG4gICAgICAgICAgICAgICAgICAgIDogJycpO1xuICAgICAgICAgICAgICAgIF90aGlzLl9wdWJsaXNoZXIuZXJyb3IoJ2dldC11c2VyLW1lZGlhJywgJ2ZhaWxlZCcsIHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXVkaW9Db25zdHJhaW50czogYXVkaW9Db25zdHJhaW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LCBfdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5fZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgX3RoaXMuZW1pdCgnZXJyb3InLCB7IG1lc3NhZ2U6IG1lc3NhZ2UsIGNvZGU6IGNvZGUgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgdGhpcy5fbG9nLndhcm4oJy5jYW5jZWwoKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIC5pZ25vcmUoKSBpbnN0ZWFkLicpO1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgICAgdGhpcy5pZ25vcmUoaGFuZGxlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlnbm9yZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLl9hZGRIYW5kbGVyKCdkaXNjb25uZWN0JywgaGFuZGxlcik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZGlzY29ubmVjdCgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgLSBTZXQgYSBoYW5kbGVyIGZvciB0aGUge0BsaW5rIGVycm9yRXZlbnR9XG4gICAgICovXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuX2FkZEhhbmRsZXIoJ2Vycm9yJywgaGFuZGxlcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgbG9jYWwgTWVkaWFTdHJlYW0sIGlmIHNldC5cbiAgICAgKi9cbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5nZXRMb2NhbFN0cmVhbSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVkaWFTdHJlYW0gJiYgdGhpcy5tZWRpYVN0cmVhbS5zdHJlYW07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIHJlbW90ZSBNZWRpYVN0cmVhbSwgaWYgc2V0LlxuICAgICAqL1xuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLmdldFJlbW90ZVN0cmVhbSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVkaWFTdHJlYW0gJiYgdGhpcy5tZWRpYVN0cmVhbS5fcmVtb3RlU3RyZWFtO1xuICAgIH07XG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuaWdub3JlID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aGlzLl9hZGRIYW5kbGVyKCdjYW5jZWwnLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fc3RhdHVzICE9PSBDb25uZWN0aW9uLlN0YXRlLlBlbmRpbmcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdGF0dXMgPSBDb25uZWN0aW9uLlN0YXRlLkNsb3NlZDtcbiAgICAgICAgdGhpcy5lbWl0KCdjYW5jZWwnKTtcbiAgICAgICAgdGhpcy5tZWRpYVN0cmVhbS5pZ25vcmUodGhpcy5wYXJhbWV0ZXJzLkNhbGxTaWQpO1xuICAgICAgICB0aGlzLl9wdWJsaXNoZXIuaW5mbygnY29ubmVjdGlvbicsICdpZ25vcmVkLWJ5LWxvY2FsJywgbnVsbCwgdGhpcyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBjb25uZWN0aW9uIGlzIG11dGVkXG4gICAgICovXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuaXNNdXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWVkaWFTdHJlYW0uaXNNdXRlZDtcbiAgICB9O1xuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLm11dGUgPSBmdW5jdGlvbiAoc2hvdWxkTXV0ZSkge1xuICAgICAgICBpZiAoc2hvdWxkTXV0ZSA9PT0gdm9pZCAwKSB7IHNob3VsZE11dGUgPSB0cnVlOyB9XG4gICAgICAgIGlmICh0eXBlb2Ygc2hvdWxkTXV0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5fYWRkSGFuZGxlcignbXV0ZScsIHNob3VsZE11dGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciB3YXNNdXRlZCA9IHRoaXMubWVkaWFTdHJlYW0uaXNNdXRlZDtcbiAgICAgICAgdGhpcy5tZWRpYVN0cmVhbS5tdXRlKHNob3VsZE11dGUpO1xuICAgICAgICB2YXIgaXNNdXRlZCA9IHRoaXMubWVkaWFTdHJlYW0uaXNNdXRlZDtcbiAgICAgICAgaWYgKHdhc011dGVkICE9PSBpc011dGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9wdWJsaXNoZXIuaW5mbygnY29ubmVjdGlvbicsIGlzTXV0ZWQgPyAnbXV0ZWQnIDogJ3VubXV0ZWQnLCBudWxsLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnbXV0ZScsIGlzTXV0ZWQsIHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQb3N0IGFuIGV2ZW50IHRvIEVuZHBvaW50IEFuYWx5dGljcyBpbmRpY2F0aW5nIHRoYXQgdGhlIGVuZCB1c2VyXG4gICAgICogICBoYXMgZ2l2ZW4gY2FsbCBxdWFsaXR5IGZlZWRiYWNrLiBDYWxsZWQgd2l0aG91dCBhIHNjb3JlLCB0aGlzXG4gICAgICogICB3aWxsIHJlcG9ydCB0aGF0IHRoZSBjdXN0b21lciBkZWNsaW5lZCB0byBnaXZlIGZlZWRiYWNrLlxuICAgICAqIEBwYXJhbSBzY29yZSAtIFRoZSBlbmQtdXNlcidzIHJhdGluZyBvZiB0aGUgY2FsbDsgYW5cbiAgICAgKiAgIGludGVnZXIgMSB0aHJvdWdoIDUuIE9yIHVuZGVmaW5lZCBpZiB0aGUgdXNlciBkZWNsaW5lZCB0byBnaXZlXG4gICAgICogICBmZWVkYmFjay5cbiAgICAgKiBAcGFyYW0gaXNzdWUgLSBUaGUgcHJpbWFyeSBpc3N1ZSB0aGUgZW5kIHVzZXJcbiAgICAgKiAgIGV4cGVyaWVuY2VkIG9uIHRoZSBjYWxsLiBDYW4gYmU6IFsnb25lLXdheS1hdWRpbycsICdjaG9wcHktYXVkaW8nLFxuICAgICAqICAgJ2Ryb3BwZWQtY2FsbCcsICdhdWRpby1sYXRlbmN5JywgJ25vaXN5LWNhbGwnLCAnZWNobyddXG4gICAgICovXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUucG9zdEZlZWRiYWNrID0gZnVuY3Rpb24gKHNjb3JlLCBpc3N1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHNjb3JlID09PSAndW5kZWZpbmVkJyB8fCBzY29yZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Bvc3RGZWVkYmFja0RlY2xpbmVkKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFPYmplY3QudmFsdWVzKENvbm5lY3Rpb24uRmVlZGJhY2tTY29yZSkuaW5jbHVkZXMoc2NvcmUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuSW52YWxpZEFyZ3VtZW50RXJyb3IoXCJGZWVkYmFjayBzY29yZSBtdXN0IGJlIG9uZSBvZjogXCIgKyBPYmplY3QudmFsdWVzKENvbm5lY3Rpb24uRmVlZGJhY2tTY29yZSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgaXNzdWUgIT09ICd1bmRlZmluZWQnICYmIGlzc3VlICE9PSBudWxsICYmICFPYmplY3QudmFsdWVzKENvbm5lY3Rpb24uRmVlZGJhY2tJc3N1ZSkuaW5jbHVkZXMoaXNzdWUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuSW52YWxpZEFyZ3VtZW50RXJyb3IoXCJGZWVkYmFjayBpc3N1ZSBtdXN0IGJlIG9uZSBvZjogXCIgKyBPYmplY3QudmFsdWVzKENvbm5lY3Rpb24uRmVlZGJhY2tJc3N1ZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9wdWJsaXNoZXIuaW5mbygnZmVlZGJhY2snLCAncmVjZWl2ZWQnLCB7XG4gICAgICAgICAgICBpc3N1ZV9uYW1lOiBpc3N1ZSxcbiAgICAgICAgICAgIHF1YWxpdHlfc2NvcmU6IHNjb3JlLFxuICAgICAgICB9LCB0aGlzLCB0cnVlKTtcbiAgICB9O1xuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLnJlamVjdCA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhpcy5fYWRkSGFuZGxlcigncmVqZWN0JywgaGFuZGxlcik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3N0YXR1cyAhPT0gQ29ubmVjdGlvbi5TdGF0ZS5QZW5kaW5nKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wc3RyZWFtLnJlamVjdCh0aGlzLnBhcmFtZXRlcnMuQ2FsbFNpZCk7XG4gICAgICAgIHRoaXMuX3N0YXR1cyA9IENvbm5lY3Rpb24uU3RhdGUuQ2xvc2VkO1xuICAgICAgICB0aGlzLmVtaXQoJ3JlamVjdCcpO1xuICAgICAgICB0aGlzLm1lZGlhU3RyZWFtLnJlamVjdCh0aGlzLnBhcmFtZXRlcnMuQ2FsbFNpZCk7XG4gICAgICAgIHRoaXMuX3B1Ymxpc2hlci5pbmZvKCdjb25uZWN0aW9uJywgJ3JlamVjdGVkLWJ5LWxvY2FsJywgbnVsbCwgdGhpcyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZW5kIGEgc3RyaW5nIG9mIGRpZ2l0cy5cbiAgICAgKiBAcGFyYW0gZGlnaXRzXG4gICAgICovXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuc2VuZERpZ2l0cyA9IGZ1bmN0aW9uIChkaWdpdHMpIHtcbiAgICAgICAgaWYgKGRpZ2l0cy5tYXRjaCgvW14wLTkqI3ddLykpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBlcnJvcnNfMS5JbnZhbGlkQXJndW1lbnRFcnJvcignSWxsZWdhbCBjaGFyYWN0ZXIgcGFzc2VkIGludG8gc2VuZERpZ2l0cycpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzZXF1ZW5jZSA9IFtdO1xuICAgICAgICBkaWdpdHMuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGRpZ2l0KSB7XG4gICAgICAgICAgICB2YXIgZHRtZiA9IChkaWdpdCAhPT0gJ3cnKSA/IFwiZHRtZlwiICsgZGlnaXQgOiAnJztcbiAgICAgICAgICAgIGlmIChkdG1mID09PSAnZHRtZionKSB7XG4gICAgICAgICAgICAgICAgZHRtZiA9ICdkdG1mcyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZHRtZiA9PT0gJ2R0bWYjJykge1xuICAgICAgICAgICAgICAgIGR0bWYgPSAnZHRtZmgnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VxdWVuY2UucHVzaChkdG1mKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIEJpbmRzIHNvdW5kQ2FjaGUgdG8gYmUgdXNlZCBpbiByZWN1cnNpb24gdW50aWwgYWxsIGRpZ2l0cyBoYXZlIGJlZW4gcGxheWVkLlxuICAgICAgICAoZnVuY3Rpb24gcGxheU5leHREaWdpdChzb3VuZENhY2hlLCBkaWFsdG9uZVBsYXllcikge1xuICAgICAgICAgICAgdmFyIGRpZ2l0ID0gc2VxdWVuY2Uuc2hpZnQoKTtcbiAgICAgICAgICAgIGlmIChkaWdpdCkge1xuICAgICAgICAgICAgICAgIGlmIChkaWFsdG9uZVBsYXllcikge1xuICAgICAgICAgICAgICAgICAgICBkaWFsdG9uZVBsYXllci5wbGF5KGRpZ2l0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNvdW5kQ2FjaGUuZ2V0KGRpZ2l0KS5wbGF5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlcXVlbmNlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQocGxheU5leHREaWdpdC5iaW5kKG51bGwsIHNvdW5kQ2FjaGUpLCAyMDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSh0aGlzLl9zb3VuZGNhY2hlLCB0aGlzLm9wdGlvbnMuZGlhbHRvbmVQbGF5ZXIpO1xuICAgICAgICB2YXIgZHRtZlNlbmRlciA9IHRoaXMubWVkaWFTdHJlYW0uZ2V0T3JDcmVhdGVEVE1GU2VuZGVyKCk7XG4gICAgICAgIGZ1bmN0aW9uIGluc2VydERUTUYoZHRtZnMpIHtcbiAgICAgICAgICAgIGlmICghZHRtZnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGR0bWYgPSBkdG1mcy5zaGlmdCgpO1xuICAgICAgICAgICAgaWYgKGR0bWYgJiYgZHRtZi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkdG1mU2VuZGVyLmluc2VydERUTUYoZHRtZiwgRFRNRl9UT05FX0RVUkFUSU9OLCBEVE1GX0lOVEVSX1RPTkVfR0FQKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNldFRpbWVvdXQoaW5zZXJ0RFRNRi5iaW5kKG51bGwsIGR0bWZzKSwgRFRNRl9QQVVTRV9EVVJBVElPTik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGR0bWZTZW5kZXIpIHtcbiAgICAgICAgICAgIGlmICghKCdjYW5JbnNlcnREVE1GJyBpbiBkdG1mU2VuZGVyKSB8fCBkdG1mU2VuZGVyLmNhbkluc2VydERUTUYpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2cuaW5mbygnU2VuZGluZyBkaWdpdHMgdXNpbmcgUlRDRFRNRlNlbmRlcicpO1xuICAgICAgICAgICAgICAgIC8vIE5PVEUobXJvYmVydHMpOiBXZSBjYW4ndCBqdXN0IG1hcCAndycgdG8gJywnIHNpbmNlXG4gICAgICAgICAgICAgICAgLy8gUlRDRFRNRlNlbmRlcidzIHBhdXNlIGR1cmF0aW9uIGlzIDIgcyBhbmQgVHdpbGlvJ3MgaXMgbW9yZVxuICAgICAgICAgICAgICAgIC8vIGxpa2UgNTAwIG1zLiBJbnN0ZWFkLCB3ZSB3aWxsIGZ1ZGdlIGl0IHdpdGggc2V0VGltZW91dC5cbiAgICAgICAgICAgICAgICBpbnNlcnREVE1GKGRpZ2l0cy5zcGxpdCgndycpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9sb2cuaW5mbygnUlRDRFRNRlNlbmRlciBjYW5ub3QgaW5zZXJ0IERUTUYnKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzZW5kIHBzdHJlYW0gbWVzc2FnZSB0byBzZW5kIERUTUZcbiAgICAgICAgdGhpcy5fbG9nLmluZm8oJ1NlbmRpbmcgZGlnaXRzIG92ZXIgUFN0cmVhbScpO1xuICAgICAgICBpZiAodGhpcy5wc3RyZWFtICE9PSBudWxsICYmIHRoaXMucHN0cmVhbS5zdGF0dXMgIT09ICdkaXNjb25uZWN0ZWQnKSB7XG4gICAgICAgICAgICB0aGlzLnBzdHJlYW0uZHRtZih0aGlzLnBhcmFtZXRlcnMuQ2FsbFNpZCwgZGlnaXRzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBlcnJvciA9IHtcbiAgICAgICAgICAgICAgICBjb2RlOiAzMTAwMCxcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uOiB0aGlzLFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdDb3VsZCBub3Qgc2VuZCBEVE1GOiBTaWduYWxpbmcgY2hhbm5lbCBpcyBkaXNjb25uZWN0ZWQnLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnZXJyb3InLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCB7QGxpbmsgQ29ubmVjdGlvbn0gc3RhdHVzLlxuICAgICAqL1xuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLnN0YXR1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXR1cztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIC0gVW5tdXRlIHRoZSB7QGxpbmsgQ29ubmVjdGlvbn0uXG4gICAgICovXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUudW5tdXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9sb2cud2FybignLnVubXV0ZSgpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgLm11dGUoZmFsc2UpIHRvIHVubXV0ZSBhIGNhbGwgaW5zdGVhZC4nKTtcbiAgICAgICAgdGhpcy5tdXRlKGZhbHNlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIC0gU2V0IGEgaGFuZGxlciBmb3IgdGhlIHtAbGluayB2b2x1bWVFdmVudH1cbiAgICAgKiBAcGFyYW0gaGFuZGxlclxuICAgICAqL1xuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLnZvbHVtZSA9IGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIGlmICghd2luZG93IHx8ICghd2luZG93LkF1ZGlvQ29udGV4dCAmJiAhd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvZy53YXJuKCdUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBDb25uZWN0aW9uLnZvbHVtZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2FkZEhhbmRsZXIoJ3ZvbHVtZScsIGhhbmRsZXIpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkIGEgaGFuZGxlciBmb3IgYW4gRXZlbnRFbWl0dGVyIGFuZCBlbWl0IGEgZGVwcmVjYXRpb24gd2FybmluZyBvbiBmaXJzdCBjYWxsLlxuICAgICAqIEBwYXJhbSBldmVudE5hbWUgLSBOYW1lIG9mIHRoZSBldmVudFxuICAgICAqIEBwYXJhbSBoYW5kbGVyIC0gQSBoYW5kbGVyIHRvIGNhbGwgd2hlbiB0aGUgZXZlbnQgaXMgZW1pdHRlZFxuICAgICAqL1xuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLl9hZGRIYW5kbGVyID0gZnVuY3Rpb24gKGV2ZW50TmFtZSwgaGFuZGxlcikge1xuICAgICAgICBpZiAoIWhhc0JlZW5XYXJuZWRIYW5kbGVycykge1xuICAgICAgICAgICAgdGhpcy5fbG9nLndhcm4oXCJDb25uZWN0aW9uIGNhbGxiYWNrIGhhbmRsZXJzIChhY2NlcHQsIGNhbmNlbCwgZGlzY29ubmVjdCwgZXJyb3IsIGlnbm9yZSwgbXV0ZSwgcmVqZWN0LFxcbiAgICAgICAgdm9sdW1lKSBoYXZlIGJlZW4gZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IGJyZWFraW5nIHJlbGVhc2UuIEluc3RlYWQsIHRoZSBFdmVudEVtaXR0ZXIgICAgICAgICBpbnRlcmZhY2UgY2FuIGJlIHVzZWQgdG8gc2V0IGV2ZW50IGxpc3RlbmVycy4gRXhhbXBsZTogY29ubmVjdGlvbi5vbignXCIgKyBldmVudE5hbWUgKyBcIicsIGhhbmRsZXIpXCIpO1xuICAgICAgICAgICAgaGFzQmVlbldhcm5lZEhhbmRsZXJzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkZExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2hlY2sgdGhlIHZvbHVtZSBwYXNzZWQsIGVtaXR0aW5nIGEgd2FybmluZyBpZiBvbmUgd2F5IGF1ZGlvIGlzIGRldGVjdGVkIG9yIGNsZWFyZWQuXG4gICAgICogQHBhcmFtIGN1cnJlbnRWb2x1bWUgLSBUaGUgY3VycmVudCB2b2x1bWUgZm9yIHRoaXMgZGlyZWN0aW9uXG4gICAgICogQHBhcmFtIHN0cmVha0ZpZWxkTmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBmaWVsZCBvbiB0aGUge0BsaW5rIENvbm5lY3Rpb259IG9iamVjdCB0aGF0IHRyYWNrcyBob3cgbWFueSB0aW1lcyB0aGVcbiAgICAgKiAgIGN1cnJlbnQgdmFsdWUgaGFzIGJlZW4gcmVwZWF0ZWQgY29uc2VjdXRpdmVseS5cbiAgICAgKiBAcGFyYW0gbGFzdFZhbHVlRmllbGROYW1lIC0gVGhlIG5hbWUgb2YgdGhlIGZpZWxkIG9uIHRoZSB7QGxpbmsgQ29ubmVjdGlvbn0gb2JqZWN0IHRoYXQgdHJhY2tzIHRoZSBtb3N0IHJlY2VudFxuICAgICAqICAgdm9sdW1lIGZvciB0aGlzIGRpcmVjdGlvblxuICAgICAqIEBwYXJhbSBkaXJlY3Rpb24gLSBUaGUgZGlyZWN0aW9uYWxpdHkgb2YgdGhpcyBhdWRpbyB0cmFjaywgZWl0aGVyICdpbnB1dCcgb3IgJ291dHB1dCdcbiAgICAgKiBAcmV0dXJucyBUaGUgY3VycmVudCBzdHJlYWs7IGhvdyBtYW55IHRpbWVzIGluIGEgcm93IHRoZSBzYW1lIHZhbHVlIGhhcyBiZWVuIHBvbGxlZC5cbiAgICAgKi9cbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5fY2hlY2tWb2x1bWUgPSBmdW5jdGlvbiAoY3VycmVudFZvbHVtZSwgY3VycmVudFN0cmVhaywgbGFzdFZhbHVlLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgdmFyIHdhc1dhcm5pbmdSYWlzZWQgPSBjdXJyZW50U3RyZWFrID49IDEwO1xuICAgICAgICB2YXIgbmV3U3RyZWFrID0gMDtcbiAgICAgICAgaWYgKGxhc3RWYWx1ZSA9PT0gY3VycmVudFZvbHVtZSkge1xuICAgICAgICAgICAgbmV3U3RyZWFrID0gY3VycmVudFN0cmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAobmV3U3RyZWFrID49IDEwKSB7XG4gICAgICAgICAgICB0aGlzLl9lbWl0V2FybmluZygnYXVkaW8tbGV2ZWwtJywgXCJjb25zdGFudC1hdWRpby1cIiArIGRpcmVjdGlvbiArIFwiLWxldmVsXCIsIDEwLCBuZXdTdHJlYWssIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh3YXNXYXJuaW5nUmFpc2VkKSB7XG4gICAgICAgICAgICB0aGlzLl9lbWl0V2FybmluZygnYXVkaW8tbGV2ZWwtJywgXCJjb25zdGFudC1hdWRpby1cIiArIGRpcmVjdGlvbiArIFwiLWxldmVsXCIsIDEwLCBuZXdTdHJlYWssIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdTdHJlYWs7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDbGVhbiB1cCBldmVudCBsaXN0ZW5lcnMuXG4gICAgICovXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuX2NsZWFudXBFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGNsZWFudXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIV90aGlzLnBzdHJlYW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfdGhpcy5wc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdhbnN3ZXInLCBfdGhpcy5fb25BbnN3ZXIpO1xuICAgICAgICAgICAgX3RoaXMucHN0cmVhbS5yZW1vdmVMaXN0ZW5lcignY2FuY2VsJywgX3RoaXMuX29uQ2FuY2VsKTtcbiAgICAgICAgICAgIF90aGlzLnBzdHJlYW0ucmVtb3ZlTGlzdGVuZXIoJ2hhbmd1cCcsIF90aGlzLl9vbkhhbmd1cCk7XG4gICAgICAgICAgICBfdGhpcy5wc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCdyaW5naW5nJywgX3RoaXMuX29uUmluZ2luZyk7XG4gICAgICAgICAgICBfdGhpcy5wc3RyZWFtLnJlbW92ZUxpc3RlbmVyKCd0cmFuc3BvcnRDbG9zZScsIF90aGlzLl9vblRyYW5zcG9ydENsb3NlKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gVGhpcyBpcyBraW5kIG9mIGEgaGFjaywgYnV0IGl0IGxldHMgdXMgYXZvaWQgcmV3cml0aW5nIG1vcmUgY29kZS5cbiAgICAgICAgLy8gQmFzaWNhbGx5LCB0aGVyZSdzIGEgc2VxdWVuY2luZyBwcm9ibGVtIHdpdGggdGhlIHdheSBQZWVyQ29ubmVjdGlvbiByYWlzZXNcbiAgICAgICAgLy8gdGhlXG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgQ2Fubm90IGVzdGFibGlzaCBjb25uZWN0aW9uLiBDbGllbnQgaXMgZGlzY29ubmVjdGVkXG4gICAgICAgIC8vXG4gICAgICAgIC8vIGVycm9yIGluIENvbm5lY3Rpb24jYWNjZXB0LiBJdCBjYWxscyBQZWVyQ29ubmVjdGlvbiNvbmVycm9yLCB3aGljaCBlbWl0c1xuICAgICAgICAvLyB0aGUgZXJyb3IgZXZlbnQgb24gQ29ubmVjdGlvbi4gQW4gZXJyb3IgaGFuZGxlciBvbiBDb25uZWN0aW9uIHRoZW4gY2FsbHNcbiAgICAgICAgLy8gY2xlYW51cEV2ZW50TGlzdGVuZXJzLCBidXQgdGhlbiBjb250cm9sIHJldHVybnMgdG8gQ29ubmVjdGlvbiNhY2NlcHQuIEl0J3NcbiAgICAgICAgLy8gYXQgdGhpcyBwb2ludCB0aGF0IHdlIGFkZCBhIGxpc3RlbmVyIGZvciB0aGUgYW5zd2VyIGV2ZW50IHRoYXQgbmV2ZXIgZ2V0c1xuICAgICAgICAvLyByZW1vdmVkLiBzZXRUaW1lb3V0IHdpbGwgYWxsb3cgdXMgdG8gcmVydW4gY2xlYW51cCBhZ2FpbiwgX2FmdGVyX1xuICAgICAgICAvLyBDb25uZWN0aW9uI2FjY2VwdCByZXR1cm5zLlxuICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgIHNldFRpbWVvdXQoY2xlYW51cCwgMCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIHBheWxvYWQgd3JhcHBlciBmb3IgYSBiYXRjaCBvZiBtZXRyaWNzIHRvIGJlIHNlbnQgdG8gSW5zaWdodHMuXG4gICAgICovXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuX2NyZWF0ZU1ldHJpY1BheWxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwYXlsb2FkID0ge1xuICAgICAgICAgICAgY2FsbF9zaWQ6IHRoaXMucGFyYW1ldGVycy5DYWxsU2lkLFxuICAgICAgICAgICAgZHNjcDogISF0aGlzLm9wdGlvbnMuZHNjcCxcbiAgICAgICAgICAgIHNka192ZXJzaW9uOiBDLlJFTEVBU0VfVkVSU0lPTixcbiAgICAgICAgICAgIHNlbGVjdGVkX3JlZ2lvbjogdGhpcy5vcHRpb25zLnNlbGVjdGVkUmVnaW9uLFxuICAgICAgICB9O1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmdhdGV3YXkpIHtcbiAgICAgICAgICAgIHBheWxvYWQuZ2F0ZXdheSA9IHRoaXMub3B0aW9ucy5nYXRld2F5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucmVnaW9uKSB7XG4gICAgICAgICAgICBwYXlsb2FkLnJlZ2lvbiA9IHRoaXMub3B0aW9ucy5yZWdpb247XG4gICAgICAgIH1cbiAgICAgICAgcGF5bG9hZC5kaXJlY3Rpb24gPSB0aGlzLl9kaXJlY3Rpb247XG4gICAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGlzY29ubmVjdCB0aGUge0BsaW5rIENvbm5lY3Rpb259LlxuICAgICAqIEBwYXJhbSBtZXNzYWdlIC0gQSBtZXNzYWdlIGV4cGxhaW5pbmcgd2h5IHRoZSB7QGxpbmsgQ29ubmVjdGlvbn0gaXMgYmVpbmcgZGlzY29ubmVjdGVkLlxuICAgICAqIEBwYXJhbSB3YXNSZW1vdGUgLSBXaGV0aGVyIHRoZSBkaXNjb25uZWN0IHdhcyB0cmlnZ2VyZWQgbG9jYWxseSBvciByZW1vdGVseS5cbiAgICAgKi9cbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5fZGlzY29ubmVjdCA9IGZ1bmN0aW9uIChtZXNzYWdlLCB3YXNSZW1vdGUpIHtcbiAgICAgICAgbWVzc2FnZSA9IHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJyA/IG1lc3NhZ2UgOiBudWxsO1xuICAgICAgICBpZiAodGhpcy5fc3RhdHVzICE9PSBDb25uZWN0aW9uLlN0YXRlLk9wZW5cbiAgICAgICAgICAgICYmIHRoaXMuX3N0YXR1cyAhPT0gQ29ubmVjdGlvbi5TdGF0ZS5Db25uZWN0aW5nXG4gICAgICAgICAgICAmJiB0aGlzLl9zdGF0dXMgIT09IENvbm5lY3Rpb24uU3RhdGUuUmVjb25uZWN0aW5nXG4gICAgICAgICAgICAmJiB0aGlzLl9zdGF0dXMgIT09IENvbm5lY3Rpb24uU3RhdGUuUmluZ2luZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2xvZy5pbmZvKCdEaXNjb25uZWN0aW5nLi4uJyk7XG4gICAgICAgIC8vIHNlbmQgcHN0cmVhbSBoYW5ndXAgbWVzc2FnZVxuICAgICAgICBpZiAodGhpcy5wc3RyZWFtICE9PSBudWxsICYmIHRoaXMucHN0cmVhbS5zdGF0dXMgIT09ICdkaXNjb25uZWN0ZWQnICYmIHRoaXMuc2VuZEhhbmd1cCkge1xuICAgICAgICAgICAgdmFyIGNhbGxzaWQgPSB0aGlzLnBhcmFtZXRlcnMuQ2FsbFNpZCB8fCB0aGlzLm91dGJvdW5kQ29ubmVjdGlvbklkO1xuICAgICAgICAgICAgaWYgKGNhbGxzaWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBzdHJlYW0uaGFuZ3VwKGNhbGxzaWQsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NsZWFudXBFdmVudExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLm1lZGlhU3RyZWFtLmNsb3NlKCk7XG4gICAgICAgIGlmICghd2FzUmVtb3RlKSB7XG4gICAgICAgICAgICB0aGlzLl9wdWJsaXNoZXIuaW5mbygnY29ubmVjdGlvbicsICdkaXNjb25uZWN0ZWQtYnktbG9jYWwnLCBudWxsLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogVHJhbnNpdGlvbiB0byB7QGxpbmsgQ29ubmVjdGlvblN0YXR1cy5PcGVufSBpZiBjcml0ZXJpYSBpcyBtZXQuXG4gICAgICovXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuX21heWJlVHJhbnNpdGlvblRvT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMubWVkaWFTdHJlYW0gJiYgdGhpcy5tZWRpYVN0cmVhbS5zdGF0dXMgPT09ICdvcGVuJyAmJiB0aGlzLl9pc0Fuc3dlcmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0dXMgPSBDb25uZWN0aW9uLlN0YXRlLk9wZW47XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2FjY2VwdCcsIHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQb3N0IGFuIGV2ZW50IHRvIEVuZHBvaW50IEFuYWx5dGljcyBpbmRpY2F0aW5nIHRoYXQgdGhlIGVuZCB1c2VyXG4gICAgICogICBoYXMgaWdub3JlZCBhIHJlcXVlc3QgZm9yIGZlZWRiYWNrLlxuICAgICAqL1xuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLl9wb3N0RmVlZGJhY2tEZWNsaW5lZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3B1Ymxpc2hlci5pbmZvKCdmZWVkYmFjaycsICdyZWNlaXZlZC1ub25lJywgbnVsbCwgdGhpcywgdHJ1ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQdWJsaXNoIHRoZSBjdXJyZW50IHNldCBvZiBxdWV1ZWQgbWV0cmljcyBzYW1wbGVzIHRvIEluc2lnaHRzLlxuICAgICAqL1xuICAgIENvbm5lY3Rpb24ucHJvdG90eXBlLl9wdWJsaXNoTWV0cmljcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuX21ldHJpY3NTYW1wbGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3B1Ymxpc2hlci5wb3N0TWV0cmljcygncXVhbGl0eS1tZXRyaWNzLXNhbXBsZXMnLCAnbWV0cmljcy1zYW1wbGUnLCB0aGlzLl9tZXRyaWNzU2FtcGxlcy5zcGxpY2UoMCksIHRoaXMuX2NyZWF0ZU1ldHJpY1BheWxvYWQoKSwgdGhpcykuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIF90aGlzLl9sb2cud2FybignVW5hYmxlIHRvIHBvc3QgbWV0cmljcyB0byBJbnNpZ2h0cy4gUmVjZWl2ZWQgZXJyb3I6JywgZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBDYWxsU2lkXG4gICAgICogQHBhcmFtIHBheWxvYWRcbiAgICAgKi9cbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5fc2V0Q2FsbFNpZCA9IGZ1bmN0aW9uIChwYXlsb2FkKSB7XG4gICAgICAgIHZhciBjYWxsU2lkID0gcGF5bG9hZC5jYWxsc2lkO1xuICAgICAgICBpZiAoIWNhbGxTaWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhcmFtZXRlcnMuQ2FsbFNpZCA9IGNhbGxTaWQ7XG4gICAgICAgIHRoaXMubWVkaWFTdHJlYW0uY2FsbFNpZCA9IGNhbGxTaWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHtAbGluayBDb25uZWN0aW9ufSBjbGFzcy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIENvbm5lY3Rpb24udG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnW1R3aWxpby5Db25uZWN0aW9uIGNsYXNzXSc7IH07XG4gICAgcmV0dXJuIENvbm5lY3Rpb247XG59KGV2ZW50c18xLkV2ZW50RW1pdHRlcikpO1xuKGZ1bmN0aW9uIChDb25uZWN0aW9uKSB7XG4gICAgLyoqXG4gICAgICogUG9zc2libGUgc3RhdGVzIG9mIHRoZSB7QGxpbmsgQ29ubmVjdGlvbn0uXG4gICAgICovXG4gICAgdmFyIFN0YXRlO1xuICAgIChmdW5jdGlvbiAoU3RhdGUpIHtcbiAgICAgICAgU3RhdGVbXCJDbG9zZWRcIl0gPSBcImNsb3NlZFwiO1xuICAgICAgICBTdGF0ZVtcIkNvbm5lY3RpbmdcIl0gPSBcImNvbm5lY3RpbmdcIjtcbiAgICAgICAgU3RhdGVbXCJPcGVuXCJdID0gXCJvcGVuXCI7XG4gICAgICAgIFN0YXRlW1wiUGVuZGluZ1wiXSA9IFwicGVuZGluZ1wiO1xuICAgICAgICBTdGF0ZVtcIlJlY29ubmVjdGluZ1wiXSA9IFwicmVjb25uZWN0aW5nXCI7XG4gICAgICAgIFN0YXRlW1wiUmluZ2luZ1wiXSA9IFwicmluZ2luZ1wiO1xuICAgIH0pKFN0YXRlID0gQ29ubmVjdGlvbi5TdGF0ZSB8fCAoQ29ubmVjdGlvbi5TdGF0ZSA9IHt9KSk7XG4gICAgLyoqXG4gICAgICogRGlmZmVyZW50IGlzc3VlcyB0aGF0IG1heSBoYXZlIGJlZW4gZXhwZXJpZW5jZWQgZHVyaW5nIGEgY2FsbCwgdGhhdCBjYW4gYmVcbiAgICAgKiByZXBvcnRlZCB0byBUd2lsaW8gSW5zaWdodHMgdmlhIHtAbGluayBDb25uZWN0aW9ufS5wb3N0RmVlZGJhY2soKS5cbiAgICAgKi9cbiAgICB2YXIgRmVlZGJhY2tJc3N1ZTtcbiAgICAoZnVuY3Rpb24gKEZlZWRiYWNrSXNzdWUpIHtcbiAgICAgICAgRmVlZGJhY2tJc3N1ZVtcIkF1ZGlvTGF0ZW5jeVwiXSA9IFwiYXVkaW8tbGF0ZW5jeVwiO1xuICAgICAgICBGZWVkYmFja0lzc3VlW1wiQ2hvcHB5QXVkaW9cIl0gPSBcImNob3BweS1hdWRpb1wiO1xuICAgICAgICBGZWVkYmFja0lzc3VlW1wiRHJvcHBlZENhbGxcIl0gPSBcImRyb3BwZWQtY2FsbFwiO1xuICAgICAgICBGZWVkYmFja0lzc3VlW1wiRWNob1wiXSA9IFwiZWNob1wiO1xuICAgICAgICBGZWVkYmFja0lzc3VlW1wiTm9pc3lDYWxsXCJdID0gXCJub2lzeS1jYWxsXCI7XG4gICAgICAgIEZlZWRiYWNrSXNzdWVbXCJPbmVXYXlBdWRpb1wiXSA9IFwib25lLXdheS1hdWRpb1wiO1xuICAgIH0pKEZlZWRiYWNrSXNzdWUgPSBDb25uZWN0aW9uLkZlZWRiYWNrSXNzdWUgfHwgKENvbm5lY3Rpb24uRmVlZGJhY2tJc3N1ZSA9IHt9KSk7XG4gICAgLyoqXG4gICAgICogQSByYXRpbmcgb2YgY2FsbCBxdWFsaXR5IGV4cGVyaWVuY2VkIGR1cmluZyBhIGNhbGwsIHRvIGJlIHJlcG9ydGVkIHRvIFR3aWxpbyBJbnNpZ2h0c1xuICAgICAqIHZpYSB7QGxpbmsgQ29ubmVjdGlvbn0ucG9zdEZlZWRiYWNrKCkuXG4gICAgICovXG4gICAgdmFyIEZlZWRiYWNrU2NvcmU7XG4gICAgKGZ1bmN0aW9uIChGZWVkYmFja1Njb3JlKSB7XG4gICAgICAgIEZlZWRiYWNrU2NvcmVbRmVlZGJhY2tTY29yZVtcIk9uZVwiXSA9IDFdID0gXCJPbmVcIjtcbiAgICAgICAgRmVlZGJhY2tTY29yZVtGZWVkYmFja1Njb3JlW1wiVHdvXCJdID0gMl0gPSBcIlR3b1wiO1xuICAgICAgICBGZWVkYmFja1Njb3JlW0ZlZWRiYWNrU2NvcmVbXCJUaHJlZVwiXSA9IDNdID0gXCJUaHJlZVwiO1xuICAgICAgICBGZWVkYmFja1Njb3JlW0ZlZWRiYWNrU2NvcmVbXCJGb3VyXCJdID0gNF0gPSBcIkZvdXJcIjtcbiAgICAgICAgRmVlZGJhY2tTY29yZVtGZWVkYmFja1Njb3JlW1wiRml2ZVwiXSA9IDVdID0gXCJGaXZlXCI7XG4gICAgfSkoRmVlZGJhY2tTY29yZSA9IENvbm5lY3Rpb24uRmVlZGJhY2tTY29yZSB8fCAoQ29ubmVjdGlvbi5GZWVkYmFja1Njb3JlID0ge30pKTtcbiAgICAvKipcbiAgICAgKiBUaGUgZGlyZWN0aW9uYWxpdHkgb2YgdGhlIHtAbGluayBDb25uZWN0aW9ufSwgd2hldGhlciBpbmNvbWluZyBvciBvdXRnb2luZy5cbiAgICAgKi9cbiAgICB2YXIgQ2FsbERpcmVjdGlvbjtcbiAgICAoZnVuY3Rpb24gKENhbGxEaXJlY3Rpb24pIHtcbiAgICAgICAgQ2FsbERpcmVjdGlvbltcIkluY29taW5nXCJdID0gXCJJTkNPTUlOR1wiO1xuICAgICAgICBDYWxsRGlyZWN0aW9uW1wiT3V0Z29pbmdcIl0gPSBcIk9VVEdPSU5HXCI7XG4gICAgfSkoQ2FsbERpcmVjdGlvbiA9IENvbm5lY3Rpb24uQ2FsbERpcmVjdGlvbiB8fCAoQ29ubmVjdGlvbi5DYWxsRGlyZWN0aW9uID0ge30pKTtcbiAgICAvKipcbiAgICAgKiBWYWxpZCBhdWRpbyBjb2RlY3MgdG8gdXNlIGZvciB0aGUgbWVkaWEgY29ubmVjdGlvbi5cbiAgICAgKi9cbiAgICB2YXIgQ29kZWM7XG4gICAgKGZ1bmN0aW9uIChDb2RlYykge1xuICAgICAgICBDb2RlY1tcIk9wdXNcIl0gPSBcIm9wdXNcIjtcbiAgICAgICAgQ29kZWNbXCJQQ01VXCJdID0gXCJwY211XCI7XG4gICAgfSkoQ29kZWMgPSBDb25uZWN0aW9uLkNvZGVjIHx8IChDb25uZWN0aW9uLkNvZGVjID0ge30pKTtcbiAgICAvKipcbiAgICAgKiBQb3NzaWJsZSBJQ0UgR2F0aGVyaW5nIGZhaWx1cmVzXG4gICAgICovXG4gICAgdmFyIEljZUdhdGhlcmluZ0ZhaWx1cmVSZWFzb247XG4gICAgKGZ1bmN0aW9uIChJY2VHYXRoZXJpbmdGYWlsdXJlUmVhc29uKSB7XG4gICAgICAgIEljZUdhdGhlcmluZ0ZhaWx1cmVSZWFzb25bXCJOb25lXCJdID0gXCJub25lXCI7XG4gICAgICAgIEljZUdhdGhlcmluZ0ZhaWx1cmVSZWFzb25bXCJUaW1lb3V0XCJdID0gXCJ0aW1lb3V0XCI7XG4gICAgfSkoSWNlR2F0aGVyaW5nRmFpbHVyZVJlYXNvbiA9IENvbm5lY3Rpb24uSWNlR2F0aGVyaW5nRmFpbHVyZVJlYXNvbiB8fCAoQ29ubmVjdGlvbi5JY2VHYXRoZXJpbmdGYWlsdXJlUmVhc29uID0ge30pKTtcbiAgICAvKipcbiAgICAgKiBQb3NzaWJsZSBtZWRpYSBmYWlsdXJlc1xuICAgICAqL1xuICAgIHZhciBNZWRpYUZhaWx1cmU7XG4gICAgKGZ1bmN0aW9uIChNZWRpYUZhaWx1cmUpIHtcbiAgICAgICAgTWVkaWFGYWlsdXJlW1wiQ29ubmVjdGlvbkRpc2Nvbm5lY3RlZFwiXSA9IFwiQ29ubmVjdGlvbkRpc2Nvbm5lY3RlZFwiO1xuICAgICAgICBNZWRpYUZhaWx1cmVbXCJDb25uZWN0aW9uRmFpbGVkXCJdID0gXCJDb25uZWN0aW9uRmFpbGVkXCI7XG4gICAgICAgIE1lZGlhRmFpbHVyZVtcIkljZUdhdGhlcmluZ0ZhaWxlZFwiXSA9IFwiSWNlR2F0aGVyaW5nRmFpbGVkXCI7XG4gICAgICAgIE1lZGlhRmFpbHVyZVtcIkxvd0J5dGVzXCJdID0gXCJMb3dCeXRlc1wiO1xuICAgIH0pKE1lZGlhRmFpbHVyZSA9IENvbm5lY3Rpb24uTWVkaWFGYWlsdXJlIHx8IChDb25uZWN0aW9uLk1lZGlhRmFpbHVyZSA9IHt9KSk7XG59KShDb25uZWN0aW9uIHx8IChDb25uZWN0aW9uID0ge30pKTtcbmZ1bmN0aW9uIGdlbmVyYXRlVGVtcENhbGxTaWQoKSB7XG4gICAgcmV0dXJuICdUSlN4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgLyogdHNsaW50OmRpc2FibGU6bm8tYml0d2lzZSAqL1xuICAgICAgICB2YXIgciA9IE1hdGgucmFuZG9tKCkgKiAxNiB8IDA7XG4gICAgICAgIHZhciB2ID0gYyA9PT0gJ3gnID8gciA6IChyICYgMHgzIHwgMHg4KTtcbiAgICAgICAgLyogdHNsaW50OmVuYWJsZTpuby1iaXR3aXNlICovXG4gICAgICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcbiAgICB9KTtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IENvbm5lY3Rpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25uZWN0aW9uLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/connection.js\n")},"./node_modules/twilio-client/es5/twilio/constants.js":module=>{eval("/**\n * This file is generated on build. To make changes, see /templates/constants.js\n */\nvar PACKAGE_NAME = 'twilio-client';\nvar RELEASE_VERSION = '1.14.0';\nvar SOUNDS_BASE_URL = 'https://sdk.twilio.com/js/client/sounds/releases/1.0.0';\nmodule.exports.COWBELL_AUDIO_URL = SOUNDS_BASE_URL + \"/cowbell.mp3?cache=\" + RELEASE_VERSION;\nmodule.exports.ECHO_TEST_DURATION = 20000;\nmodule.exports.PACKAGE_NAME = PACKAGE_NAME;\nmodule.exports.RELEASE_VERSION = RELEASE_VERSION;\nmodule.exports.SOUNDS_BASE_URL = SOUNDS_BASE_URL;\n/**\n * All errors we plan to use need to be defined here.\n */\nmodule.exports.USED_ERRORS = [\n    'AuthorizationErrors.AccessTokenExpired',\n    'AuthorizationErrors.AccessTokenInvalid',\n    'AuthorizationErrors.AuthenticationFailed',\n    'ClientErrors.BadRequest',\n    'GeneralErrors.ConnectionError',\n    'GeneralErrors.TransportError',\n    'GeneralErrors.UnknownError',\n    'MediaErrors.ClientLocalDescFailed',\n    'MediaErrors.ClientRemoteDescFailed',\n    'MediaErrors.ConnectionError',\n    'SignalingErrors.ConnectionDisconnected',\n    'SignalingErrors.ConnectionError',\n];\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLWNsaWVudC9lczUvdHdpbGlvL2NvbnN0YW50cy5qcz8wZjA0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQyxpQ0FBaUM7QUFDakMsMkJBQTJCO0FBQzNCLDhCQUE4QjtBQUM5Qiw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdHdpbGlvLWNsaWVudC9lczUvdHdpbGlvL2NvbnN0YW50cy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBmaWxlIGlzIGdlbmVyYXRlZCBvbiBidWlsZC4gVG8gbWFrZSBjaGFuZ2VzLCBzZWUgL3RlbXBsYXRlcy9jb25zdGFudHMuanNcbiAqL1xudmFyIFBBQ0tBR0VfTkFNRSA9ICd0d2lsaW8tY2xpZW50JztcbnZhciBSRUxFQVNFX1ZFUlNJT04gPSAnMS4xNC4wJztcbnZhciBTT1VORFNfQkFTRV9VUkwgPSAnaHR0cHM6Ly9zZGsudHdpbGlvLmNvbS9qcy9jbGllbnQvc291bmRzL3JlbGVhc2VzLzEuMC4wJztcbm1vZHVsZS5leHBvcnRzLkNPV0JFTExfQVVESU9fVVJMID0gU09VTkRTX0JBU0VfVVJMICsgXCIvY293YmVsbC5tcDM/Y2FjaGU9XCIgKyBSRUxFQVNFX1ZFUlNJT047XG5tb2R1bGUuZXhwb3J0cy5FQ0hPX1RFU1RfRFVSQVRJT04gPSAyMDAwMDtcbm1vZHVsZS5leHBvcnRzLlBBQ0tBR0VfTkFNRSA9IFBBQ0tBR0VfTkFNRTtcbm1vZHVsZS5leHBvcnRzLlJFTEVBU0VfVkVSU0lPTiA9IFJFTEVBU0VfVkVSU0lPTjtcbm1vZHVsZS5leHBvcnRzLlNPVU5EU19CQVNFX1VSTCA9IFNPVU5EU19CQVNFX1VSTDtcbi8qKlxuICogQWxsIGVycm9ycyB3ZSBwbGFuIHRvIHVzZSBuZWVkIHRvIGJlIGRlZmluZWQgaGVyZS5cbiAqL1xubW9kdWxlLmV4cG9ydHMuVVNFRF9FUlJPUlMgPSBbXG4gICAgJ0F1dGhvcml6YXRpb25FcnJvcnMuQWNjZXNzVG9rZW5FeHBpcmVkJyxcbiAgICAnQXV0aG9yaXphdGlvbkVycm9ycy5BY2Nlc3NUb2tlbkludmFsaWQnLFxuICAgICdBdXRob3JpemF0aW9uRXJyb3JzLkF1dGhlbnRpY2F0aW9uRmFpbGVkJyxcbiAgICAnQ2xpZW50RXJyb3JzLkJhZFJlcXVlc3QnLFxuICAgICdHZW5lcmFsRXJyb3JzLkNvbm5lY3Rpb25FcnJvcicsXG4gICAgJ0dlbmVyYWxFcnJvcnMuVHJhbnNwb3J0RXJyb3InLFxuICAgICdHZW5lcmFsRXJyb3JzLlVua25vd25FcnJvcicsXG4gICAgJ01lZGlhRXJyb3JzLkNsaWVudExvY2FsRGVzY0ZhaWxlZCcsXG4gICAgJ01lZGlhRXJyb3JzLkNsaWVudFJlbW90ZURlc2NGYWlsZWQnLFxuICAgICdNZWRpYUVycm9ycy5Db25uZWN0aW9uRXJyb3InLFxuICAgICdTaWduYWxpbmdFcnJvcnMuQ29ubmVjdGlvbkRpc2Nvbm5lY3RlZCcsXG4gICAgJ1NpZ25hbGluZ0Vycm9ycy5Db25uZWN0aW9uRXJyb3InLFxuXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/constants.js\n")},"./node_modules/twilio-client/es5/twilio/deferred.js":(__unused_webpack_module,exports)=>{"use strict";eval('\n/**\n * @packageDocumentation\n * @module Voice\n * @internalapi\n */\nObject.defineProperty(exports, "__esModule", ({ value: true }));\n/**\n * Deferred Promise\n */\nvar Deferred = /** @class */ (function () {\n    /**\n     * @constructor\n     */\n    function Deferred() {\n        var _this = this;\n        this._promise = new Promise(function (resolve, reject) {\n            _this._resolve = resolve;\n            _this._reject = reject;\n        });\n    }\n    Object.defineProperty(Deferred.prototype, "promise", {\n        /**\n         * @returns The {@link Deferred} Promise\n         */\n        get: function () {\n            return this._promise;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Rejects this promise\n     */\n    Deferred.prototype.reject = function (reason) {\n        this._reject(reason);\n    };\n    /**\n     * Resolves this promise\n     */\n    Deferred.prototype.resolve = function (value) {\n        this._resolve(value);\n    };\n    return Deferred;\n}());\nexports.default = Deferred;\n//# sourceMappingURL=deferred.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLWNsaWVudC9lczUvdHdpbGlvL2RlZmVycmVkLmpzP2Q5MzciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLENBQUMsY0FBYyxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsZUFBZTtBQUN4QztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxlQUFlO0FBQ2YiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdHdpbGlvLWNsaWVudC9lczUvdHdpbGlvL2RlZmVycmVkLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQG1vZHVsZSBWb2ljZVxuICogQGludGVybmFsYXBpXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogRGVmZXJyZWQgUHJvbWlzZVxuICovXG52YXIgRGVmZXJyZWQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICovXG4gICAgZnVuY3Rpb24gRGVmZXJyZWQoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3Byb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBfdGhpcy5fcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICAgICAgICBfdGhpcy5fcmVqZWN0ID0gcmVqZWN0O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERlZmVycmVkLnByb3RvdHlwZSwgXCJwcm9taXNlXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEByZXR1cm5zIFRoZSB7QGxpbmsgRGVmZXJyZWR9IFByb21pc2VcbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb21pc2U7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIFJlamVjdHMgdGhpcyBwcm9taXNlXG4gICAgICovXG4gICAgRGVmZXJyZWQucHJvdG90eXBlLnJlamVjdCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgdGhpcy5fcmVqZWN0KHJlYXNvbik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXNvbHZlcyB0aGlzIHByb21pc2VcbiAgICAgKi9cbiAgICBEZWZlcnJlZC5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9yZXNvbHZlKHZhbHVlKTtcbiAgICB9O1xuICAgIHJldHVybiBEZWZlcnJlZDtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBEZWZlcnJlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmVycmVkLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/deferred.js\n')},"./node_modules/twilio-client/es5/twilio/device.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * @packageDocumentation\n * @module Voice\n * @preferred\n * @publicapi\n */\nvar events_1 = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\nvar audiohelper_1 = __webpack_require__(/*! ./audiohelper */ \"./node_modules/twilio-client/es5/twilio/audiohelper.js\");\nvar connection_1 = __webpack_require__(/*! ./connection */ \"./node_modules/twilio-client/es5/twilio/connection.js\");\nvar dialtonePlayer_1 = __webpack_require__(/*! ./dialtonePlayer */ \"./node_modules/twilio-client/es5/twilio/dialtonePlayer.js\");\nvar errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/twilio-client/es5/twilio/errors/index.js\");\nvar log_1 = __webpack_require__(/*! ./log */ \"./node_modules/twilio-client/es5/twilio/log.js\");\nvar preflight_1 = __webpack_require__(/*! ./preflight/preflight */ \"./node_modules/twilio-client/es5/twilio/preflight/preflight.js\");\nvar regions_1 = __webpack_require__(/*! ./regions */ \"./node_modules/twilio-client/es5/twilio/regions.js\");\nvar util_1 = __webpack_require__(/*! ./util */ \"./node_modules/twilio-client/es5/twilio/util.js\");\nvar C = __webpack_require__(/*! ./constants */ \"./node_modules/twilio-client/es5/twilio/constants.js\");\nvar Publisher = __webpack_require__(/*! ./eventpublisher */ \"./node_modules/twilio-client/es5/twilio/eventpublisher.js\");\nvar PStream = __webpack_require__(/*! ./pstream */ \"./node_modules/twilio-client/es5/twilio/pstream.js\");\nvar rtc = __webpack_require__(/*! ./rtc */ \"./node_modules/twilio-client/es5/twilio/rtc/index.js\");\nvar getUserMedia = __webpack_require__(/*! ./rtc/getusermedia */ \"./node_modules/twilio-client/es5/twilio/rtc/getusermedia.js\");\nvar Sound = __webpack_require__(/*! ./sound */ \"./node_modules/twilio-client/es5/twilio/sound.js\");\nvar REGISTRATION_INTERVAL = 30000;\nvar RINGTONE_PLAY_TIMEOUT = 2000;\nvar hasBeenWarnedHandlers = false;\nvar hasBeenWarnedSounds = false;\n/**\n * Twilio Device. Allows registration for incoming calls, and placing outgoing calls.\n * @publicapi\n */\nvar Device = /** @class */ (function (_super) {\n    __extends(Device, _super);\n    function Device(token, options) {\n        var _a;\n        var _this = _super.call(this) || this;\n        /**\n         * The AudioHelper instance associated with this {@link Device}.\n         */\n        _this.audio = null;\n        /**\n         * An array of {@link Connection}s. Though only one can be active, multiple may exist when there\n         * are multiple incoming, unanswered {@link Connection}s.\n         */\n        _this.connections = [];\n        /**\n         * Whether or not {@link Device.setup} has been called.\n         */\n        _this.isInitialized = false;\n        /**\n         * Methods to enable/disable each sound. Empty if the {@link Device} has not\n         * yet been set up.\n         */\n        _this.sounds = {};\n        /**\n         * The JWT string currently being used to authenticate this {@link Device}.\n         */\n        _this.token = null;\n        /**\n         * The currently active {@link Connection}, if there is one.\n         */\n        _this._activeConnection = null;\n        /**\n         * The list of chunder URIs that will be passed to PStream\n         */\n        _this._chunderURIs = [];\n        /**\n         * An audio input MediaStream to pass to new {@link Connection} instances.\n         */\n        _this._connectionInputStream = null;\n        /**\n         * An array of {@link Device} IDs to be used to play sounds through, to be passed to\n         * new {@link Connection} instances.\n         */\n        _this._connectionSinkIds = ['default'];\n        /**\n         * The name of the edge the {@link Device} is connected to.\n         */\n        _this._edge = null;\n        /**\n         * Whether each sound is enabled.\n         */\n        _this._enabledSounds = (_a = {},\n            _a[Device.SoundName.Disconnect] = true,\n            _a[Device.SoundName.Incoming] = true,\n            _a[Device.SoundName.Outgoing] = true,\n            _a);\n        /**\n         * An instance of Logger to use.\n         */\n        _this._log = log_1.default.getInstance();\n        /**\n         * An Insights Event Publisher.\n         */\n        _this._publisher = null;\n        /**\n         * The region the {@link Device} is connected to.\n         */\n        _this._region = null;\n        /**\n         * The current status of the {@link Device}.\n         */\n        _this._status = Device.Status.Offline;\n        /**\n         * Value of 'audio' determines whether we should be registered for incoming calls.\n         */\n        _this.mediaPresence = { audio: true };\n        /**\n         * The options passed to {@link Device} constructor or Device.setup.\n         */\n        _this.options = {\n            allowIncomingWhileBusy: false,\n            audioConstraints: true,\n            closeProtection: false,\n            codecPreferences: [connection_1.default.Codec.PCMU, connection_1.default.Codec.Opus],\n            connectionFactory: connection_1.default,\n            debug: false,\n            dscp: true,\n            enableIceRestart: false,\n            eventgw: 'eventgw.twilio.com',\n            forceAggressiveIceNomination: false,\n            iceServers: [],\n            noRegister: false,\n            pStreamFactory: PStream,\n            preflight: false,\n            rtcConstraints: {},\n            soundFactory: Sound,\n            sounds: {},\n            warnings: true,\n        };\n        /**\n         * A timeout ID for a setTimeout schedule to re-register the {@link Device}.\n         */\n        _this.regTimer = null;\n        /**\n         * A Map of Sounds to play.\n         */\n        _this.soundcache = new Map();\n        /**\n         * The Signaling stream.\n         */\n        _this.stream = null;\n        /**\n         * Destroy the {@link Device}, freeing references to be garbage collected.\n         */\n        _this.destroy = function () {\n            _this._disconnectAll();\n            _this._stopRegistrationTimer();\n            if (_this.audio) {\n                _this.audio._unbind();\n            }\n            if (_this.stream) {\n                _this.stream.destroy();\n                _this.stream = null;\n            }\n            if (_this._networkInformation && typeof _this._networkInformation.removeEventListener === 'function') {\n                _this._networkInformation.removeEventListener('change', _this._publishNetworkChange);\n            }\n            if (typeof window !== 'undefined' && window.removeEventListener) {\n                window.removeEventListener('beforeunload', _this._confirmClose);\n                window.removeEventListener('unload', _this.destroy);\n                window.removeEventListener('pagehide', _this.destroy);\n            }\n        };\n        /**\n         * Called on window's beforeunload event if closeProtection is enabled,\n         * preventing users from accidentally navigating away from an active call.\n         * @param event\n         */\n        _this._confirmClose = function (event) {\n            if (!_this._activeConnection) {\n                return '';\n            }\n            var closeProtection = _this.options.closeProtection || false;\n            var confirmationMsg = typeof closeProtection !== 'string'\n                ? 'A call is currently in-progress. Leaving or reloading this page will end the call.'\n                : closeProtection;\n            (event || window.event).returnValue = confirmationMsg;\n            return confirmationMsg;\n        };\n        /**\n         * Create the default Insights payload\n         * @param [connection]\n         */\n        _this._createDefaultPayload = function (connection) {\n            var payload = {\n                aggressive_nomination: _this.options.forceAggressiveIceNomination,\n                browser_extension: _this._isBrowserExtension,\n                dscp: !!_this.options.dscp,\n                ice_restart_enabled: _this.options.enableIceRestart,\n                platform: rtc.getMediaEngine(),\n                sdk_version: C.RELEASE_VERSION,\n            };\n            function setIfDefined(propertyName, value) {\n                if (value) {\n                    payload[propertyName] = value;\n                }\n            }\n            if (connection) {\n                var callSid = connection.parameters.CallSid;\n                setIfDefined('call_sid', /^TJ/.test(callSid) ? undefined : callSid);\n                setIfDefined('temp_call_sid', connection.outboundConnectionId);\n                setIfDefined('audio_codec', connection.codec);\n                payload.direction = connection.direction;\n            }\n            setIfDefined('gateway', _this.stream && _this.stream.gateway);\n            setIfDefined('selected_region', _this.options.region);\n            setIfDefined('region', _this.stream && _this.stream.region);\n            return payload;\n        };\n        /**\n         * Disconnect all {@link Connection}s.\n         */\n        _this._disconnectAll = function () {\n            var connections = _this.connections.splice(0);\n            connections.forEach(function (conn) { return conn.disconnect(); });\n            if (_this._activeConnection) {\n                _this._activeConnection.disconnect();\n            }\n        };\n        /**\n         * Called when a 'close' event is received from the signaling stream.\n         */\n        _this._onSignalingClose = function () {\n            _this.stream = null;\n        };\n        /**\n         * Called when a 'connected' event is received from the signaling stream.\n         */\n        _this._onSignalingConnected = function (payload) {\n            var region = regions_1.getRegionShortcode(payload.region);\n            _this._edge = regions_1.regionToEdge[region] || payload.region;\n            _this._region = region || payload.region;\n            _this._sendPresence();\n        };\n        /**\n         * Called when an 'error' event is received from the signaling stream.\n         */\n        _this._onSignalingError = function (payload) {\n            if (!payload.error) {\n                return;\n            }\n            var error = __assign({}, payload.error);\n            var sid = payload.callsid;\n            if (sid) {\n                error.connection = _this._findConnection(sid);\n            }\n            if (error.code === 31201) {\n                error.twilioError = new errors_1.AuthorizationErrors.AuthenticationFailed();\n            }\n            else if (error.code === 31204) {\n                error.twilioError = new errors_1.AuthorizationErrors.AccessTokenInvalid();\n            }\n            else if (error.code === 31205) {\n                // Stop trying to register presence after token expires\n                _this._stopRegistrationTimer();\n                error.twilioError = new errors_1.AuthorizationErrors.AccessTokenExpired();\n            }\n            else if (!error.twilioError) {\n                error.twilioError = new errors_1.GeneralErrors.UnknownError();\n            }\n            _this._log.info('Received error: ', error);\n            _this.emit('error', error);\n        };\n        /**\n         * Called when an 'invite' event is received from the signaling stream.\n         */\n        _this._onSignalingInvite = function (payload) {\n            var wasBusy = !!_this._activeConnection;\n            if (wasBusy && !_this.options.allowIncomingWhileBusy) {\n                _this._log.info('Device busy; ignoring incoming invite');\n                return;\n            }\n            if (!payload.callsid || !payload.sdp) {\n                _this.emit('error', { message: 'Malformed invite from gateway', twilioError: new errors_1.ClientErrors.BadRequest() });\n                return;\n            }\n            var callParameters = payload.parameters || {};\n            callParameters.CallSid = callParameters.CallSid || payload.callsid;\n            var customParameters = Object.assign({}, util_1.queryToJson(callParameters.Params));\n            var connection = _this._makeConnection(customParameters, {\n                callParameters: callParameters,\n                offerSdp: payload.sdp,\n            });\n            _this.connections.push(connection);\n            connection.once('accept', function () {\n                _this.soundcache.get(Device.SoundName.Incoming).stop();\n                _this._publishNetworkChange();\n            });\n            var play = (_this._enabledSounds.incoming && !wasBusy)\n                ? function () { return _this.soundcache.get(Device.SoundName.Incoming).play(); }\n                : function () { return Promise.resolve(); };\n            _this._showIncomingConnection(connection, play);\n        };\n        /**\n         * Called when an 'offline' event is received from the signaling stream.\n         */\n        _this._onSignalingOffline = function () {\n            _this._log.info('Stream is offline');\n            _this._status = Device.Status.Offline;\n            _this._edge = null;\n            _this._region = null;\n            _this.emit('offline', _this);\n        };\n        /**\n         * Called when a 'ready' event is received from the signaling stream.\n         */\n        _this._onSignalingReady = function () {\n            _this._log.info('Stream is ready');\n            _this._status = Device.Status.Ready;\n            _this.emit('ready', _this);\n        };\n        /**\n         * Publish a NetworkInformation#change event to Insights if there's an active {@link Connection}.\n         */\n        _this._publishNetworkChange = function () {\n            if (!_this._activeConnection) {\n                return;\n            }\n            if (_this._networkInformation) {\n                _this._publisher.info('network-information', 'network-change', {\n                    connection_type: _this._networkInformation.type,\n                    downlink: _this._networkInformation.downlink,\n                    downlinkMax: _this._networkInformation.downlinkMax,\n                    effective_type: _this._networkInformation.effectiveType,\n                    rtt: _this._networkInformation.rtt,\n                }, _this._activeConnection);\n            }\n        };\n        /**\n         * Update the input stream being used for calls so that any current call and all future calls\n         * will use the new input stream.\n         * @param inputStream\n         */\n        _this._updateInputStream = function (inputStream) {\n            var connection = _this._activeConnection;\n            if (connection && !inputStream) {\n                return Promise.reject(new errors_1.InvalidStateError('Cannot unset input device while a call is in progress.'));\n            }\n            _this._connectionInputStream = inputStream;\n            return connection\n                ? connection._setInputTracksFromStream(inputStream)\n                : Promise.resolve();\n        };\n        /**\n         * Update the device IDs of output devices being used to play sounds through.\n         * @param type - Whether to update ringtone or speaker sounds\n         * @param sinkIds - An array of device IDs\n         */\n        _this._updateSinkIds = function (type, sinkIds) {\n            var promise = type === 'ringtone'\n                ? _this._updateRingtoneSinkIds(sinkIds)\n                : _this._updateSpeakerSinkIds(sinkIds);\n            return promise.then(function () {\n                _this._publisher.info('audio', type + \"-devices-set\", {\n                    audio_device_ids: sinkIds,\n                }, _this._activeConnection);\n            }, function (error) {\n                _this._publisher.error('audio', type + \"-devices-set-failed\", {\n                    audio_device_ids: sinkIds,\n                    message: error.message,\n                }, _this._activeConnection);\n                throw error;\n            });\n        };\n        if (window) {\n            var root = window;\n            var browser = root.msBrowser || root.browser || root.chrome;\n            _this._isBrowserExtension = (!!browser && !!browser.runtime && !!browser.runtime.id)\n                || (!!root.safari && !!root.safari.extension);\n        }\n        if (_this._isBrowserExtension) {\n            _this._log.info('Running as browser extension.');\n        }\n        if (navigator) {\n            var n = navigator;\n            _this._networkInformation = n.connection\n                || n.mozConnection\n                || n.webkitConnection;\n        }\n        if (token) {\n            _this.setup(token, options);\n        }\n        else if (options) {\n            throw new errors_1.InvalidArgumentError('Cannot construct a Device with options but without a token');\n        }\n        return _this;\n    }\n    Object.defineProperty(Device, \"audioContext\", {\n        /**\n         * The AudioContext to be used by {@link Device} instances.\n         * @private\n         */\n        get: function () {\n            return Device._audioContext;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Device, \"extension\", {\n        /**\n         * Which sound file extension is supported.\n         * @private\n         */\n        get: function () {\n            // NOTE(mroberts): Node workaround.\n            var a = typeof document !== 'undefined'\n                ? document.createElement('audio') : { canPlayType: false };\n            var canPlayMp3;\n            try {\n                canPlayMp3 = a.canPlayType && !!a.canPlayType('audio/mpeg').replace(/no/, '');\n            }\n            catch (e) {\n                canPlayMp3 = false;\n            }\n            var canPlayVorbis;\n            try {\n                canPlayVorbis = a.canPlayType && !!a.canPlayType('audio/ogg;codecs=\\'vorbis\\'').replace(/no/, '');\n            }\n            catch (e) {\n                canPlayVorbis = false;\n            }\n            return (canPlayVorbis && !canPlayMp3) ? 'ogg' : 'mp3';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Device, \"isSupported\", {\n        /**\n         * Whether or not this SDK is supported by the current browser.\n         */\n        get: function () { return rtc.enabled(); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Device, \"packageName\", {\n        /**\n         * Package name of the SDK.\n         */\n        get: function () { return C.PACKAGE_NAME; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Run some tests to identify issues, if any, prohibiting successful calling.\n     * @param token - A Twilio JWT token string\n     * @param options\n     */\n    Device.runPreflight = function (token, options) {\n        return new preflight_1.PreflightTest(token, __assign({ audioContext: Device._getOrCreateAudioContext() }, options));\n    };\n    /**\n     * String representation of {@link Device} class.\n     * @private\n     */\n    Device.toString = function () {\n        return '[Twilio.Device class]';\n    };\n    Object.defineProperty(Device, \"version\", {\n        /**\n         * Current SDK version.\n         */\n        get: function () { return C.RELEASE_VERSION; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Initializes the AudioContext instance shared across the Client SDK,\n     * or returns the existing instance if one has already been initialized.\n     */\n    Device._getOrCreateAudioContext = function () {\n        if (!Device._audioContext) {\n            if (typeof AudioContext !== 'undefined') {\n                Device._audioContext = new AudioContext();\n            }\n            else if (typeof webkitAudioContext !== 'undefined') {\n                Device._audioContext = new webkitAudioContext();\n            }\n        }\n        return Device._audioContext;\n    };\n    /**\n     * Return the active {@link Connection}. Null or undefined for backward compatibility.\n     */\n    Device.prototype.activeConnection = function () {\n        if (!this.isInitialized) {\n            return null;\n        }\n        // @rrowland This should only return activeConnection, but customers have built around this\n        // broken behavior and in order to not break their apps we are including this until\n        // the next big release.\n        return this._activeConnection || this.connections[0];\n    };\n    /**\n     * @deprecated Set a handler for the cancel event.\n     * @param handler\n     */\n    Device.prototype.cancel = function (handler) {\n        return this._addHandler(Device.EventName.Cancel, handler);\n    };\n    Device.prototype.connect = function (paramsOrHandler, audioConstraints, rtcConfiguration) {\n        if (typeof paramsOrHandler === 'function') {\n            this._addHandler(Device.EventName.Connect, paramsOrHandler);\n            return null;\n        }\n        this._throwUnlessSetup('connect');\n        if (this._activeConnection) {\n            throw new errors_1.InvalidStateError('A Connection is already active');\n        }\n        var params = paramsOrHandler || {};\n        audioConstraints = audioConstraints || this.options && this.options.audioConstraints || {};\n        rtcConfiguration = rtcConfiguration || this.options.rtcConfiguration;\n        var connection = this._activeConnection = this._makeConnection(params, { rtcConfiguration: rtcConfiguration });\n        // Make sure any incoming connections are ignored\n        this.connections.splice(0).forEach(function (conn) { return conn.ignore(); });\n        // Stop the incoming sound if it's playing\n        this.soundcache.get(Device.SoundName.Incoming).stop();\n        connection.accept(audioConstraints);\n        this._publishNetworkChange();\n        return connection;\n    };\n    /**\n     * Set a handler for the disconnect event.\n     * @deprecated Use {@link Device.on}.\n     * @param handler\n     */\n    Device.prototype.disconnect = function (handler) {\n        return this._addHandler(Device.EventName.Disconnect, handler);\n    };\n    /**\n     * Disconnect all {@link Connection}s.\n     */\n    Device.prototype.disconnectAll = function () {\n        this._throwUnlessSetup('disconnectAll');\n        this._disconnectAll();\n    };\n    Object.defineProperty(Device.prototype, \"edge\", {\n        /**\n         * Returns the {@link Edge} value the {@link Device} is currently connected\n         * to. The value will be `null` when the {@link Device} is offline.\n         */\n        get: function () {\n            return this._edge;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Set a handler for the error event.\n     * @deprecated Use {@link Device.on}.\n     * @param handler\n     */\n    Device.prototype.error = function (handler) {\n        return this._addHandler(Device.EventName.Error, handler);\n    };\n    /**\n     * Set a handler for the incoming event.\n     * @deprecated Use {@link Device.on}.\n     * @param handler\n     */\n    Device.prototype.incoming = function (handler) {\n        return this._addHandler(Device.EventName.Incoming, handler);\n    };\n    /**\n     * Set a handler for the offline event.\n     * @deprecated Use {@link Device.on}.\n     * @param handler\n     */\n    Device.prototype.offline = function (handler) {\n        return this._addHandler(Device.EventName.Offline, handler);\n    };\n    /**\n     * Set a handler for the ready event.\n     * @deprecated Use {@link Device.on}.\n     * @param handler\n     */\n    Device.prototype.ready = function (handler) {\n        return this._addHandler(Device.EventName.Ready, handler);\n    };\n    /**\n     * Get the {@link Region} string the {@link Device} is currently connected to, or 'offline'\n     * if not connected.\n     */\n    Device.prototype.region = function () {\n        this._log.warn('`Device.region` is deprecated and will be removed in the next major ' +\n            'release. Please use `Device.edge` instead.');\n        this._throwUnlessSetup('region');\n        return typeof this._region === 'string' ? this._region : 'offline';\n    };\n    /**\n     * Register to receive incoming calls. Does not need to be called unless {@link Device.unregisterPresence}\n     * has been called directly.\n     */\n    Device.prototype.registerPresence = function () {\n        this._throwUnlessSetup('registerPresence');\n        this.mediaPresence.audio = true;\n        this._sendPresence();\n        return this;\n    };\n    /**\n     * Remove an event listener\n     * @param event - The event name to stop listening for\n     * @param listener - The callback to remove\n     */\n    Device.prototype.removeListener = function (event, listener) {\n        events_1.EventEmitter.prototype.removeListener.call(this, event, listener);\n        return this;\n    };\n    /**\n     * Initialize the {@link Device}.\n     * @param token - A Twilio JWT token string granting this {@link Device} access.\n     * @param [options]\n     */\n    Device.prototype.setup = function (token, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        if (util_1.isLegacyEdge()) {\n            throw new errors_1.NotSupportedError('Microsoft Edge Legacy (https://support.microsoft.com/en-us/help/4533505/what-is-microsoft-edge-legacy) ' +\n                'is deprecated and will not be able to connect to Twilio to make or receive calls after September 1st, 2020. ' +\n                'Please see this documentation for a list of supported browsers ' +\n                'https://www.twilio.com/docs/voice/client/javascript#supported-browsers');\n        }\n        if (!Device.isSupported && !options.ignoreBrowserSupport) {\n            if (window && window.location && window.location.protocol === 'http:') {\n                throw new errors_1.NotSupportedError(\"twilio.js wasn't able to find WebRTC browser support.           This is most likely because this page is served over http rather than https,           which does not support WebRTC in many browsers. Please load this page over https and           try again.\");\n            }\n            throw new errors_1.NotSupportedError(\"twilio.js 1.3+ SDKs require WebRTC browser support.         For more information, see <https://www.twilio.com/docs/api/client/twilio-js>.         If you have any questions about this announcement, please contact         Twilio Support at <help@twilio.com>.\");\n        }\n        if (!token) {\n            throw new errors_1.InvalidArgumentError('Token is required for Device.setup()');\n        }\n        Object.assign(this.options, options);\n        this._log.setDefaultLevel(this.options.debug\n            ? log_1.default.levels.DEBUG\n            : this.options.warnings\n                ? log_1.default.levels.WARN\n                : log_1.default.levels.SILENT);\n        this._chunderURIs = this.options.chunderw\n            ? [\"wss://\" + this.options.chunderw + \"/signal\"]\n            : regions_1.getChunderURIs(this.options.edge, this.options.region, this._log.warn.bind(this._log)).map(function (uri) { return \"wss://\" + uri + \"/signal\"; });\n        if (typeof Device._isUnifiedPlanDefault === 'undefined') {\n            Device._isUnifiedPlanDefault = typeof window !== 'undefined'\n                && typeof RTCPeerConnection !== 'undefined'\n                && typeof RTCRtpTransceiver !== 'undefined'\n                ? util_1.isUnifiedPlanDefault(window, window.navigator, RTCPeerConnection, RTCRtpTransceiver)\n                : false;\n        }\n        Device._getOrCreateAudioContext();\n        if (Device._audioContext && options.fakeLocalDTMF) {\n            if (!Device._dialtonePlayer) {\n                Device._dialtonePlayer = new dialtonePlayer_1.default(Device._audioContext);\n            }\n        }\n        else if (Device._dialtonePlayer) {\n            Device._dialtonePlayer.cleanup();\n            delete Device._dialtonePlayer;\n        }\n        if (this.isInitialized) {\n            this._log.info('Found existing Device; using new token but ignoring options');\n            this.updateToken(token);\n            return this;\n        }\n        this.isInitialized = true;\n        if (this.options.dscp) {\n            this.options.rtcConstraints.optional = [{ googDscp: true }];\n        }\n        var getOrSetSound = function (key, value) {\n            if (!hasBeenWarnedSounds) {\n                _this._log.warn('Device.sounds is deprecated and will be removed in the next breaking ' +\n                    'release. Please use the new functionality available on Device.audio.');\n                hasBeenWarnedSounds = true;\n            }\n            if (typeof value !== 'undefined') {\n                _this._enabledSounds[key] = value;\n            }\n            return _this._enabledSounds[key];\n        };\n        [Device.SoundName.Disconnect, Device.SoundName.Incoming, Device.SoundName.Outgoing]\n            .forEach(function (eventName) {\n            _this.sounds[eventName] = getOrSetSound.bind(null, eventName);\n        });\n        var defaultSounds = {\n            disconnect: { filename: 'disconnect', maxDuration: 3000 },\n            dtmf0: { filename: 'dtmf-0', maxDuration: 1000 },\n            dtmf1: { filename: 'dtmf-1', maxDuration: 1000 },\n            dtmf2: { filename: 'dtmf-2', maxDuration: 1000 },\n            dtmf3: { filename: 'dtmf-3', maxDuration: 1000 },\n            dtmf4: { filename: 'dtmf-4', maxDuration: 1000 },\n            dtmf5: { filename: 'dtmf-5', maxDuration: 1000 },\n            dtmf6: { filename: 'dtmf-6', maxDuration: 1000 },\n            dtmf7: { filename: 'dtmf-7', maxDuration: 1000 },\n            dtmf8: { filename: 'dtmf-8', maxDuration: 1000 },\n            dtmf9: { filename: 'dtmf-9', maxDuration: 1000 },\n            dtmfh: { filename: 'dtmf-hash', maxDuration: 1000 },\n            dtmfs: { filename: 'dtmf-star', maxDuration: 1000 },\n            incoming: { filename: 'incoming', shouldLoop: true },\n            outgoing: { filename: 'outgoing', maxDuration: 3000 },\n        };\n        for (var _i = 0, _a = Object.keys(defaultSounds); _i < _a.length; _i++) {\n            var name_1 = _a[_i];\n            var soundDef = defaultSounds[name_1];\n            var defaultUrl = C.SOUNDS_BASE_URL + \"/\" + soundDef.filename + \".\" + Device.extension\n                + (\"?cache=\" + C.RELEASE_VERSION);\n            var soundUrl = this.options.sounds && this.options.sounds[name_1] || defaultUrl;\n            var sound = new this.options.soundFactory(name_1, soundUrl, {\n                audioContext: this.options.disableAudioContextSounds ? null : Device.audioContext,\n                maxDuration: soundDef.maxDuration,\n                shouldLoop: soundDef.shouldLoop,\n            });\n            this.soundcache.set(name_1, sound);\n        }\n        this._publisher = (this.options.Publisher || Publisher)('twilio-js-sdk', token, {\n            defaultPayload: this._createDefaultPayload,\n            host: this.options.eventgw,\n            metadata: {\n                app_name: this.options.appName,\n                app_version: this.options.appVersion,\n            },\n        });\n        if (this.options.publishEvents === false) {\n            this._publisher.disable();\n        }\n        else {\n            this._publisher.on('error', function (error) {\n                _this._log.warn('Cannot connect to insights.', error);\n            });\n        }\n        if (this._networkInformation && typeof this._networkInformation.addEventListener === 'function') {\n            this._networkInformation.addEventListener('change', this._publishNetworkChange);\n        }\n        this.audio = new (this.options.AudioHelper || audiohelper_1.default)(this._updateSinkIds, this._updateInputStream, getUserMedia, {\n            audioContext: Device.audioContext,\n            enabledSounds: this._enabledSounds,\n        });\n        this.audio.on('deviceChange', function (lostActiveDevices) {\n            var activeConnection = _this._activeConnection;\n            var deviceIds = lostActiveDevices.map(function (device) { return device.deviceId; });\n            _this._publisher.info('audio', 'device-change', {\n                lost_active_device_ids: deviceIds,\n            }, activeConnection);\n            if (activeConnection) {\n                activeConnection.mediaStream._onInputDevicesChanged();\n            }\n        });\n        this.mediaPresence.audio = !this.options.noRegister;\n        this.updateToken(token);\n        // Setup close protection and make sure we clean up ongoing calls on unload.\n        if (typeof window !== 'undefined' && window.addEventListener) {\n            window.addEventListener('unload', this.destroy);\n            window.addEventListener('pagehide', this.destroy);\n            if (this.options.closeProtection) {\n                window.addEventListener('beforeunload', this._confirmClose);\n            }\n        }\n        // (rrowland) This maintains backward compatibility, but we should look at\n        // removing this next breaking change. Any error should be caught by the\n        // customer, and anything that's not a fatal error should not be emitted\n        // via error event.\n        this.on(Device.EventName.Error, function () {\n            if (_this.listenerCount('error') > 1) {\n                return;\n            }\n            _this._log.info('Uncaught error event suppressed.');\n        });\n        return this;\n    };\n    /**\n     * Get the status of this {@link Device} instance\n     */\n    Device.prototype.status = function () {\n        this._throwUnlessSetup('status');\n        return this._activeConnection ? Device.Status.Busy : this._status;\n    };\n    /**\n     * String representation of {@link Device} instance.\n     * @private\n     */\n    Device.prototype.toString = function () {\n        return '[Twilio.Device instance]';\n    };\n    /**\n     * Unregister to receiving incoming calls.\n     */\n    Device.prototype.unregisterPresence = function () {\n        this._throwUnlessSetup('unregisterPresence');\n        this.mediaPresence.audio = false;\n        this._sendPresence();\n        return this;\n    };\n    /**\n     * Update the token and re-register.\n     * @param token - The new token JWT string to register with.\n     */\n    Device.prototype.updateToken = function (token) {\n        this._throwUnlessSetup('updateToken');\n        this.token = token;\n        this.register(token);\n    };\n    /**\n     * Add a handler for an EventEmitter and emit a deprecation warning on first call.\n     * @param eventName - Name of the event\n     * @param handler - A handler to call when the event is emitted\n     */\n    Device.prototype._addHandler = function (eventName, handler) {\n        if (!hasBeenWarnedHandlers) {\n            this._log.warn(\"Device callback handlers (connect, error, offline, incoming, cancel, ready, disconnect)         have been deprecated and will be removed in the next breaking release. Instead, the EventEmitter         interface can be used to set event listeners. Example: device.on('\" + eventName + \"', handler)\");\n            hasBeenWarnedHandlers = true;\n        }\n        this.addListener(eventName, handler);\n        return this;\n    };\n    /**\n     * Calls the emit API such that it is asynchronous.\n     * Only use this internal API if you don't want to break the execution after raising an event.\n     * This prevents the issue where events are not dispatched to all handlers when one of the handlers throws an error.\n     * For example, our connection:accept is not triggered if the handler for device:connect handler throws an error.\n     * As a side effect, we are not able to perform our internal routines such as stopping incoming sounds.\n     * See connection:accept inside _makeConnection where we call emit('connect'). This can throw an error.\n     * See connection:accept inside _onSignalingInvite. This handler won't get called if the error above is thrown.\n     * @private\n     */\n    Device.prototype._asyncEmit = function (event) {\n        var _this = this;\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        setTimeout(function () { return _this.emit.apply(_this, __spreadArrays([event], args)); });\n    };\n    /**\n     * Find a {@link Connection} by its CallSid.\n     * @param callSid\n     */\n    Device.prototype._findConnection = function (callSid) {\n        return this.connections.find(function (conn) { return conn.parameters.CallSid === callSid\n            || conn.outboundConnectionId === callSid; }) || null;\n    };\n    /**\n     * Create a new {@link Connection}.\n     * @param twimlParams - A flat object containing key:value pairs to be sent to the TwiML app.\n     * @param [options] - Options to be used to instantiate the {@link Connection}.\n     */\n    Device.prototype._makeConnection = function (twimlParams, options) {\n        var _this = this;\n        if (typeof Device._isUnifiedPlanDefault === 'undefined') {\n            throw new errors_1.InvalidStateError('Device has not been initialized.');\n        }\n        var config = {\n            audioHelper: this.audio,\n            getUserMedia: getUserMedia,\n            isUnifiedPlanDefault: Device._isUnifiedPlanDefault,\n            pstream: this.stream,\n            publisher: this._publisher,\n            soundcache: this.soundcache,\n        };\n        options = Object.assign({\n            MediaStream: this.options.MediaStream\n                || this.options.mediaStreamFactory\n                || rtc.PeerConnection,\n            audioConstraints: this.options.audioConstraints,\n            beforeAccept: function (conn) {\n                if (!_this._activeConnection || _this._activeConnection === conn) {\n                    return;\n                }\n                _this._activeConnection.disconnect();\n                _this._removeConnection(_this._activeConnection);\n            },\n            codecPreferences: this.options.codecPreferences,\n            dialtonePlayer: Device._dialtonePlayer,\n            dscp: this.options.dscp,\n            enableIceRestart: this.options.enableIceRestart,\n            enableRingingState: this.options.enableRingingState,\n            forceAggressiveIceNomination: this.options.forceAggressiveIceNomination,\n            getInputStream: function () { return _this.options.fileInputStream || _this._connectionInputStream; },\n            getSinkIds: function () { return _this._connectionSinkIds; },\n            maxAverageBitrate: this.options.maxAverageBitrate,\n            preflight: this.options.preflight,\n            rtcConfiguration: this.options.rtcConfiguration || { iceServers: this.options.iceServers },\n            rtcConstraints: this.options.rtcConstraints,\n            shouldPlayDisconnect: function () { return _this._enabledSounds.disconnect; },\n            twimlParams: twimlParams,\n        }, options);\n        var connection = new this.options.connectionFactory(config, options);\n        connection.once('accept', function () {\n            _this._removeConnection(connection);\n            _this._activeConnection = connection;\n            if (_this.audio) {\n                _this.audio._maybeStartPollingVolume();\n            }\n            if (connection.direction === connection_1.default.CallDirection.Outgoing && _this._enabledSounds.outgoing) {\n                _this.soundcache.get(Device.SoundName.Outgoing).play();\n            }\n            var data = { edge: _this._edge || _this._region };\n            var selectedEdge = _this.options.edge;\n            if (selectedEdge) {\n                data['selected_edge'] = Array.isArray(selectedEdge) ? selectedEdge : [selectedEdge];\n            }\n            _this._publisher.info('settings', 'edge', data, connection);\n            _this._asyncEmit('connect', connection);\n        });\n        connection.addListener('error', function (error) {\n            if (connection.status() === 'closed') {\n                _this._removeConnection(connection);\n            }\n            if (_this.audio) {\n                _this.audio._maybeStopPollingVolume();\n            }\n            _this._maybeStopIncomingSound();\n            _this._asyncEmit('error', error);\n        });\n        connection.once('cancel', function () {\n            _this._log.info(\"Canceled: \" + connection.parameters.CallSid);\n            _this._removeConnection(connection);\n            if (_this.audio) {\n                _this.audio._maybeStopPollingVolume();\n            }\n            _this._maybeStopIncomingSound();\n            _this._asyncEmit('cancel', connection);\n        });\n        connection.once('disconnect', function () {\n            if (_this.audio) {\n                _this.audio._maybeStopPollingVolume();\n            }\n            _this._removeConnection(connection);\n            _this._asyncEmit('disconnect', connection);\n        });\n        connection.once('reject', function () {\n            _this._log.info(\"Rejected: \" + connection.parameters.CallSid);\n            if (_this.audio) {\n                _this.audio._maybeStopPollingVolume();\n            }\n            _this._removeConnection(connection);\n            _this._maybeStopIncomingSound();\n        });\n        connection.once('transportClose', function () {\n            if (connection.status() !== connection_1.default.State.Pending) {\n                return;\n            }\n            if (_this.audio) {\n                _this.audio._maybeStopPollingVolume();\n            }\n            _this._removeConnection(connection);\n            _this._maybeStopIncomingSound();\n        });\n        return connection;\n    };\n    /**\n     * Stop the incoming sound if no {@link Connection}s remain.\n     */\n    Device.prototype._maybeStopIncomingSound = function () {\n        if (!this.connections.length) {\n            this.soundcache.get(Device.SoundName.Incoming).stop();\n        }\n    };\n    /**\n     * Remove a {@link Connection} from device.connections by reference\n     * @param connection\n     */\n    Device.prototype._removeConnection = function (connection) {\n        if (this._activeConnection === connection) {\n            this._activeConnection = null;\n        }\n        for (var i = this.connections.length - 1; i >= 0; i--) {\n            if (connection === this.connections[i]) {\n                this.connections.splice(i, 1);\n            }\n        }\n    };\n    /**\n     * Register with the signaling server.\n     */\n    Device.prototype._sendPresence = function () {\n        if (!this.stream) {\n            return;\n        }\n        this.stream.register({ audio: this.mediaPresence.audio });\n        if (this.mediaPresence.audio) {\n            this._startRegistrationTimer();\n        }\n        else {\n            this._stopRegistrationTimer();\n        }\n    };\n    /**\n     * Set up the connection to the signaling server.\n     * @param token\n     */\n    Device.prototype._setupStream = function (token) {\n        this._log.info('Setting up VSP');\n        this.stream = this.options.pStreamFactory(token, this._chunderURIs, {\n            backoffMaxMs: this.options.backoffMaxMs,\n        });\n        this.stream.addListener('close', this._onSignalingClose);\n        this.stream.addListener('connected', this._onSignalingConnected);\n        this.stream.addListener('error', this._onSignalingError);\n        this.stream.addListener('invite', this._onSignalingInvite);\n        this.stream.addListener('offline', this._onSignalingOffline);\n        this.stream.addListener('ready', this._onSignalingReady);\n    };\n    /**\n     * Start playing the incoming ringtone, and subsequently emit the incoming event.\n     * @param connection\n     * @param play - The function to be used to play the sound. Must return a Promise.\n     */\n    Device.prototype._showIncomingConnection = function (connection, play) {\n        var _this = this;\n        var timeout;\n        return Promise.race([\n            play(),\n            new Promise(function (resolve, reject) {\n                timeout = setTimeout(function () {\n                    var msg = 'Playing incoming ringtone took too long; it might not play. Continuing execution...';\n                    reject(new Error(msg));\n                }, RINGTONE_PLAY_TIMEOUT);\n            }),\n        ]).catch(function (reason) {\n            _this._log.info(reason.message);\n        }).then(function () {\n            clearTimeout(timeout);\n            _this.emit('incoming', connection);\n        });\n    };\n    /**\n     * Set a timeout to send another register message to the signaling server.\n     */\n    Device.prototype._startRegistrationTimer = function () {\n        var _this = this;\n        this._stopRegistrationTimer();\n        this.regTimer = setTimeout(function () {\n            _this._sendPresence();\n        }, REGISTRATION_INTERVAL);\n    };\n    /**\n     * Stop sending registration messages to the signaling server.\n     */\n    Device.prototype._stopRegistrationTimer = function () {\n        if (this.regTimer) {\n            clearTimeout(this.regTimer);\n        }\n    };\n    /**\n     * Throw an Error if Device.setup has not been called for this instance.\n     * @param methodName - The name of the method being called before setup()\n     */\n    Device.prototype._throwUnlessSetup = function (methodName) {\n        if (!this.isInitialized) {\n            throw new errors_1.InvalidStateError(\"Call Device.setup() before \" + methodName);\n        }\n    };\n    /**\n     * Update the device IDs of output devices being used to play the incoming ringtone through.\n     * @param sinkIds - An array of device IDs\n     */\n    Device.prototype._updateRingtoneSinkIds = function (sinkIds) {\n        return Promise.resolve(this.soundcache.get(Device.SoundName.Incoming).setSinkIds(sinkIds));\n    };\n    /**\n     * Update the device IDs of output devices being used to play the non-ringtone sounds\n     * and Call audio through.\n     * @param sinkIds - An array of device IDs\n     */\n    Device.prototype._updateSpeakerSinkIds = function (sinkIds) {\n        Array.from(this.soundcache.entries())\n            .filter(function (entry) { return entry[0] !== Device.SoundName.Incoming; })\n            .forEach(function (entry) { return entry[1].setSinkIds(sinkIds); });\n        this._connectionSinkIds = sinkIds;\n        var connection = this._activeConnection;\n        return connection\n            ? connection._setSinkIds(sinkIds)\n            : Promise.resolve();\n    };\n    /**\n     * Register the {@link Device}\n     * @param token\n     */\n    Device.prototype.register = function (token) {\n        if (this.stream) {\n            this.stream.setToken(token);\n            this._publisher.setToken(token);\n        }\n        else {\n            this._setupStream(token);\n        }\n    };\n    return Device;\n}(events_1.EventEmitter));\n(function (Device) {\n    /**\n     * All valid {@link Device} event names.\n     */\n    var EventName;\n    (function (EventName) {\n        EventName[\"Cancel\"] = \"cancel\";\n        EventName[\"Connect\"] = \"connect\";\n        EventName[\"Disconnect\"] = \"disconnect\";\n        EventName[\"Error\"] = \"error\";\n        EventName[\"Incoming\"] = \"incoming\";\n        EventName[\"Offline\"] = \"offline\";\n        EventName[\"Ready\"] = \"ready\";\n    })(EventName = Device.EventName || (Device.EventName = {}));\n    /**\n     * All possible {@link Device} statuses.\n     */\n    var Status;\n    (function (Status) {\n        Status[\"Busy\"] = \"busy\";\n        Status[\"Offline\"] = \"offline\";\n        Status[\"Ready\"] = \"ready\";\n    })(Status = Device.Status || (Device.Status = {}));\n    /**\n     * Names of all sounds handled by the {@link Device}.\n     */\n    var SoundName;\n    (function (SoundName) {\n        SoundName[\"Incoming\"] = \"incoming\";\n        SoundName[\"Outgoing\"] = \"outgoing\";\n        SoundName[\"Disconnect\"] = \"disconnect\";\n        SoundName[\"Dtmf0\"] = \"dtmf0\";\n        SoundName[\"Dtmf1\"] = \"dtmf1\";\n        SoundName[\"Dtmf2\"] = \"dtmf2\";\n        SoundName[\"Dtmf3\"] = \"dtmf3\";\n        SoundName[\"Dtmf4\"] = \"dtmf4\";\n        SoundName[\"Dtmf5\"] = \"dtmf5\";\n        SoundName[\"Dtmf6\"] = \"dtmf6\";\n        SoundName[\"Dtmf7\"] = \"dtmf7\";\n        SoundName[\"Dtmf8\"] = \"dtmf8\";\n        SoundName[\"Dtmf9\"] = \"dtmf9\";\n        SoundName[\"DtmfS\"] = \"dtmfs\";\n        SoundName[\"DtmfH\"] = \"dtmfh\";\n    })(SoundName = Device.SoundName || (Device.SoundName = {}));\n})(Device || (Device = {}));\nexports.default = Device;\n//# sourceMappingURL=device.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/device.js\n")},"./node_modules/twilio-client/es5/twilio/dialtonePlayer.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\n/**\n * @packageDocumentation\n * @module Tools\n * @internalapi\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/twilio-client/es5/twilio/errors/index.js\");\n/**\n * A Map of DTMF Sound Names to their mock frequency pairs.\n */\nvar bandFrequencies = {\n    dtmf0: [1360, 960],\n    dtmf1: [1230, 720],\n    dtmf2: [1360, 720],\n    dtmf3: [1480, 720],\n    dtmf4: [1230, 790],\n    dtmf5: [1360, 790],\n    dtmf6: [1480, 790],\n    dtmf7: [1230, 870],\n    dtmf8: [1360, 870],\n    dtmf9: [1480, 870],\n    dtmfh: [1480, 960],\n    dtmfs: [1230, 960],\n};\nvar DialtonePlayer = /** @class */ (function () {\n    function DialtonePlayer(_context) {\n        var _this = this;\n        this._context = _context;\n        /**\n         * Gain nodes, reducing the frequency.\n         */\n        this._gainNodes = [];\n        this._gainNodes = [\n            this._context.createGain(),\n            this._context.createGain(),\n        ];\n        this._gainNodes.forEach(function (gainNode) {\n            gainNode.connect(_this._context.destination);\n            gainNode.gain.value = 0.1;\n            _this._gainNodes.push(gainNode);\n        });\n    }\n    DialtonePlayer.prototype.cleanup = function () {\n        this._gainNodes.forEach(function (gainNode) {\n            gainNode.disconnect();\n        });\n    };\n    /**\n     * Play the dual frequency tone for the passed DTMF name.\n     * @param sound\n     */\n    DialtonePlayer.prototype.play = function (sound) {\n        var _this = this;\n        var frequencies = bandFrequencies[sound];\n        if (!frequencies) {\n            throw new errors_1.InvalidArgumentError('Invalid DTMF sound name');\n        }\n        var oscillators = [\n            this._context.createOscillator(),\n            this._context.createOscillator(),\n        ];\n        oscillators.forEach(function (oscillator, i) {\n            oscillator.type = 'sine';\n            oscillator.frequency.value = frequencies[i];\n            oscillator.connect(_this._gainNodes[i]);\n            oscillator.start();\n            oscillator.stop(_this._context.currentTime + 0.1);\n            oscillator.addEventListener('ended', function () { return oscillator.disconnect(); });\n        });\n    };\n    return DialtonePlayer;\n}());\nexports.default = DialtonePlayer;\n//# sourceMappingURL=dialtonePlayer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLWNsaWVudC9lczUvdHdpbGlvL2RpYWx0b25lUGxheWVyLmpzPzExNTQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLENBQUMsY0FBYyxFQUFDO0FBQzdELGVBQWUsbUJBQU8sQ0FBQyx5RUFBVTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThELGdDQUFnQyxFQUFFO0FBQ2hHLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNELGVBQWU7QUFDZiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90d2lsaW8tY2xpZW50L2VzNS90d2lsaW8vZGlhbHRvbmVQbGF5ZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAbW9kdWxlIFRvb2xzXG4gKiBAaW50ZXJuYWxhcGlcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGVycm9yc18xID0gcmVxdWlyZShcIi4vZXJyb3JzXCIpO1xuLyoqXG4gKiBBIE1hcCBvZiBEVE1GIFNvdW5kIE5hbWVzIHRvIHRoZWlyIG1vY2sgZnJlcXVlbmN5IHBhaXJzLlxuICovXG52YXIgYmFuZEZyZXF1ZW5jaWVzID0ge1xuICAgIGR0bWYwOiBbMTM2MCwgOTYwXSxcbiAgICBkdG1mMTogWzEyMzAsIDcyMF0sXG4gICAgZHRtZjI6IFsxMzYwLCA3MjBdLFxuICAgIGR0bWYzOiBbMTQ4MCwgNzIwXSxcbiAgICBkdG1mNDogWzEyMzAsIDc5MF0sXG4gICAgZHRtZjU6IFsxMzYwLCA3OTBdLFxuICAgIGR0bWY2OiBbMTQ4MCwgNzkwXSxcbiAgICBkdG1mNzogWzEyMzAsIDg3MF0sXG4gICAgZHRtZjg6IFsxMzYwLCA4NzBdLFxuICAgIGR0bWY5OiBbMTQ4MCwgODcwXSxcbiAgICBkdG1maDogWzE0ODAsIDk2MF0sXG4gICAgZHRtZnM6IFsxMjMwLCA5NjBdLFxufTtcbnZhciBEaWFsdG9uZVBsYXllciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEaWFsdG9uZVBsYXllcihfY29udGV4dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9jb250ZXh0ID0gX2NvbnRleHQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHYWluIG5vZGVzLCByZWR1Y2luZyB0aGUgZnJlcXVlbmN5LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fZ2Fpbk5vZGVzID0gW107XG4gICAgICAgIHRoaXMuX2dhaW5Ob2RlcyA9IFtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRleHQuY3JlYXRlR2FpbigpLFxuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5jcmVhdGVHYWluKCksXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMuX2dhaW5Ob2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChnYWluTm9kZSkge1xuICAgICAgICAgICAgZ2Fpbk5vZGUuY29ubmVjdChfdGhpcy5fY29udGV4dC5kZXN0aW5hdGlvbik7XG4gICAgICAgICAgICBnYWluTm9kZS5nYWluLnZhbHVlID0gMC4xO1xuICAgICAgICAgICAgX3RoaXMuX2dhaW5Ob2Rlcy5wdXNoKGdhaW5Ob2RlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIERpYWx0b25lUGxheWVyLnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9nYWluTm9kZXMuZm9yRWFjaChmdW5jdGlvbiAoZ2Fpbk5vZGUpIHtcbiAgICAgICAgICAgIGdhaW5Ob2RlLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQbGF5IHRoZSBkdWFsIGZyZXF1ZW5jeSB0b25lIGZvciB0aGUgcGFzc2VkIERUTUYgbmFtZS5cbiAgICAgKiBAcGFyYW0gc291bmRcbiAgICAgKi9cbiAgICBEaWFsdG9uZVBsYXllci5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uIChzb3VuZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgZnJlcXVlbmNpZXMgPSBiYW5kRnJlcXVlbmNpZXNbc291bmRdO1xuICAgICAgICBpZiAoIWZyZXF1ZW5jaWVzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuSW52YWxpZEFyZ3VtZW50RXJyb3IoJ0ludmFsaWQgRFRNRiBzb3VuZCBuYW1lJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG9zY2lsbGF0b3JzID0gW1xuICAgICAgICAgICAgdGhpcy5fY29udGV4dC5jcmVhdGVPc2NpbGxhdG9yKCksXG4gICAgICAgICAgICB0aGlzLl9jb250ZXh0LmNyZWF0ZU9zY2lsbGF0b3IoKSxcbiAgICAgICAgXTtcbiAgICAgICAgb3NjaWxsYXRvcnMuZm9yRWFjaChmdW5jdGlvbiAob3NjaWxsYXRvciwgaSkge1xuICAgICAgICAgICAgb3NjaWxsYXRvci50eXBlID0gJ3NpbmUnO1xuICAgICAgICAgICAgb3NjaWxsYXRvci5mcmVxdWVuY3kudmFsdWUgPSBmcmVxdWVuY2llc1tpXTtcbiAgICAgICAgICAgIG9zY2lsbGF0b3IuY29ubmVjdChfdGhpcy5fZ2Fpbk5vZGVzW2ldKTtcbiAgICAgICAgICAgIG9zY2lsbGF0b3Iuc3RhcnQoKTtcbiAgICAgICAgICAgIG9zY2lsbGF0b3Iuc3RvcChfdGhpcy5fY29udGV4dC5jdXJyZW50VGltZSArIDAuMSk7XG4gICAgICAgICAgICBvc2NpbGxhdG9yLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gb3NjaWxsYXRvci5kaXNjb25uZWN0KCk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBEaWFsdG9uZVBsYXllcjtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBEaWFsdG9uZVBsYXllcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpYWx0b25lUGxheWVyLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/dialtonePlayer.js\n")},"./node_modules/twilio-client/es5/twilio/errors/generated.js":function(__unused_webpack_module,exports){"use strict";eval("\n/* tslint:disable max-classes-per-file max-line-length */\n/**\n * @packageDocumentation\n * @module Voice\n * @publicapi\n * @internal\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n// TypeScript doesn't allow extending Error so we need to run constructor logic on every one of these\n// individually. Ideally this logic would be run in a constructor on a TwilioError class but\n// due to this limitation TwilioError is an interface.\n// https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes\nfunction construct(context, messageOrError, originalError) {\n    if (typeof messageOrError === 'string') {\n        context.message = messageOrError;\n        if (originalError instanceof Error) {\n            context.originalError = originalError;\n        }\n    }\n    else if (messageOrError instanceof Error) {\n        context.originalError = messageOrError;\n    }\n}\nvar AuthorizationErrors;\n(function (AuthorizationErrors) {\n    var AccessTokenInvalid = /** @class */ (function (_super) {\n        __extends(AccessTokenInvalid, _super);\n        function AccessTokenInvalid(messageOrError, originalError) {\n            var _this = _super.call(this, '') || this;\n            _this.causes = [];\n            _this.code = 20101;\n            _this.description = 'Invalid access token';\n            _this.explanation = 'Twilio was unable to validate your Access Token';\n            _this.solutions = [];\n            Object.setPrototypeOf(_this, AuthorizationErrors.AccessTokenInvalid.prototype);\n            construct(_this, messageOrError, originalError);\n            return _this;\n        }\n        return AccessTokenInvalid;\n    }(Error));\n    AuthorizationErrors.AccessTokenInvalid = AccessTokenInvalid;\n    var AccessTokenExpired = /** @class */ (function (_super) {\n        __extends(AccessTokenExpired, _super);\n        function AccessTokenExpired(messageOrError, originalError) {\n            var _this = _super.call(this, '') || this;\n            _this.causes = [];\n            _this.code = 20104;\n            _this.description = 'Access token expired or expiration date invalid';\n            _this.explanation = 'The Access Token provided to the Twilio API has expired, the expiration time specified in the token was invalid, or the expiration time specified was too far in the future';\n            _this.solutions = [];\n            Object.setPrototypeOf(_this, AuthorizationErrors.AccessTokenExpired.prototype);\n            construct(_this, messageOrError, originalError);\n            return _this;\n        }\n        return AccessTokenExpired;\n    }(Error));\n    AuthorizationErrors.AccessTokenExpired = AccessTokenExpired;\n    var AuthenticationFailed = /** @class */ (function (_super) {\n        __extends(AuthenticationFailed, _super);\n        function AuthenticationFailed(messageOrError, originalError) {\n            var _this = _super.call(this, '') || this;\n            _this.causes = [];\n            _this.code = 20151;\n            _this.description = 'Authentication Failed';\n            _this.explanation = 'The Authentication with the provided JWT failed';\n            _this.solutions = [];\n            Object.setPrototypeOf(_this, AuthorizationErrors.AuthenticationFailed.prototype);\n            construct(_this, messageOrError, originalError);\n            return _this;\n        }\n        return AuthenticationFailed;\n    }(Error));\n    AuthorizationErrors.AuthenticationFailed = AuthenticationFailed;\n})(AuthorizationErrors = exports.AuthorizationErrors || (exports.AuthorizationErrors = {}));\nvar ClientErrors;\n(function (ClientErrors) {\n    var BadRequest = /** @class */ (function (_super) {\n        __extends(BadRequest, _super);\n        function BadRequest(messageOrError, originalError) {\n            var _this = _super.call(this, '') || this;\n            _this.causes = [];\n            _this.code = 31400;\n            _this.description = 'Bad Request (HTTP/SIP)';\n            _this.explanation = 'The request could not be understood due to malformed syntax.';\n            _this.solutions = [];\n            Object.setPrototypeOf(_this, ClientErrors.BadRequest.prototype);\n            construct(_this, messageOrError, originalError);\n            return _this;\n        }\n        return BadRequest;\n    }(Error));\n    ClientErrors.BadRequest = BadRequest;\n})(ClientErrors = exports.ClientErrors || (exports.ClientErrors = {}));\nvar GeneralErrors;\n(function (GeneralErrors) {\n    var UnknownError = /** @class */ (function (_super) {\n        __extends(UnknownError, _super);\n        function UnknownError(messageOrError, originalError) {\n            var _this = _super.call(this, '') || this;\n            _this.causes = [];\n            _this.code = 31000;\n            _this.description = 'Unknown Error';\n            _this.explanation = 'An unknown error has occurred. See error details for more information.';\n            _this.solutions = [];\n            Object.setPrototypeOf(_this, GeneralErrors.UnknownError.prototype);\n            construct(_this, messageOrError, originalError);\n            return _this;\n        }\n        return UnknownError;\n    }(Error));\n    GeneralErrors.UnknownError = UnknownError;\n    var ConnectionError = /** @class */ (function (_super) {\n        __extends(ConnectionError, _super);\n        function ConnectionError(messageOrError, originalError) {\n            var _this = _super.call(this, '') || this;\n            _this.causes = [];\n            _this.code = 31005;\n            _this.description = 'Connection error';\n            _this.explanation = 'A connection error occurred during the call';\n            _this.solutions = [];\n            Object.setPrototypeOf(_this, GeneralErrors.ConnectionError.prototype);\n            construct(_this, messageOrError, originalError);\n            return _this;\n        }\n        return ConnectionError;\n    }(Error));\n    GeneralErrors.ConnectionError = ConnectionError;\n    var TransportError = /** @class */ (function (_super) {\n        __extends(TransportError, _super);\n        function TransportError(messageOrError, originalError) {\n            var _this = _super.call(this, '') || this;\n            _this.causes = [];\n            _this.code = 31009;\n            _this.description = 'Transport error';\n            _this.explanation = 'No transport available to send or receive messages';\n            _this.solutions = [];\n            Object.setPrototypeOf(_this, GeneralErrors.TransportError.prototype);\n            construct(_this, messageOrError, originalError);\n            return _this;\n        }\n        return TransportError;\n    }(Error));\n    GeneralErrors.TransportError = TransportError;\n})(GeneralErrors = exports.GeneralErrors || (exports.GeneralErrors = {}));\nvar SignalingErrors;\n(function (SignalingErrors) {\n    var ConnectionError = /** @class */ (function (_super) {\n        __extends(ConnectionError, _super);\n        function ConnectionError(messageOrError, originalError) {\n            var _this = _super.call(this, '') || this;\n            _this.causes = [];\n            _this.code = 53000;\n            _this.description = 'Signaling connection error';\n            _this.explanation = 'Raised whenever a signaling connection error occurs that is not covered by a more specific error code.';\n            _this.solutions = [];\n            Object.setPrototypeOf(_this, SignalingErrors.ConnectionError.prototype);\n            construct(_this, messageOrError, originalError);\n            return _this;\n        }\n        return ConnectionError;\n    }(Error));\n    SignalingErrors.ConnectionError = ConnectionError;\n    var ConnectionDisconnected = /** @class */ (function (_super) {\n        __extends(ConnectionDisconnected, _super);\n        function ConnectionDisconnected(messageOrError, originalError) {\n            var _this = _super.call(this, '') || this;\n            _this.causes = [\n                'The device running your application lost its Internet connection.',\n            ];\n            _this.code = 53001;\n            _this.description = 'Signaling connection disconnected';\n            _this.explanation = 'Raised whenever the signaling connection is unexpectedly disconnected.';\n            _this.solutions = [\n                'Ensure the device running your application has access to a stable Internet connection.',\n            ];\n            Object.setPrototypeOf(_this, SignalingErrors.ConnectionDisconnected.prototype);\n            construct(_this, messageOrError, originalError);\n            return _this;\n        }\n        return ConnectionDisconnected;\n    }(Error));\n    SignalingErrors.ConnectionDisconnected = ConnectionDisconnected;\n})(SignalingErrors = exports.SignalingErrors || (exports.SignalingErrors = {}));\nvar MediaErrors;\n(function (MediaErrors) {\n    var ClientLocalDescFailed = /** @class */ (function (_super) {\n        __extends(ClientLocalDescFailed, _super);\n        function ClientLocalDescFailed(messageOrError, originalError) {\n            var _this = _super.call(this, '') || this;\n            _this.causes = [\n                'The Client may not be using a supported WebRTC implementation.',\n                'The Client may not have the necessary resources to create or apply a new media description.',\n            ];\n            _this.code = 53400;\n            _this.description = 'Client is unable to create or apply a local media description';\n            _this.explanation = 'Raised whenever a Client is unable to create or apply a local media description.';\n            _this.solutions = [\n                'If you are experiencing this error using the JavaScript SDK, ensure you are running it with a supported WebRTC implementation.',\n            ];\n            Object.setPrototypeOf(_this, MediaErrors.ClientLocalDescFailed.prototype);\n            construct(_this, messageOrError, originalError);\n            return _this;\n        }\n        return ClientLocalDescFailed;\n    }(Error));\n    MediaErrors.ClientLocalDescFailed = ClientLocalDescFailed;\n    var ClientRemoteDescFailed = /** @class */ (function (_super) {\n        __extends(ClientRemoteDescFailed, _super);\n        function ClientRemoteDescFailed(messageOrError, originalError) {\n            var _this = _super.call(this, '') || this;\n            _this.causes = [\n                'The Client may not be using a supported WebRTC implementation.',\n                'The Client may be connecting peer-to-peer with another Participant that is not using a supported WebRTC implementation.',\n                'The Client may not have the necessary resources to apply a new media description.',\n            ];\n            _this.code = 53402;\n            _this.description = 'Client is unable to apply a remote media description';\n            _this.explanation = 'Raised whenever the Client receives a remote media description but is unable to apply it.';\n            _this.solutions = [\n                'If you are experiencing this error using the JavaScript SDK, ensure you are running it with a supported WebRTC implementation.',\n            ];\n            Object.setPrototypeOf(_this, MediaErrors.ClientRemoteDescFailed.prototype);\n            construct(_this, messageOrError, originalError);\n            return _this;\n        }\n        return ClientRemoteDescFailed;\n    }(Error));\n    MediaErrors.ClientRemoteDescFailed = ClientRemoteDescFailed;\n    var ConnectionError = /** @class */ (function (_super) {\n        __extends(ConnectionError, _super);\n        function ConnectionError(messageOrError, originalError) {\n            var _this = _super.call(this, '') || this;\n            _this.causes = [\n                'The Client was unable to establish a media connection.',\n                'A media connection which was active failed liveliness checks.',\n            ];\n            _this.code = 53405;\n            _this.description = 'Media connection failed';\n            _this.explanation = 'Raised by the Client or Server whenever a media connection fails.';\n            _this.solutions = [\n                'If the problem persists, try connecting to another region.',\n                'Check your Client\\'s network connectivity.',\n                'If you\\'ve provided custom ICE Servers then ensure that the URLs and credentials are valid.',\n            ];\n            Object.setPrototypeOf(_this, MediaErrors.ConnectionError.prototype);\n            construct(_this, messageOrError, originalError);\n            return _this;\n        }\n        return ConnectionError;\n    }(Error));\n    MediaErrors.ConnectionError = ConnectionError;\n})(MediaErrors = exports.MediaErrors || (exports.MediaErrors = {}));\n/**\n * @private\n */\nexports.errorsByCode = new Map([\n    [20101, AuthorizationErrors.AccessTokenInvalid],\n    [20104, AuthorizationErrors.AccessTokenExpired],\n    [20151, AuthorizationErrors.AuthenticationFailed],\n    [31400, ClientErrors.BadRequest],\n    [31000, GeneralErrors.UnknownError],\n    [31005, GeneralErrors.ConnectionError],\n    [31009, GeneralErrors.TransportError],\n    [53000, SignalingErrors.ConnectionError],\n    [53001, SignalingErrors.ConnectionDisconnected],\n    [53400, MediaErrors.ClientLocalDescFailed],\n    [53402, MediaErrors.ClientRemoteDescFailed],\n    [53405, MediaErrors.ConnectionError],\n]);\nObject.freeze(exports.errorsByCode);\n//# sourceMappingURL=generated.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/errors/generated.js\n")},"./node_modules/twilio-client/es5/twilio/errors/index.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, "__esModule", ({ value: true }));\n/**\n * @packageDocumentation\n * @internalapi\n */\n/* tslint:disable max-classes-per-file */\nvar generated_1 = __webpack_require__(/*! ./generated */ "./node_modules/twilio-client/es5/twilio/errors/generated.js");\nexports.AuthorizationErrors = generated_1.AuthorizationErrors;\nexports.ClientErrors = generated_1.ClientErrors;\nexports.GeneralErrors = generated_1.GeneralErrors;\nexports.MediaErrors = generated_1.MediaErrors;\nexports.SignalingErrors = generated_1.SignalingErrors;\n// Application errors that can be avoided by good app logic\nvar InvalidArgumentError = /** @class */ (function (_super) {\n    __extends(InvalidArgumentError, _super);\n    function InvalidArgumentError(message) {\n        var _this = _super.call(this, message) || this;\n        _this.name = \'InvalidArgumentError\';\n        return _this;\n    }\n    return InvalidArgumentError;\n}(Error));\nexports.InvalidArgumentError = InvalidArgumentError;\nvar InvalidStateError = /** @class */ (function (_super) {\n    __extends(InvalidStateError, _super);\n    function InvalidStateError(message) {\n        var _this = _super.call(this, message) || this;\n        _this.name = \'InvalidStateError\';\n        return _this;\n    }\n    return InvalidStateError;\n}(Error));\nexports.InvalidStateError = InvalidStateError;\nvar NotSupportedError = /** @class */ (function (_super) {\n    __extends(NotSupportedError, _super);\n    function NotSupportedError(message) {\n        var _this = _super.call(this, message) || this;\n        _this.name = \'NotSupportedError\';\n        return _this;\n    }\n    return NotSupportedError;\n}(Error));\nexports.NotSupportedError = NotSupportedError;\n// This should only be used to look up error codes returned by a server\n// using the same repo of error codes.\nfunction getErrorByCode(code) {\n    var error = generated_1.errorsByCode.get(code);\n    if (!error) {\n        throw new InvalidArgumentError("Error code " + code + " not found");\n    }\n    return error;\n}\nexports.getErrorByCode = getErrorByCode;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLWNsaWVudC9lczUvdHdpbGlvL2Vycm9ycy9pbmRleC5qcz9mNzU1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsY0FBYyxnQkFBZ0Isc0NBQXNDLGlCQUFpQixFQUFFO0FBQ3ZGLDZCQUE2Qix1REFBdUQ7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsOENBQTZDLENBQUMsY0FBYyxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsbUJBQU8sQ0FBQyxnRkFBYTtBQUN2QywyQkFBMkI7QUFDM0Isb0JBQW9CO0FBQ3BCLHFCQUFxQjtBQUNyQixtQkFBbUI7QUFDbkIsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3R3aWxpby1jbGllbnQvZXM1L3R3aWxpby9lcnJvcnMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBpbnRlcm5hbGFwaVxuICovXG4vKiB0c2xpbnQ6ZGlzYWJsZSBtYXgtY2xhc3Nlcy1wZXItZmlsZSAqL1xudmFyIGdlbmVyYXRlZF8xID0gcmVxdWlyZShcIi4vZ2VuZXJhdGVkXCIpO1xuZXhwb3J0cy5BdXRob3JpemF0aW9uRXJyb3JzID0gZ2VuZXJhdGVkXzEuQXV0aG9yaXphdGlvbkVycm9ycztcbmV4cG9ydHMuQ2xpZW50RXJyb3JzID0gZ2VuZXJhdGVkXzEuQ2xpZW50RXJyb3JzO1xuZXhwb3J0cy5HZW5lcmFsRXJyb3JzID0gZ2VuZXJhdGVkXzEuR2VuZXJhbEVycm9ycztcbmV4cG9ydHMuTWVkaWFFcnJvcnMgPSBnZW5lcmF0ZWRfMS5NZWRpYUVycm9ycztcbmV4cG9ydHMuU2lnbmFsaW5nRXJyb3JzID0gZ2VuZXJhdGVkXzEuU2lnbmFsaW5nRXJyb3JzO1xuLy8gQXBwbGljYXRpb24gZXJyb3JzIHRoYXQgY2FuIGJlIGF2b2lkZWQgYnkgZ29vZCBhcHAgbG9naWNcbnZhciBJbnZhbGlkQXJndW1lbnRFcnJvciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoSW52YWxpZEFyZ3VtZW50RXJyb3IsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gSW52YWxpZEFyZ3VtZW50RXJyb3IobWVzc2FnZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtZXNzYWdlKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5uYW1lID0gJ0ludmFsaWRBcmd1bWVudEVycm9yJztcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gSW52YWxpZEFyZ3VtZW50RXJyb3I7XG59KEVycm9yKSk7XG5leHBvcnRzLkludmFsaWRBcmd1bWVudEVycm9yID0gSW52YWxpZEFyZ3VtZW50RXJyb3I7XG52YXIgSW52YWxpZFN0YXRlRXJyb3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEludmFsaWRTdGF0ZUVycm9yLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEludmFsaWRTdGF0ZUVycm9yKG1lc3NhZ2UpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbWVzc2FnZSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMubmFtZSA9ICdJbnZhbGlkU3RhdGVFcnJvcic7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIEludmFsaWRTdGF0ZUVycm9yO1xufShFcnJvcikpO1xuZXhwb3J0cy5JbnZhbGlkU3RhdGVFcnJvciA9IEludmFsaWRTdGF0ZUVycm9yO1xudmFyIE5vdFN1cHBvcnRlZEVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhOb3RTdXBwb3J0ZWRFcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBOb3RTdXBwb3J0ZWRFcnJvcihtZXNzYWdlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1lc3NhZ2UpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm5hbWUgPSAnTm90U3VwcG9ydGVkRXJyb3InO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBOb3RTdXBwb3J0ZWRFcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydHMuTm90U3VwcG9ydGVkRXJyb3IgPSBOb3RTdXBwb3J0ZWRFcnJvcjtcbi8vIFRoaXMgc2hvdWxkIG9ubHkgYmUgdXNlZCB0byBsb29rIHVwIGVycm9yIGNvZGVzIHJldHVybmVkIGJ5IGEgc2VydmVyXG4vLyB1c2luZyB0aGUgc2FtZSByZXBvIG9mIGVycm9yIGNvZGVzLlxuZnVuY3Rpb24gZ2V0RXJyb3JCeUNvZGUoY29kZSkge1xuICAgIHZhciBlcnJvciA9IGdlbmVyYXRlZF8xLmVycm9yc0J5Q29kZS5nZXQoY29kZSk7XG4gICAgaWYgKCFlcnJvcikge1xuICAgICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoXCJFcnJvciBjb2RlIFwiICsgY29kZSArIFwiIG5vdCBmb3VuZFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGVycm9yO1xufVxuZXhwb3J0cy5nZXRFcnJvckJ5Q29kZSA9IGdldEVycm9yQnlDb2RlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/errors/index.js\n')},"./node_modules/twilio-client/es5/twilio/eventpublisher.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar EventEmitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar request = __webpack_require__(/*! ./request */ \"./node_modules/twilio-client/es5/twilio/request.js\");\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\n/**\n * Builds Endpoint Analytics (EA) event payloads and sends them to\n *   the EA server.\n * @constructor\n * @param {String} productName - Name of the product publishing events.\n * @param {String} token - The JWT token to use to authenticate with\n *   the EA server.\n * @param {EventPublisher.Options} options\n * @property {Boolean} isEnabled - Whether or not this publisher is publishing\n *   to the server. Currently ignores the request altogether, in the future this\n *   may store them in case publishing is re-enabled later. Defaults to true.\n */ /**\n    * @typedef {Object} EventPublisher.Options\n    * @property {Object} [metadata=undefined] - A publisher_metadata object to send\n    *   with each payload.\n    * @property {String} [host='eventgw.twilio.com'] - The host address of the EA\n    *   server to publish to.\n    * @property {Object|Function} [defaultPayload] - A default payload to extend\n    *   when creating and sending event payloads. Also takes a function that\n    *   should return an object representing the default payload. This is\n    *   useful for fields that should always be present when they are\n    *   available, but are not always available.\n    */\nfunction EventPublisher(productName, token, options) {\n  if (!(this instanceof EventPublisher)) {\n    return new EventPublisher(productName, token, options);\n  }\n\n  // Apply default options\n  options = Object.assign({\n    defaultPayload: function defaultPayload() {\n      return {};\n    },\n\n    host: 'eventgw.twilio.com'\n  }, options);\n\n  var defaultPayload = options.defaultPayload;\n\n  if (typeof defaultPayload !== 'function') {\n    defaultPayload = function defaultPayload() {\n      return Object.assign({}, options.defaultPayload);\n    };\n  }\n\n  var isEnabled = true;\n  // eslint-disable-next-line camelcase,no-undefined\n  var metadata = Object.assign({ app_name: undefined, app_version: undefined }, options.metadata);\n\n  Object.defineProperties(this, {\n    _defaultPayload: { value: defaultPayload },\n    _isEnabled: {\n      get: function get() {\n        return isEnabled;\n      },\n      set: function set(_isEnabled) {\n        isEnabled = _isEnabled;\n      }\n    },\n    _host: { value: options.host },\n    _request: { value: options.request || request, writable: true },\n    _token: { value: token, writable: true },\n    isEnabled: {\n      enumerable: true,\n      get: function get() {\n        return isEnabled;\n      }\n    },\n    metadata: {\n      enumerable: true,\n      get: function get() {\n        return metadata;\n      }\n    },\n    productName: { enumerable: true, value: productName },\n    token: {\n      enumerable: true,\n      get: function get() {\n        return this._token;\n      }\n    }\n  });\n}\n\nutil.inherits(EventPublisher, EventEmitter);\n\n/**\n * Post to an EA server.\n * @private\n * @param {String} endpointName - Endpoint to post the event to\n * @param {String} level - ['debug', 'info', 'warning', 'error']\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @param {?Boolean} [force=false] - Whether or not to send this even if\n *    publishing is disabled.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype._post = function _post(endpointName, level, group, name, payload, connection, force) {\n  var _this = this;\n\n  if (!this.isEnabled && !force) {\n    return Promise.resolve();\n  }\n\n  if (!connection || (!connection.parameters || !connection.parameters.CallSid) && !connection.outboundConnectionId) {\n    return Promise.resolve();\n  }\n\n  var event = {\n    /* eslint-disable camelcase */\n    publisher: this.productName,\n    group: group,\n    name: name,\n    timestamp: new Date().toISOString(),\n    level: level.toUpperCase(),\n    payload_type: 'application/json',\n    private: false,\n    payload: payload && payload.forEach ? payload.slice(0) : Object.assign(this._defaultPayload(connection), payload)\n    /* eslint-enable camelcase */\n  };\n\n  if (this.metadata) {\n    // eslint-disable-next-line camelcase\n    event.publisher_metadata = this.metadata;\n  }\n\n  var requestParams = {\n    url: 'https://' + this._host + '/v4/' + endpointName,\n    body: event,\n    headers: {\n      'Content-Type': 'application/json',\n      'X-Twilio-Token': this.token\n    }\n  };\n\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    self._request.post(requestParams, function (err) {\n      if (err) {\n        _this.emit('error', err);\n        reject(err);\n      } else {\n        resolve();\n      }\n    });\n  });\n};\n\n/**\n * Post an event to the EA server. Use this method when the level\n *  is dynamic. Otherwise, it's better practice to use the sugar\n *  methods named for the specific level.\n * @param {String} level - ['debug', 'info', 'warning', 'error']\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.post = function post(level, group, name, payload, connection, force) {\n  return this._post('EndpointEvents', level, group, name, payload, connection, force);\n};\n\n/**\n * Post a debug-level event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.debug = function debug(group, name, payload, connection) {\n  return this.post('debug', group, name, payload, connection);\n};\n\n/**\n * Post an info-level event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.info = function info(group, name, payload, connection) {\n  return this.post('info', group, name, payload, connection);\n};\n\n/**\n * Post a warning-level event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.warn = function warn(group, name, payload, connection) {\n  return this.post('warning', group, name, payload, connection);\n};\n\n/**\n * Post an error-level event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {?Object} [payload=null] - The payload to pass. This will be extended\n *    onto the default payload object, if one exists.\n * @param {?Connection} [connection=null] - The {@link Connection} which is posting this payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.error = function error(group, name, payload, connection) {\n  return this.post('error', group, name, payload, connection);\n};\n\n/**\n * Post a metrics event to the EA server.\n * @param {String} group - The name of the group the event belongs to.\n * @param {String} name - The designated event name.\n * @param {Array<Object>} metrics - The metrics to post.\n * @param {?Object} [customFields] - Custom fields to append to each payload.\n * @returns {Promise} Fulfilled if the HTTP response is 20x.\n */\nEventPublisher.prototype.postMetrics = function postMetrics(group, name, metrics, customFields, connection) {\n  var _this2 = this;\n\n  return new Promise(function (resolve) {\n    var samples = metrics.map(formatMetric).map(function (sample) {\n      return Object.assign(sample, customFields);\n    });\n\n    resolve(_this2._post('EndpointMetrics', 'info', group, name, samples, connection));\n  });\n};\n\n/**\n * Update the token to use to authenticate requests.\n * @param {string} token\n * @returns {void}\n */\nEventPublisher.prototype.setToken = function setToken(token) {\n  this._token = token;\n};\n\n/**\n * Enable the publishing of events.\n */\nEventPublisher.prototype.enable = function enable() {\n  this._isEnabled = true;\n};\n\n/**\n * Disable the publishing of events.\n */\nEventPublisher.prototype.disable = function disable() {\n  this._isEnabled = false;\n};\n\nfunction formatMetric(sample) {\n  return {\n    /* eslint-disable camelcase */\n    timestamp: new Date(sample.timestamp).toISOString(),\n    total_packets_received: sample.totals.packetsReceived,\n    total_packets_lost: sample.totals.packetsLost,\n    total_packets_sent: sample.totals.packetsSent,\n    total_bytes_received: sample.totals.bytesReceived,\n    total_bytes_sent: sample.totals.bytesSent,\n    packets_received: sample.packetsReceived,\n    packets_lost: sample.packetsLost,\n    packets_lost_fraction: sample.packetsLostFraction && Math.round(sample.packetsLostFraction * 100) / 100,\n    bytes_received: sample.bytesReceived,\n    bytes_sent: sample.bytesSent,\n    audio_codec: sample.codecName,\n    audio_level_in: sample.audioInputLevel,\n    audio_level_out: sample.audioOutputLevel,\n    call_volume_input: sample.inputVolume,\n    call_volume_output: sample.outputVolume,\n    jitter: sample.jitter,\n    rtt: sample.rtt,\n    mos: sample.mos && Math.round(sample.mos * 100) / 100\n    /* eslint-enable camelcase */\n  };\n}\n\nmodule.exports = EventPublisher;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/eventpublisher.js\n")},"./node_modules/twilio-client/es5/twilio/log.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\n/**\n * @packageDocumentation\n * @module Voice\n * @internalapi\n */\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nvar LogLevelModule = __webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js");\nvar constants_1 = __webpack_require__(/*! ./constants */ "./node_modules/twilio-client/es5/twilio/constants.js");\n/**\n * {@link Log} provides logging features throught the sdk using loglevel module\n * See https://github.com/pimterry/loglevel for documentation\n */\nvar Log = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param [options] - Optional settings\n     */\n    function Log(options) {\n        this._log = (options && options.LogLevelModule ? options.LogLevelModule : LogLevelModule).getLogger(constants_1.PACKAGE_NAME);\n    }\n    /**\n     * Create the logger singleton instance if it doesn\'t exists\n     * @returns The singleton {@link Log} instance\n     */\n    Log.getInstance = function () {\n        if (!Log.instance) {\n            Log.instance = new Log();\n        }\n        return Log.instance;\n    };\n    /**\n     * Log a debug message\n     * @param args - Any number of arguments to be passed to loglevel.debug\n     */\n    Log.prototype.debug = function () {\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        (_a = this._log).debug.apply(_a, args);\n    };\n    /**\n     * Log an error message\n     * @param args - Any number of arguments to be passed to loglevel.error\n     */\n    Log.prototype.error = function () {\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        (_a = this._log).error.apply(_a, args);\n    };\n    /**\n     * Log an info message\n     * @param args - Any number of arguments to be passed to loglevel.info\n     */\n    Log.prototype.info = function () {\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        (_a = this._log).info.apply(_a, args);\n    };\n    /**\n     * Set a default log level to disable all logging below the given level\n     */\n    Log.prototype.setDefaultLevel = function (level) {\n        this._log.setDefaultLevel(level);\n    };\n    /**\n     * Log a warning message\n     * @param args - Any number of arguments to be passed to loglevel.warn\n     */\n    Log.prototype.warn = function () {\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        (_a = this._log).warn.apply(_a, args);\n    };\n    /**\n     * Log levels\n     */\n    Log.levels = LogLevelModule.levels;\n    return Log;\n}());\nexports.default = Log;\n//# sourceMappingURL=log.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLWNsaWVudC9lczUvdHdpbGlvL2xvZy5qcz84MDIwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxDQUFDLGNBQWMsRUFBQztBQUM3RCxxQkFBcUIsbUJBQU8sQ0FBQyx5REFBVTtBQUN2QyxrQkFBa0IsbUJBQU8sQ0FBQyx5RUFBYTtBQUN2QztBQUNBLElBQUksVUFBVTtBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixVQUFVO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsdUJBQXVCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsdUJBQXVCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsdUJBQXVCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsdUJBQXVCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxlQUFlO0FBQ2YiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdHdpbGlvLWNsaWVudC9lczUvdHdpbGlvL2xvZy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgVm9pY2VcbiAqIEBpbnRlcm5hbGFwaVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgTG9nTGV2ZWxNb2R1bGUgPSByZXF1aXJlKFwibG9nbGV2ZWxcIik7XG52YXIgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG4vKipcbiAqIHtAbGluayBMb2d9IHByb3ZpZGVzIGxvZ2dpbmcgZmVhdHVyZXMgdGhyb3VnaHQgdGhlIHNkayB1c2luZyBsb2dsZXZlbCBtb2R1bGVcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGltdGVycnkvbG9nbGV2ZWwgZm9yIGRvY3VtZW50YXRpb25cbiAqL1xudmFyIExvZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0gW29wdGlvbnNdIC0gT3B0aW9uYWwgc2V0dGluZ3NcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMb2cob3B0aW9ucykge1xuICAgICAgICB0aGlzLl9sb2cgPSAob3B0aW9ucyAmJiBvcHRpb25zLkxvZ0xldmVsTW9kdWxlID8gb3B0aW9ucy5Mb2dMZXZlbE1vZHVsZSA6IExvZ0xldmVsTW9kdWxlKS5nZXRMb2dnZXIoY29uc3RhbnRzXzEuUEFDS0FHRV9OQU1FKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHRoZSBsb2dnZXIgc2luZ2xldG9uIGluc3RhbmNlIGlmIGl0IGRvZXNuJ3QgZXhpc3RzXG4gICAgICogQHJldHVybnMgVGhlIHNpbmdsZXRvbiB7QGxpbmsgTG9nfSBpbnN0YW5jZVxuICAgICAqL1xuICAgIExvZy5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFMb2cuaW5zdGFuY2UpIHtcbiAgICAgICAgICAgIExvZy5pbnN0YW5jZSA9IG5ldyBMb2coKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTG9nLmluc3RhbmNlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTG9nIGEgZGVidWcgbWVzc2FnZVxuICAgICAqIEBwYXJhbSBhcmdzIC0gQW55IG51bWJlciBvZiBhcmd1bWVudHMgdG8gYmUgcGFzc2VkIHRvIGxvZ2xldmVsLmRlYnVnXG4gICAgICovXG4gICAgTG9nLnByb3RvdHlwZS5kZWJ1ZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIChfYSA9IHRoaXMuX2xvZykuZGVidWcuYXBwbHkoX2EsIGFyZ3MpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogTG9nIGFuIGVycm9yIG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0gYXJncyAtIEFueSBudW1iZXIgb2YgYXJndW1lbnRzIHRvIGJlIHBhc3NlZCB0byBsb2dsZXZlbC5lcnJvclxuICAgICAqL1xuICAgIExvZy5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICAoX2EgPSB0aGlzLl9sb2cpLmVycm9yLmFwcGx5KF9hLCBhcmdzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIExvZyBhbiBpbmZvIG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0gYXJncyAtIEFueSBudW1iZXIgb2YgYXJndW1lbnRzIHRvIGJlIHBhc3NlZCB0byBsb2dsZXZlbC5pbmZvXG4gICAgICovXG4gICAgTG9nLnByb3RvdHlwZS5pbmZvID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgKF9hID0gdGhpcy5fbG9nKS5pbmZvLmFwcGx5KF9hLCBhcmdzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldCBhIGRlZmF1bHQgbG9nIGxldmVsIHRvIGRpc2FibGUgYWxsIGxvZ2dpbmcgYmVsb3cgdGhlIGdpdmVuIGxldmVsXG4gICAgICovXG4gICAgTG9nLnByb3RvdHlwZS5zZXREZWZhdWx0TGV2ZWwgPSBmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgICAgdGhpcy5fbG9nLnNldERlZmF1bHRMZXZlbChsZXZlbCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBMb2cgYSB3YXJuaW5nIG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0gYXJncyAtIEFueSBudW1iZXIgb2YgYXJndW1lbnRzIHRvIGJlIHBhc3NlZCB0byBsb2dsZXZlbC53YXJuXG4gICAgICovXG4gICAgTG9nLnByb3RvdHlwZS53YXJuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgKF9hID0gdGhpcy5fbG9nKS53YXJuLmFwcGx5KF9hLCBhcmdzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIExvZyBsZXZlbHNcbiAgICAgKi9cbiAgICBMb2cubGV2ZWxzID0gTG9nTGV2ZWxNb2R1bGUubGV2ZWxzO1xuICAgIHJldHVybiBMb2c7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gTG9nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9nLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/log.js\n')},"./node_modules/twilio-client/es5/twilio/outputdevicecollection.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * @packageDocumentation\n * @module Voice\n */\nvar constants_1 = __webpack_require__(/*! ./constants */ \"./node_modules/twilio-client/es5/twilio/constants.js\");\nvar errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/twilio-client/es5/twilio/errors/index.js\");\nvar DEFAULT_TEST_SOUND_URL = constants_1.SOUNDS_BASE_URL + \"/outgoing.mp3\";\n/**\n * A smart collection containing a Set of active output devices.\n * @publicapi\n */\nvar OutputDeviceCollection = /** @class */ (function () {\n    /**\n     * @private\n     */\n    function OutputDeviceCollection(_name, _availableDevices, _beforeChange, _isSupported) {\n        this._name = _name;\n        this._availableDevices = _availableDevices;\n        this._beforeChange = _beforeChange;\n        this._isSupported = _isSupported;\n        /**\n         * The currently active output devices.\n         */\n        this._activeDevices = new Set();\n    }\n    /**\n     * Delete a device from the collection. If no devices remain, the 'default'\n     * device will be added as the sole device. If no `default` device exists,\n     * the first available device will be used.\n     * @param device - The device to delete from the collection\n     * @returns whether the device was present before it was deleted\n     */\n    OutputDeviceCollection.prototype.delete = function (device) {\n        var wasDeleted = !!(this._activeDevices.delete(device));\n        var defaultDevice = this._availableDevices.get('default')\n            || Array.from(this._availableDevices.values())[0];\n        if (!this._activeDevices.size && defaultDevice) {\n            this._activeDevices.add(defaultDevice);\n        }\n        // Call _beforeChange so that the implementation can react when a device is\n        // removed or lost.\n        var deviceIds = Array.from(this._activeDevices.values()).map(function (deviceInfo) { return deviceInfo.deviceId; });\n        this._beforeChange(this._name, deviceIds);\n        return !!wasDeleted;\n    };\n    /**\n     * Get the current set of devices.\n     */\n    OutputDeviceCollection.prototype.get = function () {\n        return this._activeDevices;\n    };\n    /**\n     * Replace the current set of devices with a new set of devices.\n     * @param deviceIdOrIds - An ID or array of IDs of devices to replace the existing devices with.\n     * @returns Rejects if this feature is not supported, any of the supplied IDs are not found,\n     * or no IDs are passed.\n     */\n    OutputDeviceCollection.prototype.set = function (deviceIdOrIds) {\n        var _this = this;\n        if (!this._isSupported) {\n            return Promise.reject(new errors_1.NotSupportedError('This browser does not support audio output selection'));\n        }\n        var deviceIds = Array.isArray(deviceIdOrIds) ? deviceIdOrIds : [deviceIdOrIds];\n        if (!deviceIds.length) {\n            return Promise.reject(new errors_1.InvalidArgumentError('Must specify at least one device to set'));\n        }\n        var missingIds = [];\n        var devices = deviceIds.map(function (id) {\n            var device = _this._availableDevices.get(id);\n            if (!device) {\n                missingIds.push(id);\n            }\n            return device;\n        });\n        if (missingIds.length) {\n            return Promise.reject(new errors_1.InvalidArgumentError(\"Devices not found: \" + missingIds.join(', ')));\n        }\n        return new Promise(function (resolve) {\n            resolve(_this._beforeChange(_this._name, deviceIds));\n        }).then(function () {\n            _this._activeDevices.clear();\n            devices.forEach(_this._activeDevices.add, _this._activeDevices);\n        });\n    };\n    /**\n     * Test the devices by playing audio through them.\n     * @param [soundUrl] - An optional URL. If none is specified, we will\n     *   play a default test tone.\n     * @returns Resolves with the result of the underlying HTMLAudioElements' play() calls.\n     */\n    OutputDeviceCollection.prototype.test = function (soundUrl) {\n        if (soundUrl === void 0) { soundUrl = DEFAULT_TEST_SOUND_URL; }\n        if (!this._isSupported) {\n            return Promise.reject(new errors_1.NotSupportedError('This browser does not support audio output selection'));\n        }\n        if (!this._activeDevices.size) {\n            return Promise.reject(new errors_1.InvalidStateError('No active output devices to test'));\n        }\n        return Promise.all(Array.from(this._activeDevices).map(function (device) {\n            var el;\n            // (rrowland) We need to wait for the oncanplay event because of a regression introduced\n            // in Chrome M72: https://bugs.chromium.org/p/chromium/issues/detail?id=930876\n            return new Promise(function (resolve) {\n                el = new Audio(soundUrl);\n                el.oncanplay = resolve;\n            }).then(function () { return el.setSinkId(device.deviceId).then(function () { return el.play(); }); });\n        }));\n    };\n    return OutputDeviceCollection;\n}());\nexports.default = OutputDeviceCollection;\n//# sourceMappingURL=outputdevicecollection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/outputdevicecollection.js\n")},"./node_modules/twilio-client/es5/twilio/preflight/preflight.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError("Generator is already executing.");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\n/**\n * @packageDocumentation\n * @module Voice\n * @preferred\n * @publicapi\n */\nvar events_1 = __webpack_require__(/*! events */ "./node_modules/events/events.js");\nvar connection_1 = __webpack_require__(/*! ../connection */ "./node_modules/twilio-client/es5/twilio/connection.js");\nvar device_1 = __webpack_require__(/*! ../device */ "./node_modules/twilio-client/es5/twilio/device.js");\nvar errors_1 = __webpack_require__(/*! ../errors */ "./node_modules/twilio-client/es5/twilio/errors/index.js");\nvar stats_1 = __webpack_require__(/*! ../rtc/stats */ "./node_modules/twilio-client/es5/twilio/rtc/stats.js");\nvar _a = __webpack_require__(/*! ../constants */ "./node_modules/twilio-client/es5/twilio/constants.js"), COWBELL_AUDIO_URL = _a.COWBELL_AUDIO_URL, ECHO_TEST_DURATION = _a.ECHO_TEST_DURATION;\n/**\n * Runs some tests to identify issues, if any, prohibiting successful calling.\n */\nvar PreflightTest = /** @class */ (function (_super) {\n    __extends(PreflightTest, _super);\n    /**\n     * Construct a {@link PreflightTest} instance.\n     * @constructor\n     * @param token - A Twilio JWT token string.\n     * @param options\n     */\n    function PreflightTest(token, options) {\n        var _this = _super.call(this) || this;\n        /**\n         * Whether this test has already logged an insights-connection-warning.\n         */\n        _this._hasInsightsErrored = false;\n        /**\n         * Network related timing measurements for this test\n         */\n        _this._networkTiming = {};\n        /**\n         * The options passed to {@link PreflightTest} constructor\n         */\n        _this._options = {\n            codecPreferences: [connection_1.default.Codec.PCMU, connection_1.default.Codec.Opus],\n            debug: false,\n            edge: \'roaming\',\n            fakeMicInput: false,\n            signalingTimeoutMs: 10000,\n        };\n        /**\n         * Current status of this test\n         */\n        _this._status = PreflightTest.Status.Connecting;\n        Object.assign(_this._options, options);\n        _this._samples = [];\n        _this._warnings = [];\n        _this._startTime = Date.now();\n        _this._initDevice(token, __assign(__assign({}, _this._options), { fileInputStream: _this._options.fakeMicInput ?\n                _this._getStreamFromFile() : undefined }));\n        return _this;\n    }\n    /**\n     * Stops the current test and raises a failed event.\n     */\n    PreflightTest.prototype.stop = function () {\n        var _this = this;\n        var error = {\n            code: 31008,\n            message: \'Call cancelled\',\n        };\n        if (this._device) {\n            this._device.once(\'offline\', function () { return _this._onFailed(error); });\n            this._device.destroy();\n        }\n        else {\n            this._onFailed(error);\n        }\n    };\n    /**\n     * Emit a {PreflightTest.Warning}\n     */\n    PreflightTest.prototype._emitWarning = function (name, description, rtcWarning) {\n        var warning = { name: name, description: description };\n        if (rtcWarning) {\n            warning.rtcWarning = rtcWarning;\n        }\n        this._warnings.push(warning);\n        this.emit(PreflightTest.Events.Warning, warning);\n    };\n    /**\n     * Returns call quality base on the RTC Stats\n     */\n    PreflightTest.prototype._getCallQuality = function (mos) {\n        if (mos > 4.2) {\n            return PreflightTest.CallQuality.Excellent;\n        }\n        else if (mos >= 4.1 && mos <= 4.2) {\n            return PreflightTest.CallQuality.Great;\n        }\n        else if (mos >= 3.7 && mos <= 4) {\n            return PreflightTest.CallQuality.Good;\n        }\n        else if (mos >= 3.1 && mos <= 3.6) {\n            return PreflightTest.CallQuality.Fair;\n        }\n        else {\n            return PreflightTest.CallQuality.Degraded;\n        }\n    };\n    /**\n     * Returns the report for this test.\n     */\n    PreflightTest.prototype._getReport = function () {\n        var stats = this._getRTCStats();\n        var testTiming = { start: this._startTime };\n        if (this._endTime) {\n            testTiming.end = this._endTime;\n            testTiming.duration = this._endTime - this._startTime;\n        }\n        var report = {\n            callSid: this._callSid,\n            edge: this._edge,\n            iceCandidateStats: this._rtcIceCandidateStatsReport.iceCandidateStats,\n            networkTiming: this._networkTiming,\n            samples: this._samples,\n            selectedEdge: this._options.edge,\n            stats: stats,\n            testTiming: testTiming,\n            totals: this._getRTCSampleTotals(),\n            warnings: this._warnings,\n        };\n        var selectedIceCandidatePairStats = this._rtcIceCandidateStatsReport.selectedIceCandidatePairStats;\n        if (selectedIceCandidatePairStats) {\n            report.selectedIceCandidatePairStats = selectedIceCandidatePairStats;\n            report.isTurnRequired = selectedIceCandidatePairStats.localCandidate.candidateType === \'relay\'\n                || selectedIceCandidatePairStats.remoteCandidate.candidateType === \'relay\';\n        }\n        if (stats) {\n            report.callQuality = this._getCallQuality(stats.mos.average);\n        }\n        return report;\n    };\n    /**\n     * Returns RTC stats totals for this test\n     */\n    PreflightTest.prototype._getRTCSampleTotals = function () {\n        if (!this._latestSample) {\n            return;\n        }\n        return __assign({}, this._latestSample.totals);\n    };\n    /**\n     * Returns RTC related stats captured during the test call\n     */\n    PreflightTest.prototype._getRTCStats = function () {\n        var firstMosSampleIdx = this._samples.findIndex(function (sample) { return typeof sample.mos === \'number\' && sample.mos > 0; });\n        var samples = firstMosSampleIdx >= 0\n            ? this._samples.slice(firstMosSampleIdx)\n            : [];\n        if (!samples || !samples.length) {\n            return;\n        }\n        return [\'jitter\', \'mos\', \'rtt\'].reduce(function (statObj, stat) {\n            var _a;\n            var values = samples.map(function (s) { return s[stat]; });\n            return __assign(__assign({}, statObj), (_a = {}, _a[stat] = {\n                average: Number((values.reduce(function (total, value) { return total + value; }) / values.length).toPrecision(5)),\n                max: Math.max.apply(Math, values),\n                min: Math.min.apply(Math, values),\n            }, _a));\n        }, {});\n    };\n    /**\n     * Returns a MediaStream from a media file\n     */\n    PreflightTest.prototype._getStreamFromFile = function () {\n        var audioContext = this._options.audioContext;\n        if (!audioContext) {\n            throw new errors_1.NotSupportedError(\'Cannot fake input audio stream: AudioContext is not supported by this browser.\');\n        }\n        var audioEl = new Audio(COWBELL_AUDIO_URL);\n        audioEl.addEventListener(\'canplaythrough\', function () { return audioEl.play(); });\n        if (typeof audioEl.setAttribute === \'function\') {\n            audioEl.setAttribute(\'crossorigin\', \'anonymous\');\n        }\n        var src = audioContext.createMediaElementSource(audioEl);\n        var dest = audioContext.createMediaStreamDestination();\n        src.connect(dest);\n        return dest.stream;\n    };\n    /**\n     * Initialize the device\n     */\n    PreflightTest.prototype._initDevice = function (token, options) {\n        var _this = this;\n        try {\n            this._device = new (options.deviceFactory || device_1.default)(token, {\n                codecPreferences: options.codecPreferences,\n                debug: options.debug,\n                edge: options.edge,\n                fileInputStream: options.fileInputStream,\n                iceServers: options.iceServers,\n                preflight: true,\n                rtcConfiguration: options.rtcConfiguration,\n            });\n        }\n        catch (error) {\n            // We want to return before failing so the consumer can capture the event\n            setTimeout(function () {\n                _this._onFailed(error);\n            });\n            return;\n        }\n        this._device.once(\'ready\', function () {\n            _this._onDeviceReady();\n        });\n        this._device.once(\'error\', function (error) {\n            _this._onDeviceError(error);\n        });\n        this._signalingTimeoutTimer = setTimeout(function () {\n            _this._onDeviceError({\n                code: 31901,\n                message: \'WebSocket - Connection Timeout\',\n            });\n        }, options.signalingTimeoutMs);\n    };\n    /**\n     * Called on {@link Device} error event\n     * @param error\n     */\n    PreflightTest.prototype._onDeviceError = function (error) {\n        this._device.destroy();\n        this._onFailed(error);\n    };\n    /**\n     * Called on {@link Device} ready event\n     */\n    PreflightTest.prototype._onDeviceReady = function () {\n        var _this = this;\n        clearTimeout(this._echoTimer);\n        clearTimeout(this._signalingTimeoutTimer);\n        this._connection = this._device.connect();\n        this._networkTiming.signaling = { start: Date.now() };\n        this._setupConnectionHandlers(this._connection);\n        this._edge = this._device.edge || undefined;\n        if (this._options.fakeMicInput) {\n            this._echoTimer = setTimeout(function () { return _this._device.disconnectAll(); }, ECHO_TEST_DURATION);\n            var audio = this._device.audio;\n            if (audio) {\n                audio.disconnect(false);\n                audio.outgoing(false);\n            }\n        }\n        this._device.once(\'disconnect\', function () {\n            _this._device.once(\'offline\', function () { return _this._onOffline(); });\n            _this._device.destroy();\n        });\n        var publisher = this._connection[\'_publisher\'];\n        publisher.on(\'error\', function () {\n            if (!_this._hasInsightsErrored) {\n                _this._emitWarning(\'insights-connection-error\', \'Received an error when attempting to connect to Insights gateway\');\n            }\n            _this._hasInsightsErrored = true;\n        });\n    };\n    /**\n     * Called when there is a fatal error\n     * @param error\n     */\n    PreflightTest.prototype._onFailed = function (error) {\n        clearTimeout(this._echoTimer);\n        clearTimeout(this._signalingTimeoutTimer);\n        this._releaseHandlers();\n        this._endTime = Date.now();\n        this._status = PreflightTest.Status.Failed;\n        this.emit(PreflightTest.Events.Failed, error);\n    };\n    /**\n     * Called when the device goes offline.\n     * This indicates that the test has been completed, but we won\'t know if it failed or not.\n     * The onError event will be the indicator whether the test failed.\n     */\n    PreflightTest.prototype._onOffline = function () {\n        var _this = this;\n        // We need to make sure we always execute preflight.on(\'completed\') last\n        // as client SDK sometimes emits \'offline\' event before emitting fatal errors.\n        setTimeout(function () {\n            if (_this._status === PreflightTest.Status.Failed) {\n                return;\n            }\n            clearTimeout(_this._echoTimer);\n            clearTimeout(_this._signalingTimeoutTimer);\n            _this._releaseHandlers();\n            _this._endTime = Date.now();\n            _this._status = PreflightTest.Status.Completed;\n            _this._report = _this._getReport();\n            _this.emit(PreflightTest.Events.Completed, _this._report);\n        }, 10);\n    };\n    /**\n     * Clean up all handlers for device and connection\n     */\n    PreflightTest.prototype._releaseHandlers = function () {\n        [this._device, this._connection].forEach(function (emitter) {\n            if (emitter) {\n                emitter.eventNames().forEach(function (name) { return emitter.removeAllListeners(name); });\n            }\n        });\n    };\n    /**\n     * Setup the event handlers for the {@link Connection} of the test call\n     * @param connection\n     */\n    PreflightTest.prototype._setupConnectionHandlers = function (connection) {\n        var _this = this;\n        if (this._options.fakeMicInput) {\n            // When volume events start emitting, it means all audio outputs have been created.\n            // Let\'s mute them if we\'re using fake mic input.\n            connection.once(\'volume\', function () {\n                connection.mediaStream.outputs\n                    .forEach(function (output) { return output.audio.muted = true; });\n            });\n        }\n        connection.on(\'warning\', function (name, data) {\n            _this._emitWarning(name, \'Received an RTCWarning. See .rtcWarning for the RTCWarning\', data);\n        });\n        connection.once(\'accept\', function () {\n            _this._callSid = connection.mediaStream.callSid;\n            _this._status = PreflightTest.Status.Connected;\n            _this.emit(PreflightTest.Events.Connected);\n        });\n        connection.on(\'sample\', function (sample) { return __awaiter(_this, void 0, void 0, function () {\n            var _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!!this._latestSample) return [3 /*break*/, 2];\n                        _a = this;\n                        return [4 /*yield*/, (this._options.getRTCIceCandidateStatsReport || stats_1.getRTCIceCandidateStatsReport)(connection.mediaStream.version.pc)];\n                    case 1:\n                        _a._rtcIceCandidateStatsReport = _b.sent();\n                        _b.label = 2;\n                    case 2:\n                        this._latestSample = sample;\n                        this._samples.push(sample);\n                        this.emit(PreflightTest.Events.Sample, sample);\n                        return [2 /*return*/];\n                }\n            });\n        }); });\n        // TODO: Update the following once the SDK supports emitting these events\n        // Let\'s shim for now\n        [{\n                reportLabel: \'peerConnection\',\n                type: \'pcconnection\',\n            }, {\n                reportLabel: \'ice\',\n                type: \'iceconnection\',\n            }, {\n                reportLabel: \'dtls\',\n                type: \'dtlstransport\',\n            }, {\n                reportLabel: \'signaling\',\n                type: \'signaling\',\n            }].forEach(function (_a) {\n            var type = _a.type, reportLabel = _a.reportLabel;\n            var handlerName = "on" + type + "statechange";\n            var originalHandler = connection.mediaStream[handlerName];\n            connection.mediaStream[handlerName] = function (state) {\n                var timing = _this._networkTiming[reportLabel]\n                    = _this._networkTiming[reportLabel] || { start: 0 };\n                if (state === \'connecting\' || state === \'checking\') {\n                    timing.start = Date.now();\n                }\n                else if ((state === \'connected\' || state === \'stable\') && !timing.duration) {\n                    timing.end = Date.now();\n                    timing.duration = timing.end - timing.start;\n                }\n                originalHandler(state);\n            };\n        });\n    };\n    Object.defineProperty(PreflightTest.prototype, "callSid", {\n        /**\n         * The callsid generated for the test call.\n         */\n        get: function () {\n            return this._callSid;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PreflightTest.prototype, "endTime", {\n        /**\n         * A timestamp in milliseconds of when the test ended.\n         */\n        get: function () {\n            return this._endTime;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PreflightTest.prototype, "latestSample", {\n        /**\n         * The latest WebRTC sample collected.\n         */\n        get: function () {\n            return this._latestSample;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PreflightTest.prototype, "report", {\n        /**\n         * The report for this test.\n         */\n        get: function () {\n            return this._report;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PreflightTest.prototype, "startTime", {\n        /**\n         * A timestamp in milliseconds of when the test started.\n         */\n        get: function () {\n            return this._startTime;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PreflightTest.prototype, "status", {\n        /**\n         * The status of the test.\n         */\n        get: function () {\n            return this._status;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return PreflightTest;\n}(events_1.EventEmitter));\nexports.PreflightTest = PreflightTest;\n(function (PreflightTest) {\n    /**\n     * The quality of the call determined by different mos ranges.\n     * Mos is calculated base on the WebRTC stats - rtt, jitter, and packet lost.\n     */\n    var CallQuality;\n    (function (CallQuality) {\n        /**\n         * If the average mos is over 4.2.\n         */\n        CallQuality["Excellent"] = "excellent";\n        /**\n         * If the average mos is between 4.1 and 4.2 both inclusive.\n         */\n        CallQuality["Great"] = "great";\n        /**\n         * If the average mos is between 3.7 and 4.0 both inclusive.\n         */\n        CallQuality["Good"] = "good";\n        /**\n         * If the average mos is between 3.1 and 3.6 both inclusive.\n         */\n        CallQuality["Fair"] = "fair";\n        /**\n         * If the average mos is 3.0 or below.\n         */\n        CallQuality["Degraded"] = "degraded";\n    })(CallQuality = PreflightTest.CallQuality || (PreflightTest.CallQuality = {}));\n    /**\n     * Possible events that a [[PreflightTest]] might emit.\n     */\n    var Events;\n    (function (Events) {\n        /**\n         * See [[PreflightTest.completedEvent]]\n         */\n        Events["Completed"] = "completed";\n        /**\n         * See [[PreflightTest.connectedEvent]]\n         */\n        Events["Connected"] = "connected";\n        /**\n         * See [[PreflightTest.failedEvent]]\n         */\n        Events["Failed"] = "failed";\n        /**\n         * See [[PreflightTest.sampleEvent]]\n         */\n        Events["Sample"] = "sample";\n        /**\n         * See [[PreflightTest.warningEvent]]\n         */\n        Events["Warning"] = "warning";\n    })(Events = PreflightTest.Events || (PreflightTest.Events = {}));\n    /**\n     * Possible status of the test.\n     */\n    var Status;\n    (function (Status) {\n        /**\n         * Connection to Twilio has initiated.\n         */\n        Status["Connecting"] = "connecting";\n        /**\n         * Connection to Twilio has been established.\n         */\n        Status["Connected"] = "connected";\n        /**\n         * The connection to Twilio has been disconnected and the test call has completed.\n         */\n        Status["Completed"] = "completed";\n        /**\n         * The test has stopped and failed.\n         */\n        Status["Failed"] = "failed";\n    })(Status = PreflightTest.Status || (PreflightTest.Status = {}));\n})(PreflightTest = exports.PreflightTest || (exports.PreflightTest = {}));\nexports.PreflightTest = PreflightTest;\n//# sourceMappingURL=preflight.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/preflight/preflight.js\n')},"./node_modules/twilio-client/es5/twilio/pstream.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nvar C = __webpack_require__(/*! ./constants */ \"./node_modules/twilio-client/es5/twilio/constants.js\");\nvar EventEmitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nvar Log = __webpack_require__(/*! ./log */ \"./node_modules/twilio-client/es5/twilio/log.js\").default;\nvar util = __webpack_require__(/*! util */ \"./node_modules/util/util.js\");\n\nvar WSTransport = __webpack_require__(/*! ./wstransport */ \"./node_modules/twilio-client/es5/twilio/wstransport.js\").default;\n\nvar _require = __webpack_require__(/*! ./errors */ \"./node_modules/twilio-client/es5/twilio/errors/index.js\"),\n    GeneralErrors = _require.GeneralErrors,\n    SignalingErrors = _require.SignalingErrors;\n\nvar PSTREAM_VERSION = '1.5';\n\n/**\n * Constructor for PStream objects.\n *\n * @exports PStream as Twilio.PStream\n * @memberOf Twilio\n * @borrows EventEmitter#addListener as #addListener\n * @borrows EventEmitter#removeListener as #removeListener\n * @borrows EventEmitter#emit as #emit\n * @borrows EventEmitter#hasListener as #hasListener\n * @constructor\n * @param {string} token The Twilio capabilities JWT\n * @param {string[]} uris An array of PStream endpoint URIs\n * @param {object} [options]\n * @config {boolean} [options.backoffMaxMs=20000] Enable debugging\n */\nfunction PStream(token, uris, options) {\n  if (!(this instanceof PStream)) {\n    return new PStream(token, uris, options);\n  }\n  var defaults = {\n    TransportFactory: WSTransport\n  };\n  options = options || {};\n  for (var prop in defaults) {\n    if (prop in options) continue;\n    options[prop] = defaults[prop];\n  }\n  this.options = options;\n  this.token = token || '';\n  this.status = 'disconnected';\n  this.gateway = null;\n  this.region = null;\n  this._messageQueue = [];\n  this._uris = uris;\n\n  this._handleTransportClose = this._handleTransportClose.bind(this);\n  this._handleTransportError = this._handleTransportError.bind(this);\n  this._handleTransportMessage = this._handleTransportMessage.bind(this);\n  this._handleTransportOpen = this._handleTransportOpen.bind(this);\n\n  this._log = Log.getInstance();\n\n  // NOTE(mroberts): EventEmitter requires that we catch all errors.\n  this.on('error', function () {});\n\n  /*\n   *events used by device\n   *'invite',\n   *'ready',\n   *'error',\n   *'offline',\n   *\n   *'cancel',\n   *'presence',\n   *'roster',\n   *'answer',\n   *'candidate',\n   *'hangup'\n   */\n\n  var self = this;\n\n  this.addListener('ready', function () {\n    self.status = 'ready';\n  });\n\n  this.addListener('offline', function () {\n    self.status = 'offline';\n  });\n\n  this.addListener('close', function () {\n    self._log.info('Received \"close\" from server. Destroying PStream...');\n    self._destroy();\n  });\n\n  this.transport = new this.options.TransportFactory(this._uris, {\n    backoffMaxMs: this.options.backoffMaxMs\n  });\n\n  Object.defineProperties(this, {\n    uri: {\n      enumerable: true,\n      get: function get() {\n        return this.transport.uri;\n      }\n    }\n  });\n\n  this.transport.on('close', this._handleTransportClose);\n  this.transport.on('error', this._handleTransportError);\n  this.transport.on('message', this._handleTransportMessage);\n  this.transport.on('open', this._handleTransportOpen);\n  this.transport.open();\n\n  return this;\n}\n\nutil.inherits(PStream, EventEmitter);\n\nPStream.prototype._handleTransportClose = function () {\n  this.emit('transportClose');\n\n  if (this.status !== 'disconnected') {\n    if (this.status !== 'offline') {\n      this.emit('offline', this);\n    }\n    this.status = 'disconnected';\n  }\n};\n\nPStream.prototype._handleTransportError = function (error) {\n  if (!error) {\n    this.emit('error', { error: {\n        code: 31000,\n        message: 'Websocket closed without a provided reason',\n        twilioError: new SignalingErrors.ConnectionDisconnected()\n      } });\n    return;\n  }\n  // We receive some errors without call metadata (just the error). We need to convert these\n  // to be contained within the 'error' field so that these errors match the expected format.\n  this.emit('error', typeof error.code !== 'undefined' ? { error: error } : error);\n};\n\nPStream.prototype._handleTransportMessage = function (msg) {\n  if (!msg || !msg.data || typeof msg.data !== 'string') {\n    return;\n  }\n\n  var _JSON$parse = JSON.parse(msg.data),\n      type = _JSON$parse.type,\n      _JSON$parse$payload = _JSON$parse.payload,\n      payload = _JSON$parse$payload === undefined ? {} : _JSON$parse$payload;\n\n  this.gateway = payload.gateway || this.gateway;\n  this.region = payload.region || this.region;\n\n  if (type === 'error' && payload.error) {\n    payload.error.twilioError = new SignalingErrors.ConnectionError();\n  }\n\n  this.emit(type, payload);\n};\n\nPStream.prototype._handleTransportOpen = function () {\n  var _this = this;\n\n  this.status = 'connected';\n  this.setToken(this.token);\n\n  var messages = this._messageQueue.splice(0, this._messageQueue.length);\n  messages.forEach(function (message) {\n    return _this._publish.apply(_this, _toConsumableArray(message));\n  });\n};\n\n/**\n * @return {string}\n */\nPStream.toString = function () {\n  return '[Twilio.PStream class]';\n};\nPStream.prototype.toString = function () {\n  return '[Twilio.PStream instance]';\n};\n\nPStream.prototype.setToken = function (token) {\n  this._log.info('Setting token and publishing listen');\n  this.token = token;\n  var payload = {\n    token: token,\n    browserinfo: getBrowserInfo()\n  };\n  this._publish('listen', payload);\n};\n\nPStream.prototype.register = function (mediaCapabilities) {\n  var regPayload = {\n    media: mediaCapabilities\n  };\n  this._publish('register', regPayload, true);\n};\n\nPStream.prototype.invite = function (sdp, callsid, preflight, params) {\n  var payload = {\n    callsid: callsid,\n    sdp: sdp,\n    preflight: !!preflight,\n    twilio: params ? { params: params } : {}\n  };\n  this._publish('invite', payload, true);\n};\n\nPStream.prototype.answer = function (sdp, callsid) {\n  this._publish('answer', { sdp: sdp, callsid: callsid }, true);\n};\n\nPStream.prototype.dtmf = function (callsid, digits) {\n  this._publish('dtmf', { callsid: callsid, dtmf: digits }, true);\n};\n\nPStream.prototype.hangup = function (callsid, message) {\n  var payload = message ? { callsid: callsid, message: message } : { callsid: callsid };\n  this._publish('hangup', payload, true);\n};\n\nPStream.prototype.reject = function (callsid) {\n  this._publish('reject', { callsid: callsid }, true);\n};\n\nPStream.prototype.reinvite = function (sdp, callsid) {\n  this._publish('reinvite', { sdp: sdp, callsid: callsid }, false);\n};\n\nPStream.prototype._destroy = function () {\n  this.transport.removeListener('close', this._handleTransportClose);\n  this.transport.removeListener('error', this._handleTransportError);\n  this.transport.removeListener('message', this._handleTransportMessage);\n  this.transport.removeListener('open', this._handleTransportOpen);\n  this.transport.close();\n\n  this.emit('offline', this);\n};\n\nPStream.prototype.destroy = function () {\n  this._log.info('PStream.destroy() called...');\n  this._destroy();\n  return this;\n};\n\nPStream.prototype.publish = function (type, payload) {\n  return this._publish(type, payload, true);\n};\n\nPStream.prototype._publish = function (type, payload, shouldRetry) {\n  var msg = JSON.stringify({\n    type: type,\n    version: PSTREAM_VERSION,\n    payload: payload\n  });\n  var isSent = !!this.transport.send(msg);\n\n  if (!isSent) {\n    this.emit('error', { error: {\n        code: 31009,\n        message: 'No transport available to send or receive messages',\n        twilioError: new GeneralErrors.TransportError()\n      } });\n\n    if (shouldRetry) {\n      this._messageQueue.push([type, payload, true]);\n    }\n  }\n};\n\nfunction getBrowserInfo() {\n  var nav = typeof navigator !== 'undefined' ? navigator : {};\n\n  var info = {\n    p: 'browser',\n    v: C.RELEASE_VERSION,\n    browser: {\n      userAgent: nav.userAgent || 'unknown',\n      platform: nav.platform || 'unknown'\n    },\n    plugin: 'rtc'\n  };\n\n  return info;\n}\n\nmodule.exports = PStream;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/pstream.js\n")},"./node_modules/twilio-client/es5/twilio/regions.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\nvar _a, _b, _c, _d;\nObject.defineProperty(exports, "__esModule", ({ value: true }));\n/**\n * @packageDocumentation\n * @module Voice\n * This module describes valid and deprecated regions.\n */\nvar errors_1 = __webpack_require__(/*! ./errors */ "./node_modules/twilio-client/es5/twilio/errors/index.js");\n/**\n * Valid deprecated regions.\n * @private\n */\nvar DeprecatedRegion;\n(function (DeprecatedRegion) {\n    DeprecatedRegion["Au"] = "au";\n    DeprecatedRegion["Br"] = "br";\n    DeprecatedRegion["Ie"] = "ie";\n    DeprecatedRegion["Jp"] = "jp";\n    DeprecatedRegion["Sg"] = "sg";\n    DeprecatedRegion["UsOr"] = "us-or";\n    DeprecatedRegion["UsVa"] = "us-va";\n})(DeprecatedRegion = exports.DeprecatedRegion || (exports.DeprecatedRegion = {}));\n/**\n * Valid edges.\n * @private\n */\nvar Edge;\n(function (Edge) {\n    /**\n     * Public edges\n     */\n    Edge["Sydney"] = "sydney";\n    Edge["SaoPaulo"] = "sao-paulo";\n    Edge["Dublin"] = "dublin";\n    Edge["Frankfurt"] = "frankfurt";\n    Edge["Tokyo"] = "tokyo";\n    Edge["Singapore"] = "singapore";\n    Edge["Ashburn"] = "ashburn";\n    Edge["Umatilla"] = "umatilla";\n    Edge["Roaming"] = "roaming";\n    /**\n     * Interconnect edges\n     */\n    Edge["AshburnIx"] = "ashburn-ix";\n    Edge["SanJoseIx"] = "san-jose-ix";\n    Edge["LondonIx"] = "london-ix";\n    Edge["FrankfurtIx"] = "frankfurt-ix";\n    Edge["SingaporeIx"] = "singapore-ix";\n    Edge["SydneyIx"] = "sydney-ix";\n    Edge["TokyoIx"] = "tokyo-ix";\n})(Edge = exports.Edge || (exports.Edge = {}));\n/**\n * Valid current regions.\n *\n * @deprecated\n *\n * CLIENT-6831\n * This is no longer used or updated for checking validity of regions in the\n * SDK. We now allow any string to be passed for region. Invalid regions won\'t\n * be able to connect, and won\'t throw an exception.\n *\n * CLIENT-7519\n * This is used again to temporarily convert edge values to regions as part of\n * Phase 1 Regional. This is still considered deprecated.\n *\n * @private\n */\nvar Region;\n(function (Region) {\n    Region["Au1"] = "au1";\n    Region["Au1Ix"] = "au1-ix";\n    Region["Br1"] = "br1";\n    Region["De1"] = "de1";\n    Region["De1Ix"] = "de1-ix";\n    Region["Gll"] = "gll";\n    Region["Ie1"] = "ie1";\n    Region["Ie1Ix"] = "ie1-ix";\n    Region["Ie1Tnx"] = "ie1-tnx";\n    Region["Jp1"] = "jp1";\n    Region["Jp1Ix"] = "jp1-ix";\n    Region["Sg1"] = "sg1";\n    Region["Sg1Ix"] = "sg1-ix";\n    Region["Sg1Tnx"] = "sg1-tnx";\n    Region["Us1"] = "us1";\n    Region["Us1Ix"] = "us1-ix";\n    Region["Us1Tnx"] = "us1-tnx";\n    Region["Us2"] = "us2";\n    Region["Us2Ix"] = "us2-ix";\n    Region["Us2Tnx"] = "us2-tnx";\n})(Region = exports.Region || (exports.Region = {}));\n/**\n * Deprecated regions. Maps the deprecated region to its equivalent up-to-date region.\n * @private\n */\nexports.deprecatedRegions = (_a = {},\n    _a[DeprecatedRegion.Au] = Region.Au1,\n    _a[DeprecatedRegion.Br] = Region.Br1,\n    _a[DeprecatedRegion.Ie] = Region.Ie1,\n    _a[DeprecatedRegion.Jp] = Region.Jp1,\n    _a[DeprecatedRegion.Sg] = Region.Sg1,\n    _a[DeprecatedRegion.UsOr] = Region.Us1,\n    _a[DeprecatedRegion.UsVa] = Region.Us1,\n    _a);\n/**\n * Region shortcodes. Maps the full region name from AWS to the Twilio shortcode.\n * @private\n */\nexports.regionShortcodes = {\n    ASIAPAC_SINGAPORE: Region.Sg1,\n    ASIAPAC_SYDNEY: Region.Au1,\n    ASIAPAC_TOKYO: Region.Jp1,\n    EU_FRANKFURT: Region.De1,\n    EU_IRELAND: Region.Ie1,\n    SOUTH_AMERICA_SAO_PAULO: Region.Br1,\n    US_EAST_VIRGINIA: Region.Us1,\n    US_WEST_OREGON: Region.Us2,\n};\n/**\n * Region URIs. Maps the Twilio shortcode to its Twilio endpoint URI.\n * @private\n */\nvar regionURIs = (_b = {},\n    _b[Region.Au1] = \'chunderw-vpc-gll-au1.twilio.com\',\n    _b[Region.Au1Ix] = \'chunderw-vpc-gll-au1-ix.twilio.com\',\n    _b[Region.Br1] = \'chunderw-vpc-gll-br1.twilio.com\',\n    _b[Region.De1] = \'chunderw-vpc-gll-de1.twilio.com\',\n    _b[Region.De1Ix] = \'chunderw-vpc-gll-de1-ix.twilio.com\',\n    _b[Region.Gll] = \'chunderw-vpc-gll.twilio.com\',\n    _b[Region.Ie1] = \'chunderw-vpc-gll-ie1.twilio.com\',\n    _b[Region.Ie1Ix] = \'chunderw-vpc-gll-ie1-ix.twilio.com\',\n    _b[Region.Ie1Tnx] = \'chunderw-vpc-gll-ie1-tnx.twilio.com\',\n    _b[Region.Jp1] = \'chunderw-vpc-gll-jp1.twilio.com\',\n    _b[Region.Jp1Ix] = \'chunderw-vpc-gll-jp1-ix.twilio.com\',\n    _b[Region.Sg1] = \'chunderw-vpc-gll-sg1.twilio.com\',\n    _b[Region.Sg1Ix] = \'chunderw-vpc-gll-sg1-ix.twilio.com\',\n    _b[Region.Sg1Tnx] = \'chunderw-vpc-gll-sg1-tnx.twilio.com\',\n    _b[Region.Us1] = \'chunderw-vpc-gll-us1.twilio.com\',\n    _b[Region.Us1Ix] = \'chunderw-vpc-gll-us1-ix.twilio.com\',\n    _b[Region.Us1Tnx] = \'chunderw-vpc-gll-us1-tnx.twilio.com\',\n    _b[Region.Us2] = \'chunderw-vpc-gll-us2.twilio.com\',\n    _b[Region.Us2Ix] = \'chunderw-vpc-gll-us2-ix.twilio.com\',\n    _b[Region.Us2Tnx] = \'chunderw-vpc-gll-us2-tnx.twilio.com\',\n    _b);\n/**\n * Edge to region mapping, as part of Phase 1 Regional (CLIENT-7519).\n * Temporary.\n * @private\n */\nexports.edgeToRegion = (_c = {},\n    _c[Edge.Sydney] = Region.Au1,\n    _c[Edge.SaoPaulo] = Region.Br1,\n    _c[Edge.Dublin] = Region.Ie1,\n    _c[Edge.Frankfurt] = Region.De1,\n    _c[Edge.Tokyo] = Region.Jp1,\n    _c[Edge.Singapore] = Region.Sg1,\n    _c[Edge.Ashburn] = Region.Us1,\n    _c[Edge.Umatilla] = Region.Us2,\n    _c[Edge.Roaming] = Region.Gll,\n    /**\n     * Interconnect edges\n     */\n    _c[Edge.AshburnIx] = Region.Us1Ix,\n    _c[Edge.SanJoseIx] = Region.Us2Ix,\n    _c[Edge.LondonIx] = Region.Ie1Ix,\n    _c[Edge.FrankfurtIx] = Region.De1Ix,\n    _c[Edge.SingaporeIx] = Region.Sg1Ix,\n    _c[Edge.SydneyIx] = Region.Au1Ix,\n    _c[Edge.TokyoIx] = Region.Jp1Ix,\n    _c);\n/**\n * Region to edge mapping, as part of Phase 1 Regional (CLIENT-7519).\n * Temporary.\n * @private\n */\nexports.regionToEdge = (_d = {},\n    _d[Region.Au1] = Edge.Sydney,\n    _d[Region.Br1] = Edge.SaoPaulo,\n    _d[Region.Ie1] = Edge.Dublin,\n    _d[Region.De1] = Edge.Frankfurt,\n    _d[Region.Jp1] = Edge.Tokyo,\n    _d[Region.Sg1] = Edge.Singapore,\n    _d[Region.Us1] = Edge.Ashburn,\n    _d[Region.Us2] = Edge.Umatilla,\n    _d[Region.Gll] = Edge.Roaming,\n    /**\n     * Interconnect edges\n     */\n    _d[Region.Us1Ix] = Edge.AshburnIx,\n    _d[Region.Us2Ix] = Edge.SanJoseIx,\n    _d[Region.Ie1Ix] = Edge.LondonIx,\n    _d[Region.De1Ix] = Edge.FrankfurtIx,\n    _d[Region.Sg1Ix] = Edge.SingaporeIx,\n    _d[Region.Au1Ix] = Edge.SydneyIx,\n    _d[Region.Jp1Ix] = Edge.TokyoIx,\n    /**\n     * Tnx regions\n     */\n    _d[Region.Us1Tnx] = Edge.AshburnIx,\n    _d[Region.Us2Tnx] = Edge.AshburnIx,\n    _d[Region.Ie1Tnx] = Edge.LondonIx,\n    _d[Region.Sg1Tnx] = Edge.SingaporeIx,\n    _d);\n/**\n * The default region to connect to and create a chunder uri from if region is\n * not defined.\n * @constant\n * @private\n */\nexports.defaultRegion = \'gll\';\n/**\n * The default edge to connect to and create a chunder uri from, if the edge\n * parameter is not specified during setup in `Device`.\n * @constant\n */\nexports.defaultEdge = Edge.Roaming;\n/**\n * The default chunder URI to connect to, should map to region `gll`.\n * @constant\n * @private\n */\nexports.defaultChunderRegionURI = \'chunderw-vpc-gll.twilio.com\';\n/**\n * String template for a region chunder URI\n * @param region - The region.\n */\nfunction createChunderRegionUri(region) {\n    return region === exports.defaultRegion\n        ? exports.defaultChunderRegionURI\n        : "chunderw-vpc-gll-" + region + ".twilio.com";\n}\n/**\n * String template for an edge chunder URI\n * @param edge - The edge.\n */\nfunction createChunderEdgeUri(edge) {\n    return "voice-js." + edge + ".twilio.com";\n}\n/**\n * Get the URI associated with the passed region or edge. If both are passed,\n * then we want to fail `Device` setup, so we throw an error.\n * As of CLIENT-7519, Regions are deprecated in favor of edges as part of\n * Phase 1 Regional.\n *\n * @private\n * @param edge - A string or an array of edge values\n * @param region - The region shortcode.\n * @param [onDeprecated] - A callback containing the deprecation message to be\n *   warned when the passed parameters are deprecated.\n * @returns An array of chunder URIs\n */\nfunction getChunderURIs(edge, region, onDeprecated) {\n    if (!!region && typeof region !== \'string\') {\n        throw new errors_1.InvalidArgumentError(\'If `region` is provided, it must be of type `string`.\');\n    }\n    if (!!edge && typeof edge !== \'string\' && !Array.isArray(edge)) {\n        throw new errors_1.InvalidArgumentError(\'If `edge` is provided, it must be of type `string` or an array of strings.\');\n    }\n    var deprecatedMessages = [];\n    var uris;\n    if (region && edge) {\n        throw new errors_1.InvalidArgumentError(\'You cannot specify `region` when `edge` is specified in\' +\n            \'`Twilio.Device.Options`.\');\n    }\n    else if (region) {\n        var chunderRegion = region;\n        deprecatedMessages.push(\'Regions are deprecated in favor of edges. Please see this page for \' +\n            \'documentation: https://www.twilio.com/docs/voice/client/edges.\');\n        var isDeprecatedRegion = Object.values(DeprecatedRegion).includes(chunderRegion);\n        if (isDeprecatedRegion) {\n            chunderRegion = exports.deprecatedRegions[chunderRegion];\n        }\n        var isKnownRegion = Object.values(Region).includes(chunderRegion);\n        if (isKnownRegion) {\n            var preferredEdge = exports.regionToEdge[chunderRegion];\n            deprecatedMessages.push("Region \\"" + chunderRegion + "\\" is deprecated, please use `edge` " +\n                ("\\"" + preferredEdge + "\\"."));\n        }\n        uris = [createChunderRegionUri(chunderRegion)];\n    }\n    else if (edge) {\n        var edgeValues_1 = Object.values(Edge);\n        var edgeParams = Array.isArray(edge) ? edge : [edge];\n        uris = edgeParams.map(function (param) { return edgeValues_1.includes(param)\n            ? createChunderRegionUri(exports.edgeToRegion[param])\n            : createChunderEdgeUri(param); });\n    }\n    else {\n        uris = [exports.defaultChunderRegionURI];\n    }\n    if (onDeprecated && deprecatedMessages.length) {\n        setTimeout(function () { return onDeprecated(deprecatedMessages.join(\'\\n\')); });\n    }\n    return uris;\n}\nexports.getChunderURIs = getChunderURIs;\n/**\n * Get the region shortcode by its full AWS region string.\n *\n * @private\n * @param region - The region\'s full AWS string.\n */\nfunction getRegionShortcode(region) {\n    return exports.regionShortcodes[region] || null;\n}\nexports.getRegionShortcode = getRegionShortcode;\n//# sourceMappingURL=regions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/regions.js\n')},"./node_modules/twilio-client/es5/twilio/request.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar XHR = __webpack_require__(/*! xmlhttprequest */ \"./node_modules/twilio-client/browser/xmlhttprequest.js\").XMLHttpRequest;\n\nfunction request(method, params, callback) {\n  var options = {};\n  options.XMLHttpRequest = options.XMLHttpRequest || XHR;\n  var xhr = new options.XMLHttpRequest();\n\n  xhr.open(method, params.url, true);\n  xhr.onreadystatechange = function onreadystatechange() {\n    if (xhr.readyState !== 4) {\n      return;\n    }\n\n    if (200 <= xhr.status && xhr.status < 300) {\n      callback(null, xhr.responseText);\n      return;\n    }\n\n    callback(new Error(xhr.responseText));\n  };\n\n  for (var headerName in params.headers) {\n    xhr.setRequestHeader(headerName, params.headers[headerName]);\n  }\n\n  xhr.send(JSON.stringify(params.body));\n}\n/**\n * Use XMLHttpRequest to get a network resource.\n * @param {String} method - HTTP Method\n * @param {Object} params - Request parameters\n * @param {String} params.url - URL of the resource\n * @param {Array}  params.headers - An array of headers to pass [{ headerName : headerBody }]\n * @param {Object} params.body - A JSON body to send to the resource\n * @returns {response}\n **/\nvar Request = request;\n\n/**\n * Sugar function for request('GET', params, callback);\n * @param {Object} params - Request parameters\n * @param {Request~get} callback - The callback that handles the response.\n */\nRequest.get = function get(params, callback) {\n  return new this('GET', params, callback);\n};\n\n/**\n * Sugar function for request('POST', params, callback);\n * @param {Object} params - Request parameters\n * @param {Request~post} callback - The callback that handles the response.\n */\nRequest.post = function post(params, callback) {\n  return new this('POST', params, callback);\n};\n\nmodule.exports = Request;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLWNsaWVudC9lczUvdHdpbGlvL3JlcXVlc3QuanM/ZmI5OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixVQUFVLGtIQUF3Qzs7QUFFbEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEIsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsTUFBTSxpREFBaUQsMEJBQTBCO0FBQzVGLFdBQVcsT0FBTztBQUNsQixhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsWUFBWTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsYUFBYTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90d2lsaW8tY2xpZW50L2VzNS90d2lsaW8vcmVxdWVzdC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFhIUiA9IHJlcXVpcmUoJ3htbGh0dHByZXF1ZXN0JykuWE1MSHR0cFJlcXVlc3Q7XG5cbmZ1bmN0aW9uIHJlcXVlc3QobWV0aG9kLCBwYXJhbXMsIGNhbGxiYWNrKSB7XG4gIHZhciBvcHRpb25zID0ge307XG4gIG9wdGlvbnMuWE1MSHR0cFJlcXVlc3QgPSBvcHRpb25zLlhNTEh0dHBSZXF1ZXN0IHx8IFhIUjtcbiAgdmFyIHhociA9IG5ldyBvcHRpb25zLlhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgeGhyLm9wZW4obWV0aG9kLCBwYXJhbXMudXJsLCB0cnVlKTtcbiAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIG9ucmVhZHlzdGF0ZWNoYW5nZSgpIHtcbiAgICBpZiAoeGhyLnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoMjAwIDw9IHhoci5zdGF0dXMgJiYgeGhyLnN0YXR1cyA8IDMwMCkge1xuICAgICAgY2FsbGJhY2sobnVsbCwgeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY2FsbGJhY2sobmV3IEVycm9yKHhoci5yZXNwb25zZVRleHQpKTtcbiAgfTtcblxuICBmb3IgKHZhciBoZWFkZXJOYW1lIGluIHBhcmFtcy5oZWFkZXJzKSB7XG4gICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoaGVhZGVyTmFtZSwgcGFyYW1zLmhlYWRlcnNbaGVhZGVyTmFtZV0pO1xuICB9XG5cbiAgeGhyLnNlbmQoSlNPTi5zdHJpbmdpZnkocGFyYW1zLmJvZHkpKTtcbn1cbi8qKlxuICogVXNlIFhNTEh0dHBSZXF1ZXN0IHRvIGdldCBhIG5ldHdvcmsgcmVzb3VyY2UuXG4gKiBAcGFyYW0ge1N0cmluZ30gbWV0aG9kIC0gSFRUUCBNZXRob2RcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBSZXF1ZXN0IHBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBwYXJhbXMudXJsIC0gVVJMIG9mIHRoZSByZXNvdXJjZVxuICogQHBhcmFtIHtBcnJheX0gIHBhcmFtcy5oZWFkZXJzIC0gQW4gYXJyYXkgb2YgaGVhZGVycyB0byBwYXNzIFt7IGhlYWRlck5hbWUgOiBoZWFkZXJCb2R5IH1dXG4gKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zLmJvZHkgLSBBIEpTT04gYm9keSB0byBzZW5kIHRvIHRoZSByZXNvdXJjZVxuICogQHJldHVybnMge3Jlc3BvbnNlfVxuICoqL1xudmFyIFJlcXVlc3QgPSByZXF1ZXN0O1xuXG4vKipcbiAqIFN1Z2FyIGZ1bmN0aW9uIGZvciByZXF1ZXN0KCdHRVQnLCBwYXJhbXMsIGNhbGxiYWNrKTtcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBSZXF1ZXN0IHBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7UmVxdWVzdH5nZXR9IGNhbGxiYWNrIC0gVGhlIGNhbGxiYWNrIHRoYXQgaGFuZGxlcyB0aGUgcmVzcG9uc2UuXG4gKi9cblJlcXVlc3QuZ2V0ID0gZnVuY3Rpb24gZ2V0KHBhcmFtcywgY2FsbGJhY2spIHtcbiAgcmV0dXJuIG5ldyB0aGlzKCdHRVQnLCBwYXJhbXMsIGNhbGxiYWNrKTtcbn07XG5cbi8qKlxuICogU3VnYXIgZnVuY3Rpb24gZm9yIHJlcXVlc3QoJ1BPU1QnLCBwYXJhbXMsIGNhbGxiYWNrKTtcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgLSBSZXF1ZXN0IHBhcmFtZXRlcnNcbiAqIEBwYXJhbSB7UmVxdWVzdH5wb3N0fSBjYWxsYmFjayAtIFRoZSBjYWxsYmFjayB0aGF0IGhhbmRsZXMgdGhlIHJlc3BvbnNlLlxuICovXG5SZXF1ZXN0LnBvc3QgPSBmdW5jdGlvbiBwb3N0KHBhcmFtcywgY2FsbGJhY2spIHtcbiAgcmV0dXJuIG5ldyB0aGlzKCdQT1NUJywgcGFyYW1zLCBjYWxsYmFjayk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlcXVlc3Q7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/request.js\n")},"./node_modules/twilio-client/es5/twilio/rtc/getusermedia.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar NotSupportedError = __webpack_require__(/*! ../errors */ \"./node_modules/twilio-client/es5/twilio/errors/index.js\").NotSupportedError;\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/twilio-client/es5/twilio/util.js\");\n\nfunction getUserMedia(constraints, options) {\n  options = options || {};\n  options.util = options.util || util;\n  options.navigator = options.navigator || (typeof navigator !== 'undefined' ? navigator : null);\n\n  return new Promise(function (resolve, reject) {\n    if (!options.navigator) {\n      throw new NotSupportedError('getUserMedia is not supported');\n    }\n\n    switch ('function') {\n      case _typeof(options.navigator.mediaDevices && options.navigator.mediaDevices.getUserMedia):\n        return resolve(options.navigator.mediaDevices.getUserMedia(constraints));\n      case _typeof(options.navigator.webkitGetUserMedia):\n        return options.navigator.webkitGetUserMedia(constraints, resolve, reject);\n      case _typeof(options.navigator.mozGetUserMedia):\n        return options.navigator.mozGetUserMedia(constraints, resolve, reject);\n      case _typeof(options.navigator.getUserMedia):\n        return options.navigator.getUserMedia(constraints, resolve, reject);\n      default:\n        throw new NotSupportedError('getUserMedia is not supported');\n    }\n  }).catch(function (e) {\n    throw options.util.isFirefox() && e.name === 'NotReadableError' ? new NotSupportedError('Firefox does not currently support opening multiple audio input tracks' + 'simultaneously, even across different tabs.\\n' + 'Related Bugzilla thread: https://bugzilla.mozilla.org/show_bug.cgi?id=1299324') : e;\n  });\n}\n\nmodule.exports = getUserMedia;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLWNsaWVudC9lczUvdHdpbGlvL3J0Yy9nZXR1c2VybWVkaWEuanM/YWMyNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixvR0FBb0csbUJBQW1CLEVBQUUsbUJBQW1CLDhIQUE4SDs7QUFFMVEsd0JBQXdCLGlIQUFzQztBQUM5RCxXQUFXLG1CQUFPLENBQUMsZ0VBQVM7O0FBRTVCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDs7QUFFQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90d2lsaW8tY2xpZW50L2VzNS90d2lsaW8vcnRjL2dldHVzZXJtZWRpYS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgTm90U3VwcG9ydGVkRXJyb3IgPSByZXF1aXJlKCcuLi9lcnJvcnMnKS5Ob3RTdXBwb3J0ZWRFcnJvcjtcbnZhciB1dGlsID0gcmVxdWlyZSgnLi4vdXRpbCcpO1xuXG5mdW5jdGlvbiBnZXRVc2VyTWVkaWEoY29uc3RyYWludHMsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG9wdGlvbnMudXRpbCA9IG9wdGlvbnMudXRpbCB8fCB1dGlsO1xuICBvcHRpb25zLm5hdmlnYXRvciA9IG9wdGlvbnMubmF2aWdhdG9yIHx8ICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyA/IG5hdmlnYXRvciA6IG51bGwpO1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgaWYgKCFvcHRpb25zLm5hdmlnYXRvcikge1xuICAgICAgdGhyb3cgbmV3IE5vdFN1cHBvcnRlZEVycm9yKCdnZXRVc2VyTWVkaWEgaXMgbm90IHN1cHBvcnRlZCcpO1xuICAgIH1cblxuICAgIHN3aXRjaCAoJ2Z1bmN0aW9uJykge1xuICAgICAgY2FzZSBfdHlwZW9mKG9wdGlvbnMubmF2aWdhdG9yLm1lZGlhRGV2aWNlcyAmJiBvcHRpb25zLm5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKTpcbiAgICAgICAgcmV0dXJuIHJlc29sdmUob3B0aW9ucy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYShjb25zdHJhaW50cykpO1xuICAgICAgY2FzZSBfdHlwZW9mKG9wdGlvbnMubmF2aWdhdG9yLndlYmtpdEdldFVzZXJNZWRpYSk6XG4gICAgICAgIHJldHVybiBvcHRpb25zLm5hdmlnYXRvci53ZWJraXRHZXRVc2VyTWVkaWEoY29uc3RyYWludHMsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICBjYXNlIF90eXBlb2Yob3B0aW9ucy5uYXZpZ2F0b3IubW96R2V0VXNlck1lZGlhKTpcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMubmF2aWdhdG9yLm1vekdldFVzZXJNZWRpYShjb25zdHJhaW50cywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIGNhc2UgX3R5cGVvZihvcHRpb25zLm5hdmlnYXRvci5nZXRVc2VyTWVkaWEpOlxuICAgICAgICByZXR1cm4gb3B0aW9ucy5uYXZpZ2F0b3IuZ2V0VXNlck1lZGlhKGNvbnN0cmFpbnRzLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IE5vdFN1cHBvcnRlZEVycm9yKCdnZXRVc2VyTWVkaWEgaXMgbm90IHN1cHBvcnRlZCcpO1xuICAgIH1cbiAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICB0aHJvdyBvcHRpb25zLnV0aWwuaXNGaXJlZm94KCkgJiYgZS5uYW1lID09PSAnTm90UmVhZGFibGVFcnJvcicgPyBuZXcgTm90U3VwcG9ydGVkRXJyb3IoJ0ZpcmVmb3ggZG9lcyBub3QgY3VycmVudGx5IHN1cHBvcnQgb3BlbmluZyBtdWx0aXBsZSBhdWRpbyBpbnB1dCB0cmFja3MnICsgJ3NpbXVsdGFuZW91c2x5LCBldmVuIGFjcm9zcyBkaWZmZXJlbnQgdGFicy5cXG4nICsgJ1JlbGF0ZWQgQnVnemlsbGEgdGhyZWFkOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMjk5MzI0JykgOiBlO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRVc2VyTWVkaWE7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/rtc/getusermedia.js\n")},"./node_modules/twilio-client/es5/twilio/rtc/icecandidate.js":(__unused_webpack_module,exports)=>{"use strict";eval("\n/**\n * @packageDocumentation\n * @module Voice\n * @internalapi\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * {@link RTCIceCandidate} parses an ICE candidate gathered by the browser\n * and returns a IceCandidate object\n */\nvar IceCandidate = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param iceCandidate RTCIceCandidate coming from the browser\n     */\n    function IceCandidate(iceCandidate, isRemote) {\n        if (isRemote === void 0) { isRemote = false; }\n        /**\n         * Whether this is deleted from the list of candidate gathered\n         */\n        this.deleted = false;\n        var cost;\n        var parts = iceCandidate.candidate.split('network-cost ');\n        if (parts[1]) {\n            cost = parseInt(parts[1], 10);\n        }\n        this.candidateType = iceCandidate.type;\n        this.ip = iceCandidate.ip || iceCandidate.address;\n        this.isRemote = isRemote;\n        this.networkCost = cost;\n        this.port = iceCandidate.port;\n        this.priority = iceCandidate.priority;\n        this.protocol = iceCandidate.protocol;\n        this.relatedAddress = iceCandidate.relatedAddress;\n        this.relatedPort = iceCandidate.relatedPort;\n        this.tcpType = iceCandidate.tcpType;\n        this.transportId = iceCandidate.sdpMid;\n    }\n    /**\n     * Get the payload object for insights\n     */\n    IceCandidate.prototype.toPayload = function () {\n        return {\n            'candidate_type': this.candidateType,\n            'deleted': this.deleted,\n            'ip': this.ip,\n            'is_remote': this.isRemote,\n            'network-cost': this.networkCost,\n            'port': this.port,\n            'priority': this.priority,\n            'protocol': this.protocol,\n            'related_address': this.relatedAddress,\n            'related_port': this.relatedPort,\n            'tcp_type': this.tcpType,\n            'transport_id': this.transportId,\n        };\n    };\n    return IceCandidate;\n}());\nexports.IceCandidate = IceCandidate;\n//# sourceMappingURL=icecandidate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLWNsaWVudC9lczUvdHdpbGlvL3J0Yy9pY2VjYW5kaWRhdGUuanM/MzI0NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsQ0FBQyxjQUFjLEVBQUM7QUFDN0Q7QUFDQSxJQUFJLHNCQUFzQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGtCQUFrQjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELG9CQUFvQjtBQUNwQiIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90d2lsaW8tY2xpZW50L2VzNS90d2lsaW8vcnRjL2ljZWNhbmRpZGF0ZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgVm9pY2VcbiAqIEBpbnRlcm5hbGFwaVxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIHtAbGluayBSVENJY2VDYW5kaWRhdGV9IHBhcnNlcyBhbiBJQ0UgY2FuZGlkYXRlIGdhdGhlcmVkIGJ5IHRoZSBicm93c2VyXG4gKiBhbmQgcmV0dXJucyBhIEljZUNhbmRpZGF0ZSBvYmplY3RcbiAqL1xudmFyIEljZUNhbmRpZGF0ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0gaWNlQ2FuZGlkYXRlIFJUQ0ljZUNhbmRpZGF0ZSBjb21pbmcgZnJvbSB0aGUgYnJvd3NlclxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEljZUNhbmRpZGF0ZShpY2VDYW5kaWRhdGUsIGlzUmVtb3RlKSB7XG4gICAgICAgIGlmIChpc1JlbW90ZSA9PT0gdm9pZCAwKSB7IGlzUmVtb3RlID0gZmFsc2U7IH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFdoZXRoZXIgdGhpcyBpcyBkZWxldGVkIGZyb20gdGhlIGxpc3Qgb2YgY2FuZGlkYXRlIGdhdGhlcmVkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRlbGV0ZWQgPSBmYWxzZTtcbiAgICAgICAgdmFyIGNvc3Q7XG4gICAgICAgIHZhciBwYXJ0cyA9IGljZUNhbmRpZGF0ZS5jYW5kaWRhdGUuc3BsaXQoJ25ldHdvcmstY29zdCAnKTtcbiAgICAgICAgaWYgKHBhcnRzWzFdKSB7XG4gICAgICAgICAgICBjb3N0ID0gcGFyc2VJbnQocGFydHNbMV0sIDEwKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNhbmRpZGF0ZVR5cGUgPSBpY2VDYW5kaWRhdGUudHlwZTtcbiAgICAgICAgdGhpcy5pcCA9IGljZUNhbmRpZGF0ZS5pcCB8fCBpY2VDYW5kaWRhdGUuYWRkcmVzcztcbiAgICAgICAgdGhpcy5pc1JlbW90ZSA9IGlzUmVtb3RlO1xuICAgICAgICB0aGlzLm5ldHdvcmtDb3N0ID0gY29zdDtcbiAgICAgICAgdGhpcy5wb3J0ID0gaWNlQ2FuZGlkYXRlLnBvcnQ7XG4gICAgICAgIHRoaXMucHJpb3JpdHkgPSBpY2VDYW5kaWRhdGUucHJpb3JpdHk7XG4gICAgICAgIHRoaXMucHJvdG9jb2wgPSBpY2VDYW5kaWRhdGUucHJvdG9jb2w7XG4gICAgICAgIHRoaXMucmVsYXRlZEFkZHJlc3MgPSBpY2VDYW5kaWRhdGUucmVsYXRlZEFkZHJlc3M7XG4gICAgICAgIHRoaXMucmVsYXRlZFBvcnQgPSBpY2VDYW5kaWRhdGUucmVsYXRlZFBvcnQ7XG4gICAgICAgIHRoaXMudGNwVHlwZSA9IGljZUNhbmRpZGF0ZS50Y3BUeXBlO1xuICAgICAgICB0aGlzLnRyYW5zcG9ydElkID0gaWNlQ2FuZGlkYXRlLnNkcE1pZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBwYXlsb2FkIG9iamVjdCBmb3IgaW5zaWdodHNcbiAgICAgKi9cbiAgICBJY2VDYW5kaWRhdGUucHJvdG90eXBlLnRvUGF5bG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdjYW5kaWRhdGVfdHlwZSc6IHRoaXMuY2FuZGlkYXRlVHlwZSxcbiAgICAgICAgICAgICdkZWxldGVkJzogdGhpcy5kZWxldGVkLFxuICAgICAgICAgICAgJ2lwJzogdGhpcy5pcCxcbiAgICAgICAgICAgICdpc19yZW1vdGUnOiB0aGlzLmlzUmVtb3RlLFxuICAgICAgICAgICAgJ25ldHdvcmstY29zdCc6IHRoaXMubmV0d29ya0Nvc3QsXG4gICAgICAgICAgICAncG9ydCc6IHRoaXMucG9ydCxcbiAgICAgICAgICAgICdwcmlvcml0eSc6IHRoaXMucHJpb3JpdHksXG4gICAgICAgICAgICAncHJvdG9jb2wnOiB0aGlzLnByb3RvY29sLFxuICAgICAgICAgICAgJ3JlbGF0ZWRfYWRkcmVzcyc6IHRoaXMucmVsYXRlZEFkZHJlc3MsXG4gICAgICAgICAgICAncmVsYXRlZF9wb3J0JzogdGhpcy5yZWxhdGVkUG9ydCxcbiAgICAgICAgICAgICd0Y3BfdHlwZSc6IHRoaXMudGNwVHlwZSxcbiAgICAgICAgICAgICd0cmFuc3BvcnRfaWQnOiB0aGlzLnRyYW5zcG9ydElkLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIEljZUNhbmRpZGF0ZTtcbn0oKSk7XG5leHBvcnRzLkljZUNhbmRpZGF0ZSA9IEljZUNhbmRpZGF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWljZWNhbmRpZGF0ZS5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/rtc/icecandidate.js\n")},"./node_modules/twilio-client/es5/twilio/rtc/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar PeerConnection = __webpack_require__(/*! ./peerconnection */ \"./node_modules/twilio-client/es5/twilio/rtc/peerconnection.js\");\n\nvar _require = __webpack_require__(/*! ./rtcpc */ \"./node_modules/twilio-client/es5/twilio/rtc/rtcpc.js\"),\n    test = _require.test;\n\nfunction enabled() {\n  return test();\n}\n\nfunction getMediaEngine() {\n  return typeof RTCIceGatherer !== 'undefined' ? 'ORTC' : 'WebRTC';\n}\n\nmodule.exports = {\n  enabled: enabled,\n  getMediaEngine: getMediaEngine,\n  PeerConnection: PeerConnection\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLWNsaWVudC9lczUvdHdpbGlvL3J0Yy9pbmRleC5qcz8xMzlhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLHFCQUFxQixtQkFBTyxDQUFDLHVGQUFrQjs7QUFFL0MsZUFBZSxtQkFBTyxDQUFDLHFFQUFTO0FBQ2hDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90d2lsaW8tY2xpZW50L2VzNS90d2lsaW8vcnRjL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUGVlckNvbm5lY3Rpb24gPSByZXF1aXJlKCcuL3BlZXJjb25uZWN0aW9uJyk7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4vcnRjcGMnKSxcbiAgICB0ZXN0ID0gX3JlcXVpcmUudGVzdDtcblxuZnVuY3Rpb24gZW5hYmxlZCgpIHtcbiAgcmV0dXJuIHRlc3QoKTtcbn1cblxuZnVuY3Rpb24gZ2V0TWVkaWFFbmdpbmUoKSB7XG4gIHJldHVybiB0eXBlb2YgUlRDSWNlR2F0aGVyZXIgIT09ICd1bmRlZmluZWQnID8gJ09SVEMnIDogJ1dlYlJUQyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBlbmFibGVkOiBlbmFibGVkLFxuICBnZXRNZWRpYUVuZ2luZTogZ2V0TWVkaWFFbmdpbmUsXG4gIFBlZXJDb25uZWN0aW9uOiBQZWVyQ29ubmVjdGlvblxufTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/rtc/index.js\n")},"./node_modules/twilio-client/es5/twilio/rtc/mockrtcstatsreport.js":module=>{eval("/**\n * This file was imported from another project. If making changes to this file, please don't\n * make them here. Make them on the linked repo below, then copy back:\n * https://code.hq.twilio.com/client/MockRTCStatsReport\n */\n/* eslint-disable no-undefined */\n// The legacy max volume, which is the positive half of a signed short integer.\nvar OLD_MAX_VOLUME = 32767;\nvar NativeRTCStatsReport = typeof window !== 'undefined'\n    ? window.RTCStatsReport : undefined;\n/**\n * Create a MockRTCStatsReport wrapper around a Map of RTCStats objects. If RTCStatsReport is available\n *   natively, it will be inherited so that instanceof checks pass.\n * @constructor\n * @extends RTCStatsReport\n * @param {Map<string, RTCStats>} statsMap - A Map of RTCStats objects to wrap\n *   with a MockRTCStatsReport object.\n */\nfunction MockRTCStatsReport(statsMap) {\n    if (!(this instanceof MockRTCStatsReport)) {\n        return new MockRTCStatsReport(statsMap);\n    }\n    var self = this;\n    Object.defineProperties(this, {\n        size: {\n            enumerable: true,\n            get: function () {\n                return self._map.size;\n            }\n        },\n        _map: { value: statsMap }\n    });\n    this[Symbol.iterator] = statsMap[Symbol.iterator];\n}\n// If RTCStatsReport is available natively, inherit it. Keep our constructor.\nif (NativeRTCStatsReport) {\n    MockRTCStatsReport.prototype = Object.create(NativeRTCStatsReport.prototype);\n    MockRTCStatsReport.prototype.constructor = MockRTCStatsReport;\n}\n// Map the Map-like read methods to the underlying Map\n['entries', 'forEach', 'get', 'has', 'keys', 'values'].forEach(function (key) {\n    MockRTCStatsReport.prototype[key] = function () {\n        var _a;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return (_a = this._map)[key].apply(_a, args);\n    };\n});\n/**\n * Convert an array of RTCStats objects into a mock RTCStatsReport object.\n * @param {Array<RTCStats>}\n * @return {MockRTCStatsReport}\n */\nMockRTCStatsReport.fromArray = function fromArray(array) {\n    return new MockRTCStatsReport(array.reduce(function (map, rtcStats) {\n        map.set(rtcStats.id, rtcStats);\n        return map;\n    }, new Map()));\n};\n/**\n * Convert a legacy RTCStatsResponse object into a mock RTCStatsReport object.\n * @param {RTCStatsResponse} statsResponse - An RTCStatsResponse object returned by the\n *   legacy getStats(callback) method in Chrome.\n * @return {MockRTCStatsReport} A mock RTCStatsReport object.\n */\nMockRTCStatsReport.fromRTCStatsResponse = function fromRTCStatsResponse(statsResponse) {\n    var activeCandidatePairId;\n    var transportIds = new Map();\n    var statsMap = statsResponse.result().reduce(function (map, report) {\n        var id = report.id;\n        switch (report.type) {\n            case 'googCertificate':\n                map.set(id, createRTCCertificateStats(report));\n                break;\n            case 'datachannel':\n                map.set(id, createRTCDataChannelStats(report));\n                break;\n            case 'googCandidatePair':\n                if (getBoolean(report, 'googActiveConnection')) {\n                    activeCandidatePairId = id;\n                }\n                map.set(id, createRTCIceCandidatePairStats(report));\n                break;\n            case 'localcandidate':\n                map.set(id, createRTCIceCandidateStats(report, false));\n                break;\n            case 'remotecandidate':\n                map.set(id, createRTCIceCandidateStats(report, true));\n                break;\n            case 'ssrc':\n                if (isPresent(report, 'packetsReceived')) {\n                    map.set(\"rtp-\" + id, createRTCInboundRTPStreamStats(report));\n                }\n                else {\n                    map.set(\"rtp-\" + id, createRTCOutboundRTPStreamStats(report));\n                }\n                map.set(\"track-\" + id, createRTCMediaStreamTrackStats(report));\n                map.set(\"codec-\" + id, createRTCCodecStats(report));\n                break;\n            case 'googComponent':\n                var transportReport = createRTCTransportStats(report);\n                transportIds.set(transportReport.selectedCandidatePairId, id);\n                map.set(id, createRTCTransportStats(report));\n                break;\n        }\n        return map;\n    }, new Map());\n    if (activeCandidatePairId) {\n        var activeTransportId = transportIds.get(activeCandidatePairId);\n        if (activeTransportId) {\n            statsMap.get(activeTransportId).dtlsState = 'connected';\n        }\n    }\n    return new MockRTCStatsReport(statsMap);\n};\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCTransportStats}\n */\nfunction createRTCTransportStats(report) {\n    return {\n        type: 'transport',\n        id: report.id,\n        timestamp: Date.parse(report.timestamp),\n        bytesSent: undefined,\n        bytesReceived: undefined,\n        rtcpTransportStatsId: undefined,\n        dtlsState: undefined,\n        selectedCandidatePairId: report.stat('selectedCandidatePairId'),\n        localCertificateId: report.stat('localCertificateId'),\n        remoteCertificateId: report.stat('remoteCertificateId')\n    };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCCodecStats}\n */\nfunction createRTCCodecStats(report) {\n    return {\n        type: 'codec',\n        id: report.id,\n        timestamp: Date.parse(report.timestamp),\n        payloadType: undefined,\n        mimeType: report.stat('mediaType') + \"/\" + report.stat('googCodecName'),\n        clockRate: undefined,\n        channels: undefined,\n        sdpFmtpLine: undefined,\n        implementation: undefined\n    };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCMediaStreamTrackStats}\n */\nfunction createRTCMediaStreamTrackStats(report) {\n    return {\n        type: 'track',\n        id: report.id,\n        timestamp: Date.parse(report.timestamp),\n        trackIdentifier: report.stat('googTrackId'),\n        remoteSource: undefined,\n        ended: undefined,\n        kind: report.stat('mediaType'),\n        detached: undefined,\n        ssrcIds: undefined,\n        frameWidth: isPresent(report, 'googFrameWidthReceived')\n            ? getInt(report, 'googFrameWidthReceived')\n            : getInt(report, 'googFrameWidthSent'),\n        frameHeight: isPresent(report, 'googFrameHeightReceived')\n            ? getInt(report, 'googFrameHeightReceived')\n            : getInt(report, 'googFrameHeightSent'),\n        framesPerSecond: undefined,\n        framesSent: getInt(report, 'framesEncoded'),\n        framesReceived: undefined,\n        framesDecoded: getInt(report, 'framesDecoded'),\n        framesDropped: undefined,\n        framesCorrupted: undefined,\n        partialFramesLost: undefined,\n        fullFramesLost: undefined,\n        audioLevel: isPresent(report, 'audioOutputLevel')\n            ? getInt(report, 'audioOutputLevel') / OLD_MAX_VOLUME\n            : (getInt(report, 'audioInputLevel') || 0) / OLD_MAX_VOLUME,\n        echoReturnLoss: getFloat(report, 'googEchoCancellationReturnLoss'),\n        echoReturnLossEnhancement: getFloat(report, 'googEchoCancellationReturnLossEnhancement')\n    };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @param {boolean} isInbound - Whether to create an inbound stats object, or outbound.\n * @returns {RTCRTPStreamStats}\n */\nfunction createRTCRTPStreamStats(report, isInbound) {\n    return {\n        id: report.id,\n        timestamp: Date.parse(report.timestamp),\n        ssrc: report.stat('ssrc'),\n        associateStatsId: undefined,\n        isRemote: undefined,\n        mediaType: report.stat('mediaType'),\n        trackId: \"track-\" + report.id,\n        transportId: report.stat('transportId'),\n        codecId: \"codec-\" + report.id,\n        firCount: isInbound\n            ? getInt(report, 'googFirsSent')\n            : undefined,\n        pliCount: isInbound\n            ? getInt(report, 'googPlisSent')\n            : getInt(report, 'googPlisReceived'),\n        nackCount: isInbound\n            ? getInt(report, 'googNacksSent')\n            : getInt(report, 'googNacksReceived'),\n        sliCount: undefined,\n        qpSum: getInt(report, 'qpSum')\n    };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCInboundRTPStreamStats}\n */\nfunction createRTCInboundRTPStreamStats(report) {\n    var rtp = createRTCRTPStreamStats(report, true);\n    Object.assign(rtp, {\n        type: 'inbound-rtp',\n        packetsReceived: getInt(report, 'packetsReceived'),\n        bytesReceived: getInt(report, 'bytesReceived'),\n        packetsLost: getInt(report, 'packetsLost'),\n        jitter: convertMsToSeconds(report.stat('googJitterReceived')),\n        fractionLost: undefined,\n        roundTripTime: convertMsToSeconds(report.stat('googRtt')),\n        packetsDiscarded: undefined,\n        packetsRepaired: undefined,\n        burstPacketsLost: undefined,\n        burstPacketsDiscarded: undefined,\n        burstLossCount: undefined,\n        burstDiscardCount: undefined,\n        burstLossRate: undefined,\n        burstDiscardRate: undefined,\n        gapLossRate: undefined,\n        gapDiscardRate: undefined,\n        framesDecoded: getInt(report, 'framesDecoded')\n    });\n    return rtp;\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCOutboundRTPStreamStats}\n */\nfunction createRTCOutboundRTPStreamStats(report) {\n    var rtp = createRTCRTPStreamStats(report, false);\n    Object.assign(rtp, {\n        type: 'outbound-rtp',\n        remoteTimestamp: undefined,\n        packetsSent: getInt(report, 'packetsSent'),\n        bytesSent: getInt(report, 'bytesSent'),\n        targetBitrate: undefined,\n        framesEncoded: getInt(report, 'framesEncoded')\n    });\n    return rtp;\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @param {boolean} isRemote - Whether to create for a remote candidate, or local candidate.\n * @returns {RTCIceCandidateStats}\n */\nfunction createRTCIceCandidateStats(report, isRemote) {\n    return {\n        type: isRemote\n            ? 'remote-candidate'\n            : 'local-candidate',\n        id: report.id,\n        timestamp: Date.parse(report.timestamp),\n        transportId: undefined,\n        isRemote: isRemote,\n        ip: report.stat('ipAddress'),\n        port: getInt(report, 'portNumber'),\n        protocol: report.stat('transport'),\n        candidateType: translateCandidateType(report.stat('candidateType')),\n        priority: getFloat(report, 'priority'),\n        url: undefined,\n        relayProtocol: undefined,\n        deleted: undefined\n    };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCIceCandidatePairStats}\n */\nfunction createRTCIceCandidatePairStats(report) {\n    return {\n        type: 'candidate-pair',\n        id: report.id,\n        timestamp: Date.parse(report.timestamp),\n        transportId: report.stat('googChannelId'),\n        localCandidateId: report.stat('localCandidateId'),\n        remoteCandidateId: report.stat('remoteCandidateId'),\n        state: undefined,\n        priority: undefined,\n        nominated: undefined,\n        writable: getBoolean(report, 'googWritable'),\n        readable: undefined,\n        bytesSent: getInt(report, 'bytesSent'),\n        bytesReceived: getInt(report, 'bytesReceived'),\n        lastPacketSentTimestamp: undefined,\n        lastPacketReceivedTimestamp: undefined,\n        totalRoundTripTime: undefined,\n        currentRoundTripTime: convertMsToSeconds(report.stat('googRtt')),\n        availableOutgoingBitrate: undefined,\n        availableIncomingBitrate: undefined,\n        requestsReceived: getInt(report, 'requestsReceived'),\n        requestsSent: getInt(report, 'requestsSent'),\n        responsesReceived: getInt(report, 'responsesReceived'),\n        responsesSent: getInt(report, 'responsesSent'),\n        retransmissionsReceived: undefined,\n        retransmissionsSent: undefined,\n        consentRequestsSent: getInt(report, 'consentRequestsSent')\n    };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCIceCertificateStats}\n */\nfunction createRTCCertificateStats(report) {\n    return {\n        type: 'certificate',\n        id: report.id,\n        timestamp: Date.parse(report.timestamp),\n        fingerprint: report.stat('googFingerprint'),\n        fingerprintAlgorithm: report.stat('googFingerprintAlgorithm'),\n        base64Certificate: report.stat('googDerBase64'),\n        issuerCertificateId: report.stat('googIssuerId')\n    };\n}\n/**\n * @param {RTCLegacyStatsReport} report\n * @returns {RTCDataChannelStats}\n */\nfunction createRTCDataChannelStats(report) {\n    return {\n        type: 'data-channel',\n        id: report.id,\n        timestamp: Date.parse(report.timestamp),\n        label: report.stat('label'),\n        protocol: report.stat('protocol'),\n        datachannelid: report.stat('datachannelid'),\n        transportId: report.stat('transportId'),\n        state: report.stat('state'),\n        messagesSent: undefined,\n        bytesSent: undefined,\n        messagesReceived: undefined,\n        bytesReceived: undefined\n    };\n}\n/**\n * @param {number} inMs - A time in milliseconds\n * @returns {number} The time in seconds\n */\nfunction convertMsToSeconds(inMs) {\n    return isNaN(inMs) || inMs === ''\n        ? undefined\n        : parseInt(inMs, 10) / 1000;\n}\n/**\n * @param {string} type - A type in the legacy format\n * @returns {string} The type adjusted to new standards for known naming changes\n */\nfunction translateCandidateType(type) {\n    switch (type) {\n        case 'peerreflexive':\n            return 'prflx';\n        case 'serverreflexive':\n            return 'srflx';\n        case 'host':\n        case 'relay':\n        default:\n            return type;\n    }\n}\nfunction getInt(report, statName) {\n    var stat = report.stat(statName);\n    return isPresent(report, statName)\n        ? parseInt(stat, 10)\n        : undefined;\n}\nfunction getFloat(report, statName) {\n    var stat = report.stat(statName);\n    return isPresent(report, statName)\n        ? parseFloat(stat)\n        : undefined;\n}\nfunction getBoolean(report, statName) {\n    var stat = report.stat(statName);\n    return isPresent(report, statName)\n        ? (stat === 'true' || stat === true)\n        : undefined;\n}\nfunction isPresent(report, statName) {\n    var stat = report.stat(statName);\n    return typeof stat !== 'undefined' && stat !== '';\n}\nmodule.exports = MockRTCStatsReport;\n//# sourceMappingURL=mockrtcstatsreport.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/rtc/mockrtcstatsreport.js\n")},"./node_modules/twilio-client/es5/twilio/rtc/mos.js":module=>{"use strict";eval("\n\nvar rfactorConstants = {\n  r0: 94.768,\n  is: 1.42611\n};\n\n/**\n * Calculate the mos score of a stats object\n * @param {number} rtt\n * @param {number} jitter\n * @param {number} fractionLost - The fraction of packets that have been lost\n     Calculated by packetsLost / totalPackets\n * @return {number} mos - Calculated MOS, 1.0 through roughly 4.5\n */\nfunction calcMos(rtt, jitter, fractionLost) {\n  if (!isPositiveNumber(rtt) || !isPositiveNumber(jitter) || !isPositiveNumber(fractionLost)) {\n    return null;\n  }\n\n  var rFactor = calculateRFactor(rtt, jitter, fractionLost);\n\n  var mos = 1 + 0.035 * rFactor + 0.000007 * rFactor * (rFactor - 60) * (100 - rFactor);\n\n  // Make sure MOS is in range\n  var isValid = mos >= 1.0 && mos < 4.6;\n  return isValid ? mos : null;\n}\n\nfunction calculateRFactor(rtt, jitter, fractionLost) {\n  var effectiveLatency = rtt + jitter * 2 + 10;\n  var rFactor = 0;\n\n  switch (true) {\n    case effectiveLatency < 160:\n      rFactor = rfactorConstants.r0 - effectiveLatency / 40;\n      break;\n    case effectiveLatency < 1000:\n      rFactor = rfactorConstants.r0 - (effectiveLatency - 120) / 10;\n      break;\n    case effectiveLatency >= 1000:\n      rFactor = rfactorConstants.r0 - effectiveLatency / 100;\n      break;\n  }\n\n  var multiplier = .01;\n  switch (true) {\n    case fractionLost === -1:\n      multiplier = 0;\n      rFactor = 0;\n      break;\n    case fractionLost <= rFactor / 2.5:\n      multiplier = 2.5;\n      break;\n    case fractionLost > rFactor / 2.5 && fractionLost < 100:\n      multiplier = .25;\n      break;\n  }\n\n  rFactor -= fractionLost * multiplier;\n  return rFactor;\n}\n\nfunction isPositiveNumber(n) {\n  return typeof n === 'number' && !isNaN(n) && isFinite(n) && n >= 0;\n}\n\nmodule.exports = {\n  calculate: calcMos\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLWNsaWVudC9lczUvdHdpbGlvL3J0Yy9tb3MuanM/YzYwNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsT0FBTztBQUNsQixXQUFXLE9BQU87QUFDbEI7QUFDQSxZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy90d2lsaW8tY2xpZW50L2VzNS90d2lsaW8vcnRjL21vcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHJmYWN0b3JDb25zdGFudHMgPSB7XG4gIHIwOiA5NC43NjgsXG4gIGlzOiAxLjQyNjExXG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZSB0aGUgbW9zIHNjb3JlIG9mIGEgc3RhdHMgb2JqZWN0XG4gKiBAcGFyYW0ge251bWJlcn0gcnR0XG4gKiBAcGFyYW0ge251bWJlcn0gaml0dGVyXG4gKiBAcGFyYW0ge251bWJlcn0gZnJhY3Rpb25Mb3N0IC0gVGhlIGZyYWN0aW9uIG9mIHBhY2tldHMgdGhhdCBoYXZlIGJlZW4gbG9zdFxuICAgICBDYWxjdWxhdGVkIGJ5IHBhY2tldHNMb3N0IC8gdG90YWxQYWNrZXRzXG4gKiBAcmV0dXJuIHtudW1iZXJ9IG1vcyAtIENhbGN1bGF0ZWQgTU9TLCAxLjAgdGhyb3VnaCByb3VnaGx5IDQuNVxuICovXG5mdW5jdGlvbiBjYWxjTW9zKHJ0dCwgaml0dGVyLCBmcmFjdGlvbkxvc3QpIHtcbiAgaWYgKCFpc1Bvc2l0aXZlTnVtYmVyKHJ0dCkgfHwgIWlzUG9zaXRpdmVOdW1iZXIoaml0dGVyKSB8fCAhaXNQb3NpdGl2ZU51bWJlcihmcmFjdGlvbkxvc3QpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgckZhY3RvciA9IGNhbGN1bGF0ZVJGYWN0b3IocnR0LCBqaXR0ZXIsIGZyYWN0aW9uTG9zdCk7XG5cbiAgdmFyIG1vcyA9IDEgKyAwLjAzNSAqIHJGYWN0b3IgKyAwLjAwMDAwNyAqIHJGYWN0b3IgKiAockZhY3RvciAtIDYwKSAqICgxMDAgLSByRmFjdG9yKTtcblxuICAvLyBNYWtlIHN1cmUgTU9TIGlzIGluIHJhbmdlXG4gIHZhciBpc1ZhbGlkID0gbW9zID49IDEuMCAmJiBtb3MgPCA0LjY7XG4gIHJldHVybiBpc1ZhbGlkID8gbW9zIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlUkZhY3RvcihydHQsIGppdHRlciwgZnJhY3Rpb25Mb3N0KSB7XG4gIHZhciBlZmZlY3RpdmVMYXRlbmN5ID0gcnR0ICsgaml0dGVyICogMiArIDEwO1xuICB2YXIgckZhY3RvciA9IDA7XG5cbiAgc3dpdGNoICh0cnVlKSB7XG4gICAgY2FzZSBlZmZlY3RpdmVMYXRlbmN5IDwgMTYwOlxuICAgICAgckZhY3RvciA9IHJmYWN0b3JDb25zdGFudHMucjAgLSBlZmZlY3RpdmVMYXRlbmN5IC8gNDA7XG4gICAgICBicmVhaztcbiAgICBjYXNlIGVmZmVjdGl2ZUxhdGVuY3kgPCAxMDAwOlxuICAgICAgckZhY3RvciA9IHJmYWN0b3JDb25zdGFudHMucjAgLSAoZWZmZWN0aXZlTGF0ZW5jeSAtIDEyMCkgLyAxMDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgZWZmZWN0aXZlTGF0ZW5jeSA+PSAxMDAwOlxuICAgICAgckZhY3RvciA9IHJmYWN0b3JDb25zdGFudHMucjAgLSBlZmZlY3RpdmVMYXRlbmN5IC8gMTAwO1xuICAgICAgYnJlYWs7XG4gIH1cblxuICB2YXIgbXVsdGlwbGllciA9IC4wMTtcbiAgc3dpdGNoICh0cnVlKSB7XG4gICAgY2FzZSBmcmFjdGlvbkxvc3QgPT09IC0xOlxuICAgICAgbXVsdGlwbGllciA9IDA7XG4gICAgICByRmFjdG9yID0gMDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgZnJhY3Rpb25Mb3N0IDw9IHJGYWN0b3IgLyAyLjU6XG4gICAgICBtdWx0aXBsaWVyID0gMi41O1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBmcmFjdGlvbkxvc3QgPiByRmFjdG9yIC8gMi41ICYmIGZyYWN0aW9uTG9zdCA8IDEwMDpcbiAgICAgIG11bHRpcGxpZXIgPSAuMjU7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJGYWN0b3IgLT0gZnJhY3Rpb25Mb3N0ICogbXVsdGlwbGllcjtcbiAgcmV0dXJuIHJGYWN0b3I7XG59XG5cbmZ1bmN0aW9uIGlzUG9zaXRpdmVOdW1iZXIobikge1xuICByZXR1cm4gdHlwZW9mIG4gPT09ICdudW1iZXInICYmICFpc05hTihuKSAmJiBpc0Zpbml0ZShuKSAmJiBuID49IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjYWxjdWxhdGU6IGNhbGNNb3Ncbn07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/rtc/mos.js\n")},"./node_modules/twilio-client/es5/twilio/rtc/peerconnection.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar _require = __webpack_require__(/*! ../errors */ \"./node_modules/twilio-client/es5/twilio/errors/index.js\"),\n    InvalidArgumentError = _require.InvalidArgumentError,\n    MediaErrors = _require.MediaErrors,\n    NotSupportedError = _require.NotSupportedError,\n    SignalingErrors = _require.SignalingErrors;\n\nvar Log = __webpack_require__(/*! ../log */ \"./node_modules/twilio-client/es5/twilio/log.js\").default;\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/twilio-client/es5/twilio/util.js\");\nvar RTCPC = __webpack_require__(/*! ./rtcpc */ \"./node_modules/twilio-client/es5/twilio/rtc/rtcpc.js\");\n\nvar _require2 = __webpack_require__(/*! ./sdp */ \"./node_modules/twilio-client/es5/twilio/rtc/sdp.js\"),\n    setIceAggressiveNomination = _require2.setIceAggressiveNomination;\n\nvar ICE_GATHERING_TIMEOUT = 15000;\nvar ICE_GATHERING_FAIL_NONE = 'none';\nvar ICE_GATHERING_FAIL_TIMEOUT = 'timeout';\nvar INITIAL_ICE_CONNECTION_STATE = 'new';\nvar VOLUME_INTERVAL_MS = 50;\n\n/**\n * @typedef {Object} PeerConnection\n * @param audioHelper\n * @param pstream\n * @param options\n * @return {PeerConnection}\n * @constructor\n */\nfunction PeerConnection(audioHelper, pstream, getUserMedia, options) {\n  if (!audioHelper || !pstream || !getUserMedia) {\n    throw new InvalidArgumentError('Audiohelper, pstream and getUserMedia are required arguments');\n  }\n\n  if (!(this instanceof PeerConnection)) {\n    return new PeerConnection(audioHelper, pstream, getUserMedia, options);\n  }\n\n  function noop() {}\n  this.onopen = noop;\n  this.onerror = noop;\n  this.onclose = noop;\n  this.ondisconnected = noop;\n  this.onfailed = noop;\n  this.onconnected = noop;\n  this.onreconnected = noop;\n  this.onsignalingstatechange = noop;\n  this.ondtlstransportstatechange = noop;\n  this.onicegatheringfailure = noop;\n  this.onicegatheringstatechange = noop;\n  this.oniceconnectionstatechange = noop;\n  this.onpcconnectionstatechange = noop;\n  this.onicecandidate = noop;\n  this.onselectedcandidatepairchange = noop;\n  this.onvolume = noop;\n  this.version = null;\n  this.pstream = pstream;\n  this.stream = null;\n  this.sinkIds = new Set(['default']);\n  this.outputs = new Map();\n  this.status = 'connecting';\n  this.callSid = null;\n  this.isMuted = false;\n  this.getUserMedia = getUserMedia;\n\n  var AudioContext = typeof window !== 'undefined' && (window.AudioContext || window.webkitAudioContext);\n  this._isSinkSupported = !!AudioContext && typeof HTMLAudioElement !== 'undefined' && HTMLAudioElement.prototype.setSinkId;\n  // NOTE(mmalavalli): Since each Connection creates its own AudioContext,\n  // after 6 instances an exception is thrown. Refer https://www.w3.org/2011/audio/track/issues/3.\n  // In order to get around it, we are re-using the Device's AudioContext.\n  this._audioContext = AudioContext && audioHelper._audioContext;\n  this._hasIceCandidates = false;\n  this._hasIceGatheringFailures = false;\n  this._iceGatheringTimeoutId = null;\n  this._masterAudio = null;\n  this._masterAudioDeviceId = null;\n  this._mediaStreamSource = null;\n  this._dtmfSender = null;\n  this._dtmfSenderUnsupported = false;\n  this._callEvents = [];\n  this._nextTimeToPublish = Date.now();\n  this._onAnswerOrRinging = noop;\n  this._onHangup = noop;\n  this._remoteStream = null;\n  this._shouldManageStream = true;\n  this._iceState = INITIAL_ICE_CONNECTION_STATE;\n  this._isUnifiedPlan = options.isUnifiedPlan;\n\n  this.options = options = options || {};\n  this.navigator = options.navigator || (typeof navigator !== 'undefined' ? navigator : null);\n  this.util = options.util || util;\n  this.codecPreferences = options.codecPreferences;\n\n  this._log = Log.getInstance();\n\n  return this;\n}\n\nPeerConnection.prototype.uri = function () {\n  return this._uri;\n};\n\n/**\n * Open the underlying RTCPeerConnection with a MediaStream obtained by\n *   passed constraints. The resulting MediaStream is created internally\n *   and will therefore be managed and destroyed internally.\n * @param {MediaStreamConstraints} constraints\n */\nPeerConnection.prototype.openWithConstraints = function (constraints) {\n  return this.getUserMedia({ audio: constraints }).then(this._setInputTracksFromStream.bind(this, false));\n};\n\n/**\n * Replace the existing input audio tracks with the audio tracks from the\n *   passed input audio stream. We re-use the existing stream because\n *   the AnalyzerNode is bound to the stream.\n * @param {MediaStream} stream\n */\nPeerConnection.prototype.setInputTracksFromStream = function (stream) {\n  var self = this;\n  return this._setInputTracksFromStream(true, stream).then(function () {\n    self._shouldManageStream = false;\n  });\n};\n\nPeerConnection.prototype._createAnalyser = function (audioContext, options) {\n  options = Object.assign({\n    fftSize: 32,\n    smoothingTimeConstant: 0.3\n  }, options);\n\n  var analyser = audioContext.createAnalyser();\n  for (var field in options) {\n    analyser[field] = options[field];\n  }\n\n  return analyser;\n};\n\nPeerConnection.prototype._setVolumeHandler = function (handler) {\n  this.onvolume = handler;\n};\nPeerConnection.prototype._startPollingVolume = function () {\n  if (!this._audioContext || !this.stream || !this._remoteStream) {\n    return;\n  }\n\n  var audioContext = this._audioContext;\n\n  var inputAnalyser = this._inputAnalyser = this._createAnalyser(audioContext);\n  var inputBufferLength = inputAnalyser.frequencyBinCount;\n  var inputDataArray = new Uint8Array(inputBufferLength);\n  this._inputAnalyser2 = this._createAnalyser(audioContext, {\n    minDecibels: -127,\n    maxDecibels: 0,\n    smoothingTimeConstant: 0\n  });\n\n  var outputAnalyser = this._outputAnalyser = this._createAnalyser(audioContext);\n  var outputBufferLength = outputAnalyser.frequencyBinCount;\n  var outputDataArray = new Uint8Array(outputBufferLength);\n  this._outputAnalyser2 = this._createAnalyser(audioContext, {\n    minDecibels: -127,\n    maxDecibels: 0,\n    smoothingTimeConstant: 0\n  });\n\n  this._updateInputStreamSource(this.stream);\n  this._updateOutputStreamSource(this._remoteStream);\n\n  var self = this;\n  setTimeout(function emitVolume() {\n    if (!self._audioContext) {\n      return;\n    } else if (self.status === 'closed') {\n      self._inputAnalyser.disconnect();\n      self._outputAnalyser.disconnect();\n      self._inputAnalyser2.disconnect();\n      self._outputAnalyser2.disconnect();\n      return;\n    }\n\n    self._inputAnalyser.getByteFrequencyData(inputDataArray);\n    var inputVolume = self.util.average(inputDataArray);\n\n    self._inputAnalyser2.getByteFrequencyData(inputDataArray);\n    var inputVolume2 = self.util.average(inputDataArray);\n\n    self._outputAnalyser.getByteFrequencyData(outputDataArray);\n    var outputVolume = self.util.average(outputDataArray);\n\n    self._outputAnalyser2.getByteFrequencyData(outputDataArray);\n    var outputVolume2 = self.util.average(outputDataArray);\n    self.onvolume(inputVolume / 255, outputVolume / 255, inputVolume2, outputVolume2);\n\n    setTimeout(emitVolume, VOLUME_INTERVAL_MS);\n  }, VOLUME_INTERVAL_MS);\n};\n\nPeerConnection.prototype._stopStream = function _stopStream(stream) {\n  // We shouldn't stop the tracks if they were not created inside\n  //   this PeerConnection.\n  if (!this._shouldManageStream) {\n    return;\n  }\n\n  if (typeof MediaStreamTrack.prototype.stop === 'function') {\n    var audioTracks = typeof stream.getAudioTracks === 'function' ? stream.getAudioTracks() : stream.audioTracks;\n    audioTracks.forEach(function (track) {\n      track.stop();\n    });\n  }\n  // NOTE(mroberts): This is just a fallback to any ancient browsers that may\n  // not implement MediaStreamTrack.stop.\n  else {\n      stream.stop();\n    }\n};\n\n/**\n * Update the stream source with the new input audio stream.\n * @param {MediaStream} stream\n * @private\n */\nPeerConnection.prototype._updateInputStreamSource = function (stream) {\n  if (this._inputStreamSource) {\n    this._inputStreamSource.disconnect();\n  }\n\n  this._inputStreamSource = this._audioContext.createMediaStreamSource(stream);\n  this._inputStreamSource.connect(this._inputAnalyser);\n  this._inputStreamSource.connect(this._inputAnalyser2);\n};\n\n/**\n * Update the stream source with the new ouput audio stream.\n * @param {MediaStream} stream\n * @private\n */\nPeerConnection.prototype._updateOutputStreamSource = function (stream) {\n  if (this._outputStreamSource) {\n    this._outputStreamSource.disconnect();\n  }\n\n  this._outputStreamSource = this._audioContext.createMediaStreamSource(stream);\n  this._outputStreamSource.connect(this._outputAnalyser);\n  this._outputStreamSource.connect(this._outputAnalyser2);\n};\n\n/**\n * Replace the tracks of the current stream with new tracks. We do this rather than replacing the\n *   whole stream because AnalyzerNodes are bound to a stream.\n * @param {Boolean} shouldClone - Whether the stream should be cloned if it is the first\n *   stream, or set directly. As a rule of thumb, streams that are passed in externally may have\n *   their lifecycle managed externally, and should be cloned so that we do not tear it or its tracks\n *   down when the call ends. Streams that we create internally (inside PeerConnection) should be set\n *   directly so that when the call ends it is disposed of.\n * @param {MediaStream} newStream - The new stream to copy the tracks over from.\n * @private\n */\nPeerConnection.prototype._setInputTracksFromStream = function (shouldClone, newStream) {\n  return this._isUnifiedPlan ? this._setInputTracksForUnifiedPlan(shouldClone, newStream) : this._setInputTracksForPlanB(shouldClone, newStream);\n};\n\n/**\n * Replace the tracks of the current stream with new tracks using the 'plan-b' method.\n * @param {Boolean} shouldClone - Whether the stream should be cloned if it is the first\n *   stream, or set directly. As a rule of thumb, streams that are passed in externally may have\n *   their lifecycle managed externally, and should be cloned so that we do not tear it or its tracks\n *   down when the call ends. Streams that we create internally (inside PeerConnection) should be set\n *   directly so that when the call ends it is disposed of.\n * @param {MediaStream} newStream - The new stream to copy the tracks over from.\n * @private\n */\nPeerConnection.prototype._setInputTracksForPlanB = function (shouldClone, newStream) {\n  var _this = this;\n\n  if (!newStream) {\n    return Promise.reject(new InvalidArgumentError('Can not set input stream to null while in a call'));\n  }\n\n  if (!newStream.getAudioTracks().length) {\n    return Promise.reject(new InvalidArgumentError('Supplied input stream has no audio tracks'));\n  }\n\n  var localStream = this.stream;\n\n  if (!localStream) {\n    // We can't use MediaStream.clone() here because it stopped copying over tracks\n    //   as of Chrome 61. https://bugs.chromium.org/p/chromium/issues/detail?id=770908\n    this.stream = shouldClone ? cloneStream(newStream) : newStream;\n  } else {\n    this._stopStream(localStream);\n\n    removeStream(this.version.pc, localStream);\n    localStream.getAudioTracks().forEach(localStream.removeTrack, localStream);\n    newStream.getAudioTracks().forEach(localStream.addTrack, localStream);\n    addStream(this.version.pc, newStream);\n\n    this._updateInputStreamSource(this.stream);\n  }\n\n  // Apply mute settings to new input track\n  this.mute(this.isMuted);\n\n  if (!this.version) {\n    return Promise.resolve(this.stream);\n  }\n\n  return new Promise(function (resolve, reject) {\n    _this.version.createOffer(_this.options.maxAverageBitrate, _this.codecPreferences, { audio: true }, function () {\n      _this.version.processAnswer(_this.codecPreferences, _this._answerSdp, function () {\n        resolve(_this.stream);\n      }, reject);\n    }, reject);\n  });\n};\n\n/**\n * Replace the tracks of the current stream with new tracks using the 'unified-plan' method.\n * @param {Boolean} shouldClone - Whether the stream should be cloned if it is the first\n *   stream, or set directly. As a rule of thumb, streams that are passed in externally may have\n *   their lifecycle managed externally, and should be cloned so that we do not tear it or its tracks\n *   down when the call ends. Streams that we create internally (inside PeerConnection) should be set\n *   directly so that when the call ends it is disposed of.\n * @param {MediaStream} newStream - The new stream to copy the tracks over from.\n * @private\n */\nPeerConnection.prototype._setInputTracksForUnifiedPlan = function (shouldClone, newStream) {\n  var _this2 = this;\n\n  if (!newStream) {\n    return Promise.reject(new InvalidArgumentError('Can not set input stream to null while in a call'));\n  }\n\n  if (!newStream.getAudioTracks().length) {\n    return Promise.reject(new InvalidArgumentError('Supplied input stream has no audio tracks'));\n  }\n\n  var localStream = this.stream;\n  var getStreamPromise = function getStreamPromise() {\n    // Apply mute settings to new input track\n    _this2.mute(_this2.isMuted);\n    return Promise.resolve(_this2.stream);\n  };\n\n  if (!localStream) {\n    // We can't use MediaStream.clone() here because it stopped copying over tracks\n    //   as of Chrome 61. https://bugs.chromium.org/p/chromium/issues/detail?id=770908\n    this.stream = shouldClone ? cloneStream(newStream) : newStream;\n  } else {\n    // If the call was started with gUM, and we are now replacing that track with an\n    // external stream's tracks, we should stop the old managed track.\n    if (this._shouldManageStream) {\n      this._stopStream(localStream);\n    }\n\n    if (!this._sender) {\n      this._sender = this.version.pc.getSenders()[0];\n    }\n\n    return this._sender.replaceTrack(newStream.getAudioTracks()[0]).then(function () {\n      _this2._updateInputStreamSource(newStream);\n      return getStreamPromise();\n    });\n  }\n\n  return getStreamPromise();\n};\n\nPeerConnection.prototype._onInputDevicesChanged = function () {\n  if (!this.stream) {\n    return;\n  }\n\n  // If all of our active tracks are ended, then our active input was lost\n  var activeInputWasLost = this.stream.getAudioTracks().every(function (track) {\n    return track.readyState === 'ended';\n  });\n\n  // We only want to act if we manage the stream in PeerConnection (It was created\n  // here, rather than passed in.)\n  if (activeInputWasLost && this._shouldManageStream) {\n    this.openWithConstraints(true);\n  }\n};\n\nPeerConnection.prototype._onIceGatheringFailure = function (type) {\n  this._hasIceGatheringFailures = true;\n  this.onicegatheringfailure(type);\n};\n\nPeerConnection.prototype._onMediaConnectionStateChange = function (newState) {\n  var previousState = this._iceState;\n\n  if (previousState === newState || newState !== 'connected' && newState !== 'disconnected' && newState !== 'failed') {\n    return;\n  }\n  this._iceState = newState;\n\n  var message = void 0;\n  switch (newState) {\n    case 'connected':\n      if (previousState === 'disconnected' || previousState === 'failed') {\n        message = 'ICE liveliness check succeeded. Connection with Twilio restored';\n        this._log.info(message);\n        this.onreconnected(message);\n      } else {\n        message = 'Media connection established.';\n        this._log.info(message);\n        this.onconnected(message);\n      }\n      this._stopIceGatheringTimeout();\n      this._hasIceGatheringFailures = false;\n      break;\n    case 'disconnected':\n      message = 'ICE liveliness check failed. May be having trouble connecting to Twilio';\n      this._log.info(message);\n      this.ondisconnected(message);\n      break;\n    case 'failed':\n      message = 'Connection with Twilio was interrupted.';\n      this._log.info(message);\n      this.onfailed(message);\n      break;\n  }\n};\n\nPeerConnection.prototype._setSinkIds = function (sinkIds) {\n  if (!this._isSinkSupported) {\n    return Promise.reject(new NotSupportedError('Audio output selection is not supported by this browser'));\n  }\n\n  this.sinkIds = new Set(sinkIds.forEach ? sinkIds : [sinkIds]);\n  return this.version ? this._updateAudioOutputs() : Promise.resolve();\n};\n\n/**\n * Start timeout for ICE Gathering\n */\nPeerConnection.prototype._startIceGatheringTimeout = function startIceGatheringTimeout() {\n  var _this3 = this;\n\n  this._stopIceGatheringTimeout();\n  this._iceGatheringTimeoutId = setTimeout(function () {\n    _this3._onIceGatheringFailure(ICE_GATHERING_FAIL_TIMEOUT);\n  }, ICE_GATHERING_TIMEOUT);\n};\n\n/**\n * Stop timeout for ICE Gathering\n */\nPeerConnection.prototype._stopIceGatheringTimeout = function stopIceGatheringTimeout() {\n  clearInterval(this._iceGatheringTimeoutId);\n};\n\nPeerConnection.prototype._updateAudioOutputs = function updateAudioOutputs() {\n  var addedOutputIds = Array.from(this.sinkIds).filter(function (id) {\n    return !this.outputs.has(id);\n  }, this);\n\n  var removedOutputIds = Array.from(this.outputs.keys()).filter(function (id) {\n    return !this.sinkIds.has(id);\n  }, this);\n\n  var self = this;\n  var createOutputPromises = addedOutputIds.map(this._createAudioOutput, this);\n  return Promise.all(createOutputPromises).then(function () {\n    return Promise.all(removedOutputIds.map(self._removeAudioOutput, self));\n  });\n};\n\nPeerConnection.prototype._createAudio = function createAudio(arr) {\n  return new Audio(arr);\n};\n\nPeerConnection.prototype._createAudioOutput = function createAudioOutput(id) {\n  var dest = this._audioContext.createMediaStreamDestination();\n  this._mediaStreamSource.connect(dest);\n\n  var audio = this._createAudio();\n  setAudioSource(audio, dest.stream);\n\n  var self = this;\n  return audio.setSinkId(id).then(function () {\n    return audio.play();\n  }).then(function () {\n    self.outputs.set(id, {\n      audio: audio,\n      dest: dest\n    });\n  });\n};\n\nPeerConnection.prototype._removeAudioOutputs = function removeAudioOutputs() {\n  if (this._masterAudio && typeof this._masterAudioDeviceId !== 'undefined') {\n    this._disableOutput(this, this._masterAudioDeviceId);\n    this.outputs.delete(this._masterAudioDeviceId);\n    this._masterAudioDeviceId = null;\n\n    // Release the audio resources before deleting the audio\n    if (!this._masterAudio.paused) {\n      this._masterAudio.pause();\n    }\n    if (typeof this._masterAudio.srcObject !== 'undefined') {\n      this._masterAudio.srcObject = null;\n    } else {\n      this._masterAudio.src = '';\n    }\n    this._masterAudio = null;\n  }\n\n  return Array.from(this.outputs.keys()).map(this._removeAudioOutput, this);\n};\n\nPeerConnection.prototype._disableOutput = function disableOutput(pc, id) {\n  var output = pc.outputs.get(id);\n  if (!output) {\n    return;\n  }\n\n  if (output.audio) {\n    output.audio.pause();\n    output.audio.src = '';\n  }\n\n  if (output.dest) {\n    output.dest.disconnect();\n  }\n};\n\n/**\n * Disable a non-master output, and update the master output to assume its state. This\n *   is called when the device ID assigned to the master output has been removed from\n *   active devices. We can not simply remove the master audio output, so we must\n *   instead reassign it.\n * @private\n * @param {PeerConnection} pc\n * @param {string} masterId - The current device ID assigned to the master audio element.\n */\nPeerConnection.prototype._reassignMasterOutput = function reassignMasterOutput(pc, masterId) {\n  var masterOutput = pc.outputs.get(masterId);\n  pc.outputs.delete(masterId);\n\n  var self = this;\n  var idToReplace = Array.from(pc.outputs.keys())[0] || 'default';\n  return masterOutput.audio.setSinkId(idToReplace).then(function () {\n    self._disableOutput(pc, idToReplace);\n\n    pc.outputs.set(idToReplace, masterOutput);\n    pc._masterAudioDeviceId = idToReplace;\n  }).catch(function rollback() {\n    pc.outputs.set(masterId, masterOutput);\n    self._log.info('Could not reassign master output. Attempted to roll back.');\n  });\n};\n\nPeerConnection.prototype._removeAudioOutput = function removeAudioOutput(id) {\n  if (this._masterAudioDeviceId === id) {\n    return this._reassignMasterOutput(this, id);\n  }\n\n  this._disableOutput(this, id);\n  this.outputs.delete(id);\n\n  return Promise.resolve();\n};\n\n/**\n * Use an AudioContext to potentially split our audio output stream to multiple\n *   audio devices. This is only available to browsers with AudioContext and\n *   HTMLAudioElement.setSinkId() available. We save the source stream in\n *   _masterAudio, and use it for one of the active audio devices. We keep\n *   track of its ID because we must replace it if we lose its initial device.\n */\nPeerConnection.prototype._onAddTrack = function onAddTrack(pc, stream) {\n  var audio = pc._masterAudio = this._createAudio();\n  setAudioSource(audio, stream);\n  audio.play();\n\n  // Assign the initial master audio element to a random active output device\n  var deviceId = Array.from(pc.outputs.keys())[0] || 'default';\n  pc._masterAudioDeviceId = deviceId;\n  pc.outputs.set(deviceId, {\n    audio: audio\n  });\n\n  pc._mediaStreamSource = pc._audioContext.createMediaStreamSource(stream);\n\n  pc.pcStream = stream;\n  pc._updateAudioOutputs();\n};\n\n/**\n * Use a single audio element to play the audio output stream. This does not\n *   support multiple output devices, and is a fallback for when AudioContext\n *   and/or HTMLAudioElement.setSinkId() is not available to the client.\n */\nPeerConnection.prototype._fallbackOnAddTrack = function fallbackOnAddTrack(pc, stream) {\n  var audio = document && document.createElement('audio');\n  audio.autoplay = true;\n\n  if (!setAudioSource(audio, stream)) {\n    pc._log.info('Error attaching stream to element.');\n  }\n\n  pc.outputs.set('default', {\n    audio: audio\n  });\n};\n\nPeerConnection.prototype._setEncodingParameters = function (enableDscp) {\n  if (!enableDscp || !this._sender || typeof this._sender.getParameters !== 'function' || typeof this._sender.setParameters !== 'function') {\n    return;\n  }\n\n  var params = this._sender.getParameters();\n  if (!params.priority && !(params.encodings && params.encodings.length)) {\n    return;\n  }\n\n  // This is how MDN's RTPSenderParameters defines priority\n  params.priority = 'high';\n\n  // And this is how it's currently implemented in Chrome M72+\n  if (params.encodings && params.encodings.length) {\n    params.encodings.forEach(function (encoding) {\n      encoding.priority = 'high';\n      encoding.networkPriority = 'high';\n    });\n  }\n\n  this._sender.setParameters(params);\n};\n\nPeerConnection.prototype._setupPeerConnection = function (rtcConstraints, rtcConfiguration) {\n  var _this4 = this;\n\n  var self = this;\n  var version = new (this.options.rtcpcFactory || RTCPC)();\n  version.create(rtcConstraints, rtcConfiguration);\n  addStream(version.pc, this.stream);\n\n  var eventName = 'ontrack' in version.pc ? 'ontrack' : 'onaddstream';\n\n  version.pc[eventName] = function (event) {\n    var stream = self._remoteStream = event.stream || event.streams[0];\n\n    if (typeof version.pc.getSenders === 'function') {\n      _this4._sender = version.pc.getSenders()[0];\n    }\n\n    if (self._isSinkSupported) {\n      self._onAddTrack(self, stream);\n    } else {\n      self._fallbackOnAddTrack(self, stream);\n    }\n\n    self._startPollingVolume();\n  };\n  return version;\n};\n\nPeerConnection.prototype._maybeSetIceAggressiveNomination = function (sdp) {\n  return this.options.forceAggressiveIceNomination ? setIceAggressiveNomination(sdp) : sdp;\n};\n\nPeerConnection.prototype._setupChannel = function () {\n  var _this5 = this;\n\n  var pc = this.version.pc;\n\n  // Chrome 25 supports onopen\n  this.version.pc.onopen = function () {\n    _this5.status = 'open';\n    _this5.onopen();\n  };\n\n  // Chrome 26 doesn't support onopen so must detect state change\n  this.version.pc.onstatechange = function () {\n    if (_this5.version.pc && _this5.version.pc.readyState === 'stable') {\n      _this5.status = 'open';\n      _this5.onopen();\n    }\n  };\n\n  // Chrome 27 changed onstatechange to onsignalingstatechange\n  this.version.pc.onsignalingstatechange = function () {\n    var state = pc.signalingState;\n    _this5._log.info('signalingState is \"' + state + '\"');\n\n    if (_this5.version.pc && _this5.version.pc.signalingState === 'stable') {\n      _this5.status = 'open';\n      _this5.onopen();\n    }\n\n    _this5.onsignalingstatechange(pc.signalingState);\n  };\n\n  // Chrome 72+\n  pc.onconnectionstatechange = function () {\n    _this5._log.info('pc.connectionState is \"' + pc.connectionState + '\"');\n    _this5.onpcconnectionstatechange(pc.connectionState);\n    _this5._onMediaConnectionStateChange(pc.connectionState);\n  };\n\n  pc.onicecandidate = function (event) {\n    var candidate = event.candidate;\n\n    if (candidate) {\n      _this5._hasIceCandidates = true;\n      _this5.onicecandidate(candidate);\n      _this5._setupRTCIceTransportListener();\n    }\n\n    _this5._log.info('ICE Candidate: ' + JSON.stringify(candidate));\n  };\n\n  pc.onicegatheringstatechange = function () {\n    var state = pc.iceGatheringState;\n    if (state === 'gathering') {\n      _this5._startIceGatheringTimeout();\n    } else if (state === 'complete') {\n      _this5._stopIceGatheringTimeout();\n\n      // Fail if no candidates found\n      if (!_this5._hasIceCandidates) {\n        _this5._onIceGatheringFailure(ICE_GATHERING_FAIL_NONE);\n      }\n\n      // There was a failure mid-gathering phase. We want to start our timer and issue\n      // an ice restart if we don't get connected after our timeout\n      if (_this5._hasIceCandidates && _this5._hasIceGatheringFailures) {\n        _this5._startIceGatheringTimeout();\n      }\n    }\n\n    _this5._log.info('pc.iceGatheringState is \"' + pc.iceGatheringState + '\"');\n    _this5.onicegatheringstatechange(state);\n  };\n\n  pc.oniceconnectionstatechange = function () {\n    _this5._log.info('pc.iceConnectionState is \"' + pc.iceConnectionState + '\"');\n    _this5.oniceconnectionstatechange(pc.iceConnectionState);\n    _this5._onMediaConnectionStateChange(pc.iceConnectionState);\n  };\n};\nPeerConnection.prototype._initializeMediaStream = function (rtcConstraints, rtcConfiguration) {\n  // if mediastream already open then do nothing\n  if (this.status === 'open') {\n    return false;\n  }\n  if (this.pstream.status === 'disconnected') {\n    this.onerror({ info: {\n        code: 31000,\n        message: 'Cannot establish connection. Client is disconnected',\n        twilioError: new SignalingErrors.ConnectionDisconnected()\n      } });\n    this.close();\n    return false;\n  }\n  this.version = this._setupPeerConnection(rtcConstraints, rtcConfiguration);\n  this._setupChannel();\n  return true;\n};\n\n/**\n * Remove reconnection-related listeners\n * @private\n */\nPeerConnection.prototype._removeReconnectionListeners = function () {\n  if (this.pstream) {\n    this.pstream.removeListener('answer', this._onAnswerOrRinging);\n    this.pstream.removeListener('hangup', this._onHangup);\n  }\n};\n\n/**\n * Setup a listener for RTCDtlsTransport to capture state changes events\n * @private\n */\nPeerConnection.prototype._setupRTCDtlsTransportListener = function () {\n  var _this6 = this;\n\n  var dtlsTransport = this.getRTCDtlsTransport();\n\n  if (!dtlsTransport || dtlsTransport.onstatechange) {\n    return;\n  }\n\n  var handler = function handler() {\n    _this6._log.info('dtlsTransportState is \"' + dtlsTransport.state + '\"');\n    _this6.ondtlstransportstatechange(dtlsTransport.state);\n  };\n\n  // Publish initial state\n  handler();\n  dtlsTransport.onstatechange = handler;\n};\n\n/**\n * Setup a listener for RTCIceTransport to capture selected candidate pair changes\n * @private\n */\nPeerConnection.prototype._setupRTCIceTransportListener = function () {\n  var _this7 = this;\n\n  var iceTransport = this._getRTCIceTransport();\n\n  if (!iceTransport || iceTransport.onselectedcandidatepairchange) {\n    return;\n  }\n\n  iceTransport.onselectedcandidatepairchange = function () {\n    return _this7.onselectedcandidatepairchange(iceTransport.getSelectedCandidatePair());\n  };\n};\n\n/**\n * Restarts ICE for the current connection\n * ICE Restart failures are ignored. Retries are managed in Connection\n * @private\n */\nPeerConnection.prototype.iceRestart = function () {\n  var _this8 = this;\n\n  if (!this.options.enableIceRestart) {\n    return;\n  }\n  this._log.info('Attempting to restart ICE...');\n  this._hasIceCandidates = false;\n  this.version.createOffer(this.options.maxAverageBitrate, this.codecPreferences, { iceRestart: true }).then(function () {\n    _this8._removeReconnectionListeners();\n\n    _this8._onAnswerOrRinging = function (payload) {\n      _this8._removeReconnectionListeners();\n\n      if (!payload.sdp || _this8.version.pc.signalingState !== 'have-local-offer') {\n        var message = 'Invalid state or param during ICE Restart:' + ('hasSdp:' + !!payload.sdp + ', signalingState:' + _this8.version.pc.signalingState);\n        _this8._log.info(message);\n        return;\n      }\n\n      var sdp = _this8._maybeSetIceAggressiveNomination(payload.sdp);\n      _this8._answerSdp = sdp;\n      if (_this8.status !== 'closed') {\n        _this8.version.processAnswer(_this8.codecPreferences, sdp, null, function (err) {\n          var message = err && err.message ? err.message : err;\n          _this8._log.info('Failed to process answer during ICE Restart. Error: ' + message);\n        });\n      }\n    };\n\n    _this8._onHangup = function () {\n      _this8._log.info('Received hangup during ICE Restart');\n      _this8._removeReconnectionListeners();\n    };\n\n    _this8.pstream.on('answer', _this8._onAnswerOrRinging);\n    _this8.pstream.on('hangup', _this8._onHangup);\n    _this8.pstream.reinvite(_this8.version.getSDP(), _this8.callSid);\n  }).catch(function (err) {\n    var message = err && err.message ? err.message : err;\n    _this8._log.info('Failed to createOffer during ICE Restart. Error: ' + message);\n    // CreateOffer failures doesn't transition ice state to failed\n    // We need trigger it so it can be picked up by retries\n    _this8.onfailed(message);\n  });\n};\n\nPeerConnection.prototype.makeOutgoingCall = function (token, params, callsid, rtcConstraints, rtcConfiguration, onMediaStarted) {\n  var _this9 = this;\n\n  if (!this._initializeMediaStream(rtcConstraints, rtcConfiguration)) {\n    return;\n  }\n\n  var self = this;\n  this.callSid = callsid;\n  function onAnswerSuccess() {\n    if (self.options) {\n      self._setEncodingParameters(self.options.dscp);\n    }\n    onMediaStarted(self.version.pc);\n  }\n  function onAnswerError(err) {\n    var errMsg = err.message || err;\n    self.onerror({ info: {\n        code: 31000,\n        message: 'Error processing answer: ' + errMsg,\n        twilioError: new MediaErrors.ClientRemoteDescFailed()\n      } });\n  }\n  this._onAnswerOrRinging = function (payload) {\n    if (!payload.sdp) {\n      return;\n    }\n\n    var sdp = _this9._maybeSetIceAggressiveNomination(payload.sdp);\n    self._answerSdp = sdp;\n    if (self.status !== 'closed') {\n      self.version.processAnswer(_this9.codecPreferences, sdp, onAnswerSuccess, onAnswerError);\n    }\n    self.pstream.removeListener('answer', self._onAnswerOrRinging);\n    self.pstream.removeListener('ringing', self._onAnswerOrRinging);\n  };\n  this.pstream.on('answer', this._onAnswerOrRinging);\n  this.pstream.on('ringing', this._onAnswerOrRinging);\n\n  function onOfferSuccess() {\n    if (self.status !== 'closed') {\n      self.pstream.invite(self.version.getSDP(), self.callSid, self.options.preflight, params);\n      self._setupRTCDtlsTransportListener();\n    }\n  }\n\n  function onOfferError(err) {\n    var errMsg = err.message || err;\n    self.onerror({ info: {\n        code: 31000,\n        message: 'Error creating the offer: ' + errMsg,\n        twilioError: new MediaErrors.ClientLocalDescFailed()\n      } });\n  }\n\n  this.version.createOffer(this.options.maxAverageBitrate, this.codecPreferences, { audio: true }, onOfferSuccess, onOfferError);\n};\nPeerConnection.prototype.answerIncomingCall = function (callSid, sdp, rtcConstraints, rtcConfiguration, onMediaStarted) {\n  if (!this._initializeMediaStream(rtcConstraints, rtcConfiguration)) {\n    return;\n  }\n  sdp = this._maybeSetIceAggressiveNomination(sdp);\n  this._answerSdp = sdp.replace(/^a=setup:actpass$/gm, 'a=setup:passive');\n  this.callSid = callSid;\n  var self = this;\n  function onAnswerSuccess() {\n    if (self.status !== 'closed') {\n      self.pstream.answer(self.version.getSDP(), callSid);\n      if (self.options) {\n        self._setEncodingParameters(self.options.dscp);\n      }\n      onMediaStarted(self.version.pc);\n      self._setupRTCDtlsTransportListener();\n    }\n  }\n  function onAnswerError(err) {\n    var errMsg = err.message || err;\n    self.onerror({ info: {\n        code: 31000,\n        message: 'Error creating the answer: ' + errMsg,\n        twilioError: new MediaErrors.ClientRemoteDescFailed()\n      } });\n  }\n  this.version.processSDP(this.options.maxAverageBitrate, this.codecPreferences, sdp, { audio: true }, onAnswerSuccess, onAnswerError);\n};\nPeerConnection.prototype.close = function () {\n  if (this.version && this.version.pc) {\n    if (this.version.pc.signalingState !== 'closed') {\n      this.version.pc.close();\n    }\n\n    this.version.pc = null;\n  }\n  if (this.stream) {\n    this.mute(false);\n    this._stopStream(this.stream);\n  }\n  this.stream = null;\n  this._removeReconnectionListeners();\n  this._stopIceGatheringTimeout();\n\n  Promise.all(this._removeAudioOutputs()).catch(function () {\n    // We don't need to alert about failures here.\n  });\n  if (this._mediaStreamSource) {\n    this._mediaStreamSource.disconnect();\n  }\n  if (this._inputAnalyser) {\n    this._inputAnalyser.disconnect();\n  }\n  if (this._outputAnalyser) {\n    this._outputAnalyser.disconnect();\n  }\n  if (this._inputAnalyser2) {\n    this._inputAnalyser2.disconnect();\n  }\n  if (this._outputAnalyser2) {\n    this._outputAnalyser2.disconnect();\n  }\n  this.status = 'closed';\n  this.onclose();\n};\nPeerConnection.prototype.reject = function (callSid) {\n  this.callSid = callSid;\n};\nPeerConnection.prototype.ignore = function (callSid) {\n  this.callSid = callSid;\n};\n/**\n * Mute or unmute input audio. If the stream is not yet present, the setting\n *   is saved and applied to future streams/tracks.\n * @params {boolean} shouldMute - Whether the input audio should\n *   be muted or unmuted.\n */\nPeerConnection.prototype.mute = function (shouldMute) {\n  this.isMuted = shouldMute;\n  if (!this.stream) {\n    return;\n  }\n\n  if (this._sender && this._sender.track) {\n    this._sender.track.enabled = !shouldMute;\n  } else {\n    var audioTracks = typeof this.stream.getAudioTracks === 'function' ? this.stream.getAudioTracks() : this.stream.audioTracks;\n\n    audioTracks.forEach(function (track) {\n      track.enabled = !shouldMute;\n    });\n  }\n};\n/**\n * Get or create an RTCDTMFSender for the first local audio MediaStreamTrack\n * we can get from the RTCPeerConnection. Return null if unsupported.\n * @instance\n * @returns ?RTCDTMFSender\n */\nPeerConnection.prototype.getOrCreateDTMFSender = function getOrCreateDTMFSender() {\n  if (this._dtmfSender || this._dtmfSenderUnsupported) {\n    return this._dtmfSender || null;\n  }\n\n  var self = this;\n  var pc = this.version.pc;\n  if (!pc) {\n    this._log.info('No RTCPeerConnection available to call createDTMFSender on');\n    return null;\n  }\n\n  if (typeof pc.getSenders === 'function' && (typeof RTCDTMFSender === 'function' || typeof RTCDtmfSender === 'function')) {\n    var chosenSender = pc.getSenders().find(function (sender) {\n      return sender.dtmf;\n    });\n    if (chosenSender) {\n      this._log.info('Using RTCRtpSender#dtmf');\n      this._dtmfSender = chosenSender.dtmf;\n      return this._dtmfSender;\n    }\n  }\n\n  if (typeof pc.createDTMFSender === 'function' && typeof pc.getLocalStreams === 'function') {\n    var track = pc.getLocalStreams().map(function (stream) {\n      var tracks = self._getAudioTracks(stream);\n      return tracks && tracks[0];\n    })[0];\n\n    if (!track) {\n      this._log.info('No local audio MediaStreamTrack available on the RTCPeerConnection to pass to createDTMFSender');\n      return null;\n    }\n\n    this._log.info('Creating RTCDTMFSender');\n    this._dtmfSender = pc.createDTMFSender(track);\n    return this._dtmfSender;\n  }\n\n  this._log.info('RTCPeerConnection does not support RTCDTMFSender');\n  this._dtmfSenderUnsupported = true;\n  return null;\n};\n\n/**\n * Get the RTCDtlTransport object from the PeerConnection\n * @returns RTCDtlTransport\n */\nPeerConnection.prototype.getRTCDtlsTransport = function getRTCDtlsTransport() {\n  var sender = this.version && this.version.pc && typeof this.version.pc.getSenders === 'function' && this.version.pc.getSenders()[0];\n  return sender && sender.transport || null;\n};\n\nPeerConnection.prototype._canStopMediaStreamTrack = function () {\n  return typeof MediaStreamTrack.prototype.stop === 'function';\n};\n\nPeerConnection.prototype._getAudioTracks = function (stream) {\n  return typeof stream.getAudioTracks === 'function' ? stream.getAudioTracks() : stream.audioTracks;\n};\n\n/**\n * Get the RTCIceTransport object from the PeerConnection\n * @returns RTCIceTransport\n */\nPeerConnection.prototype._getRTCIceTransport = function _getRTCIceTransport() {\n  var dtlsTransport = this.getRTCDtlsTransport();\n  return dtlsTransport && dtlsTransport.iceTransport || null;\n};\n\n// Is PeerConnection.protocol used outside of our SDK? We should remove this if not.\nPeerConnection.protocol = function () {\n  return RTCPC.test() ? new RTCPC() : null;\n}();\n\nfunction addStream(pc, stream) {\n  if (typeof pc.addTrack === 'function') {\n    stream.getAudioTracks().forEach(function (track) {\n      // The second parameters, stream, should not be necessary per the latest editor's\n      //   draft, but FF requires it. https://bugzilla.mozilla.org/show_bug.cgi?id=1231414\n      pc.addTrack(track, stream);\n    });\n  } else {\n    pc.addStream(stream);\n  }\n}\n\nfunction cloneStream(oldStream) {\n  var newStream = typeof MediaStream !== 'undefined' ? new MediaStream()\n  // eslint-disable-next-line\n  : new webkitMediaStream();\n\n  oldStream.getAudioTracks().forEach(newStream.addTrack, newStream);\n  return newStream;\n}\n\nfunction removeStream(pc, stream) {\n  if (typeof pc.removeTrack === 'function') {\n    pc.getSenders().forEach(function (sender) {\n      pc.removeTrack(sender);\n    });\n  } else {\n    pc.removeStream(stream);\n  }\n}\n\n/**\n * Set the source of an HTMLAudioElement to the specified MediaStream\n * @param {HTMLAudioElement} audio\n * @param {MediaStream} stream\n * @returns {boolean} Whether the audio source was set successfully\n */\nfunction setAudioSource(audio, stream) {\n  if (typeof audio.srcObject !== 'undefined') {\n    audio.srcObject = stream;\n  } else if (typeof audio.mozSrcObject !== 'undefined') {\n    audio.mozSrcObject = stream;\n  } else if (typeof audio.src !== 'undefined') {\n    var _window = audio.options.window || window;\n    audio.src = (_window.URL || _window.webkitURL).createObjectURL(stream);\n  } else {\n    return false;\n  }\n\n  return true;\n}\n\nPeerConnection.enabled = RTCPC.test();\n\nmodule.exports = PeerConnection;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/rtc/peerconnection.js\n")},"./node_modules/twilio-client/es5/twilio/rtc/rtcpc.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/* global webkitRTCPeerConnection, mozRTCPeerConnection, mozRTCSessionDescription, mozRTCIceCandidate */\nvar RTCPeerConnectionShim = __webpack_require__(/*! rtcpeerconnection-shim */ \"./node_modules/rtcpeerconnection-shim/rtcpeerconnection.js\");\nvar Log = __webpack_require__(/*! ../log */ \"./node_modules/twilio-client/es5/twilio/log.js\").default;\n\nvar _require = __webpack_require__(/*! ./sdp */ \"./node_modules/twilio-client/es5/twilio/rtc/sdp.js\"),\n    setCodecPreferences = _require.setCodecPreferences,\n    setMaxAverageBitrate = _require.setMaxAverageBitrate;\n\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/twilio-client/es5/twilio/util.js\");\n\nfunction RTCPC() {\n  if (typeof window === 'undefined') {\n    this.log.info('No RTCPeerConnection implementation available. The window object was not found.');\n    return;\n  }\n\n  if (util.isLegacyEdge()) {\n    this.RTCPeerConnection = new RTCPeerConnectionShim(typeof window !== 'undefined' ? window : __webpack_require__.g);\n  } else if (typeof window.RTCPeerConnection === 'function') {\n    this.RTCPeerConnection = window.RTCPeerConnection;\n  } else if (typeof window.webkitRTCPeerConnection === 'function') {\n    this.RTCPeerConnection = webkitRTCPeerConnection;\n  } else if (typeof window.mozRTCPeerConnection === 'function') {\n    this.RTCPeerConnection = mozRTCPeerConnection;\n    window.RTCSessionDescription = mozRTCSessionDescription;\n    window.RTCIceCandidate = mozRTCIceCandidate;\n  } else {\n    this.log.info('No RTCPeerConnection implementation available');\n  }\n}\n\nRTCPC.prototype.create = function (rtcConstraints, rtcConfiguration) {\n  this.log = Log.getInstance();\n  this.pc = new this.RTCPeerConnection(rtcConfiguration, rtcConstraints);\n};\nRTCPC.prototype.createModernConstraints = function (c) {\n  // createOffer differs between Chrome 23 and Chrome 24+.\n  // See https://groups.google.com/forum/?fromgroups=#!topic/discuss-webrtc/JBDZtrMumyU\n  // Unfortunately I haven't figured out a way to detect which format\n  // is required ahead of time, so we'll first try the old way, and\n  // if we get an exception, then we'll try the new way.\n  if (typeof c === 'undefined') {\n    return null;\n  }\n  // NOTE(mroberts): As of Chrome 38, Chrome still appears to expect\n  // constraints under the 'mandatory' key, and with the first letter of each\n  // constraint capitalized. Firefox, on the other hand, has deprecated the\n  // 'mandatory' key and does not expect the first letter of each constraint\n  // capitalized.\n  var nc = Object.assign({}, c);\n  if (typeof webkitRTCPeerConnection !== 'undefined' && !util.isLegacyEdge()) {\n    nc.mandatory = {};\n    if (typeof c.audio !== 'undefined') {\n      nc.mandatory.OfferToReceiveAudio = c.audio;\n    }\n    if (typeof c.video !== 'undefined') {\n      nc.mandatory.OfferToReceiveVideo = c.video;\n    }\n  } else {\n    if (typeof c.audio !== 'undefined') {\n      nc.offerToReceiveAudio = c.audio;\n    }\n    if (typeof c.video !== 'undefined') {\n      nc.offerToReceiveVideo = c.video;\n    }\n  }\n\n  delete nc.audio;\n  delete nc.video;\n\n  return nc;\n};\nRTCPC.prototype.createOffer = function (maxAverageBitrate, codecPreferences, constraints, onSuccess, onError) {\n  var _this = this;\n\n  constraints = this.createModernConstraints(constraints);\n  return promisifyCreate(this.pc.createOffer, this.pc)(constraints).then(function (offer) {\n    if (!_this.pc) {\n      return Promise.resolve();\n    }\n\n    var sdp = setMaxAverageBitrate(offer.sdp, maxAverageBitrate);\n\n    return promisifySet(_this.pc.setLocalDescription, _this.pc)(new RTCSessionDescription({\n      type: 'offer',\n      sdp: setCodecPreferences(sdp, codecPreferences)\n    }));\n  }).then(onSuccess, onError);\n};\nRTCPC.prototype.createAnswer = function (maxAverageBitrate, codecPreferences, constraints, onSuccess, onError) {\n  var _this2 = this;\n\n  constraints = this.createModernConstraints(constraints);\n  return promisifyCreate(this.pc.createAnswer, this.pc)(constraints).then(function (answer) {\n    if (!_this2.pc) {\n      return Promise.resolve();\n    }\n    var sdp = setMaxAverageBitrate(answer.sdp, maxAverageBitrate);\n\n    return promisifySet(_this2.pc.setLocalDescription, _this2.pc)(new RTCSessionDescription({\n      type: 'answer',\n      sdp: setCodecPreferences(sdp, codecPreferences)\n    }));\n  }).then(onSuccess, onError);\n};\nRTCPC.prototype.processSDP = function (maxAverageBitrate, codecPreferences, sdp, constraints, onSuccess, onError) {\n  var _this3 = this;\n\n  sdp = setCodecPreferences(sdp, codecPreferences);\n  var desc = new RTCSessionDescription({ sdp: sdp, type: 'offer' });\n  return promisifySet(this.pc.setRemoteDescription, this.pc)(desc).then(function () {\n    _this3.createAnswer(maxAverageBitrate, codecPreferences, constraints, onSuccess, onError);\n  });\n};\nRTCPC.prototype.getSDP = function () {\n  return this.pc.localDescription.sdp;\n};\nRTCPC.prototype.processAnswer = function (codecPreferences, sdp, onSuccess, onError) {\n  if (!this.pc) {\n    return Promise.resolve();\n  }\n  sdp = setCodecPreferences(sdp, codecPreferences);\n\n  return promisifySet(this.pc.setRemoteDescription, this.pc)(new RTCSessionDescription({ sdp: sdp, type: 'answer' })).then(onSuccess, onError);\n};\n/* NOTE(mroberts): Firefox 18 through 21 include a `mozRTCPeerConnection`\n   object, but attempting to instantiate it will throw the error\n\n       Error: PeerConnection not enabled (did you set the pref?)\n\n   unless the `media.peerconnection.enabled` pref is enabled. So we need to test\n   if we can actually instantiate `mozRTCPeerConnection`; however, if the user\n   *has* enabled `media.peerconnection.enabled`, we need to perform the same\n   test that we use to detect Firefox 24 and above, namely:\n\n       typeof (new mozRTCPeerConnection()).getLocalStreams === 'function'\n\n\n    NOTE(rrowland): We no longer support Legacy Edge as of Sep 1, 2020.\n*/\nRTCPC.test = function () {\n  if ((typeof navigator === 'undefined' ? 'undefined' : _typeof(navigator)) === 'object') {\n    var getUserMedia = navigator.mediaDevices && navigator.mediaDevices.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.getUserMedia;\n\n    if (util.isLegacyEdge(navigator)) {\n      return false;\n    }\n\n    if (getUserMedia && typeof window.RTCPeerConnection === 'function') {\n      return true;\n    } else if (getUserMedia && typeof window.webkitRTCPeerConnection === 'function') {\n      return true;\n    } else if (getUserMedia && typeof window.mozRTCPeerConnection === 'function') {\n      try {\n        // eslint-disable-next-line babel/new-cap\n        var test = new window.mozRTCPeerConnection();\n        if (typeof test.getLocalStreams !== 'function') return false;\n      } catch (e) {\n        return false;\n      }\n      return true;\n    } else if (typeof RTCIceGatherer !== 'undefined') {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nfunction promisify(fn, ctx, areCallbacksFirst) {\n  return function () {\n    var args = Array.prototype.slice.call(arguments);\n\n    return new Promise(function (resolve) {\n      resolve(fn.apply(ctx, args));\n    }).catch(function () {\n      return new Promise(function (resolve, reject) {\n        fn.apply(ctx, areCallbacksFirst ? [resolve, reject].concat(args) : args.concat([resolve, reject]));\n      });\n    });\n  };\n}\n\nfunction promisifyCreate(fn, ctx) {\n  return promisify(fn, ctx, true);\n}\n\nfunction promisifySet(fn, ctx) {\n  return promisify(fn, ctx, false);\n}\n\nmodule.exports = RTCPC;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/rtc/rtcpc.js\n")},"./node_modules/twilio-client/es5/twilio/rtc/sdp.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar util = __webpack_require__(/*! ../util */ \"./node_modules/twilio-client/es5/twilio/util.js\");\n\nvar ptToFixedBitrateAudioCodecName = {\n  0: 'PCMU',\n  8: 'PCMA'\n};\n\nvar defaultOpusId = 111;\nvar BITRATE_MAX = 510000;\nvar BITRATE_MIN = 6000;\n\nfunction getPreferredCodecInfo(sdp) {\n  var _ref = /a=rtpmap:(\\d+) (\\S+)/m.exec(sdp) || [null, '', ''],\n      _ref2 = _slicedToArray(_ref, 3),\n      codecId = _ref2[1],\n      codecName = _ref2[2];\n\n  var regex = new RegExp('a=fmtp:' + codecId + ' (\\\\S+)', 'm');\n\n  var _ref3 = regex.exec(sdp) || [null, ''],\n      _ref4 = _slicedToArray(_ref3, 2),\n      codecParams = _ref4[1];\n\n  return { codecName: codecName, codecParams: codecParams };\n}\n\nfunction setIceAggressiveNomination(sdp) {\n  // This only works on Chrome. We don't want any side effects on other browsers\n  // https://bugs.chromium.org/p/chromium/issues/detail?id=1024096\n  // https://issues.corp.twilio.com/browse/CLIENT-6911\n  if (!util.isChrome(window, window.navigator)) {\n    return sdp;\n  }\n\n  return sdp.split('\\n').filter(function (line) {\n    return line.indexOf('a=ice-lite') === -1;\n  }).join('\\n');\n}\n\nfunction setMaxAverageBitrate(sdp, maxAverageBitrate) {\n  if (typeof maxAverageBitrate !== 'number' || maxAverageBitrate < BITRATE_MIN || maxAverageBitrate > BITRATE_MAX) {\n    return sdp;\n  }\n\n  var matches = /a=rtpmap:(\\d+) opus/m.exec(sdp);\n  var opusId = matches && matches.length ? matches[1] : defaultOpusId;\n  var regex = new RegExp('a=fmtp:' + opusId);\n  var lines = sdp.split('\\n').map(function (line) {\n    return regex.test(line) ? line + (';maxaveragebitrate=' + maxAverageBitrate) : line;\n  });\n\n  return lines.join('\\n');\n}\n\n/**\n * Return a new SDP string with the re-ordered codec preferences.\n * @param {string} sdp\n * @param {Array<AudioCodec>} preferredCodecs - If empty, the existing order\n *   of audio codecs is preserved\n * @returns {string} Updated SDP string\n */\nfunction setCodecPreferences(sdp, preferredCodecs) {\n  var mediaSections = getMediaSections(sdp);\n  var session = sdp.split('\\r\\nm=')[0];\n  return [session].concat(mediaSections.map(function (section) {\n    // Codec preferences should not be applied to m=application sections.\n    if (!/^m=(audio|video)/.test(section)) {\n      return section;\n    }\n    var kind = section.match(/^m=(audio|video)/)[1];\n    var codecMap = createCodecMapForMediaSection(section);\n    var payloadTypes = getReorderedPayloadTypes(codecMap, preferredCodecs);\n    var newSection = setPayloadTypesInMediaSection(payloadTypes, section);\n\n    var pcmaPayloadTypes = codecMap.get('pcma') || [];\n    var pcmuPayloadTypes = codecMap.get('pcmu') || [];\n    var fixedBitratePayloadTypes = kind === 'audio' ? new Set(pcmaPayloadTypes.concat(pcmuPayloadTypes)) : new Set();\n\n    return fixedBitratePayloadTypes.has(payloadTypes[0]) ? newSection.replace(/\\r\\nb=(AS|TIAS):([0-9]+)/g, '') : newSection;\n  })).join('\\r\\n');\n}\n\n/**\n * Get the m= sections of a particular kind and direction from an sdp.\n * @param {string} sdp - SDP string\n * @param {string} [kind] - Pattern for matching kind\n * @param {string} [direction] - Pattern for matching direction\n * @returns {Array<string>} mediaSections\n */\nfunction getMediaSections(sdp, kind, direction) {\n  return sdp.replace(/\\r\\n\\r\\n$/, '\\r\\n').split('\\r\\nm=').slice(1).map(function (mediaSection) {\n    return 'm=' + mediaSection;\n  }).filter(function (mediaSection) {\n    var kindPattern = new RegExp('m=' + (kind || '.*'), 'gm');\n    var directionPattern = new RegExp('a=' + (direction || '.*'), 'gm');\n    return kindPattern.test(mediaSection) && directionPattern.test(mediaSection);\n  });\n}\n\n/**\n * Create a Codec Map for the given m= section.\n * @param {string} section - The given m= section\n * @returns {Map<Codec, Array<PT>>}\n */\nfunction createCodecMapForMediaSection(section) {\n  return Array.from(createPtToCodecName(section)).reduce(function (codecMap, pair) {\n    var pt = pair[0];\n    var codecName = pair[1];\n    var pts = codecMap.get(codecName) || [];\n    return codecMap.set(codecName, pts.concat(pt));\n  }, new Map());\n}\n\n/**\n * Create the reordered Codec Payload Types based on the preferred Codec Names.\n * @param {Map<Codec, Array<PT>>} codecMap - Codec Map\n * @param {Array<Codec>} preferredCodecs - Preferred Codec Names\n * @returns {Array<PT>} Reordered Payload Types\n */\nfunction getReorderedPayloadTypes(codecMap, preferredCodecs) {\n  preferredCodecs = preferredCodecs.map(function (codecName) {\n    return codecName.toLowerCase();\n  });\n\n  var preferredPayloadTypes = util.flatMap(preferredCodecs, function (codecName) {\n    return codecMap.get(codecName) || [];\n  });\n\n  var remainingCodecs = util.difference(Array.from(codecMap.keys()), preferredCodecs);\n  var remainingPayloadTypes = util.flatMap(remainingCodecs, function (codecName) {\n    return codecMap.get(codecName);\n  });\n\n  return preferredPayloadTypes.concat(remainingPayloadTypes);\n}\n\n/**\n * Set the given Codec Payload Types in the first line of the given m= section.\n * @param {Array<PT>} payloadTypes - Payload Types\n * @param {string} section - Given m= section\n * @returns {string} - Updated m= section\n */\nfunction setPayloadTypesInMediaSection(payloadTypes, section) {\n  var lines = section.split('\\r\\n');\n  var mLine = lines[0];\n  var otherLines = lines.slice(1);\n  mLine = mLine.replace(/([0-9]+\\s?)+$/, payloadTypes.join(' '));\n  return [mLine].concat(otherLines).join('\\r\\n');\n}\n\n/**\n * Create a Map from PTs to codec names for the given m= section.\n * @param {string} mediaSection - The given m= section.\n * @returns {Map<PT, Codec>} ptToCodecName\n */\nfunction createPtToCodecName(mediaSection) {\n  return getPayloadTypesInMediaSection(mediaSection).reduce(function (ptToCodecName, pt) {\n    var rtpmapPattern = new RegExp('a=rtpmap:' + pt + ' ([^/]+)');\n    var matches = mediaSection.match(rtpmapPattern);\n    var codecName = matches ? matches[1].toLowerCase() : ptToFixedBitrateAudioCodecName[pt] ? ptToFixedBitrateAudioCodecName[pt].toLowerCase() : '';\n    return ptToCodecName.set(pt, codecName);\n  }, new Map());\n}\n\n/**\n * Get the Codec Payload Types present in the first line of the given m= section\n * @param {string} section - The m= section\n * @returns {Array<PT>} Payload Types\n */\nfunction getPayloadTypesInMediaSection(section) {\n  var mLine = section.split('\\r\\n')[0];\n\n  // In \"m=<kind> <port> <proto> <payload_type_1> <payload_type_2> ... <payload_type_n>\",\n  // the regex matches <port> and the PayloadTypes.\n  var matches = mLine.match(/([0-9]+)/g);\n\n  // This should not happen, but in case there are no PayloadTypes in\n  // the m= line, return an empty array.\n  if (!matches) {\n    return [];\n  }\n\n  // Since only the PayloadTypes are needed, we discard the <port>.\n  return matches.slice(1).map(function (match) {\n    return parseInt(match, 10);\n  });\n}\n\nmodule.exports = {\n  getPreferredCodecInfo: getPreferredCodecInfo,\n  setCodecPreferences: setCodecPreferences,\n  setIceAggressiveNomination: setIceAggressiveNomination,\n  setMaxAverageBitrate: setMaxAverageBitrate\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/rtc/sdp.js\n")},"./node_modules/twilio-client/es5/twilio/rtc/stats.js":function(module,__unused_webpack_exports,__webpack_require__){eval("var __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\n/* eslint-disable no-fallthrough */\nvar _a = __webpack_require__(/*! ../errors */ \"./node_modules/twilio-client/es5/twilio/errors/index.js\"), NotSupportedError = _a.NotSupportedError, InvalidArgumentError = _a.InvalidArgumentError;\nvar MockRTCStatsReport = __webpack_require__(/*! ./mockrtcstatsreport */ \"./node_modules/twilio-client/es5/twilio/rtc/mockrtcstatsreport.js\");\nvar ERROR_PEER_CONNECTION_NULL = 'PeerConnection is null';\nvar ERROR_WEB_RTC_UNSUPPORTED = 'WebRTC statistics are unsupported';\n/**\n * Generate WebRTC statistics report for the given {@link PeerConnection}\n * @param {PeerConnection} peerConnection - Target connection.\n * @return {Promise<RTCStatsReport>} WebRTC RTCStatsReport object\n */\nfunction getRTCStatsReport(peerConnection) {\n    if (!peerConnection) {\n        return Promise.reject(new InvalidArgumentError(ERROR_PEER_CONNECTION_NULL));\n    }\n    if (typeof peerConnection.getStats !== 'function') {\n        return Promise.reject(new NotSupportedError(ERROR_WEB_RTC_UNSUPPORTED));\n    }\n    var promise;\n    try {\n        promise = peerConnection.getStats();\n    }\n    catch (e) {\n        promise = new Promise(function (resolve) { return peerConnection.getStats(resolve); }).then(MockRTCStatsReport.fromRTCStatsResponse);\n    }\n    return promise;\n}\n/**\n * @typedef {Object} StatsOptions\n * Used for testing to inject and extract methods.\n * @property {function} [createRTCSample] - Method for parsing an RTCStatsReport\n */\n/**\n * Collects any WebRTC statistics for the given {@link PeerConnection}\n * @param {PeerConnection} peerConnection - Target connection.\n * @param {StatsOptions} options - List of custom options.\n * @return {Promise<RTCSample>} Universally-formatted version of RTC stats.\n */\nfunction getRTCStats(peerConnection, options) {\n    options = Object.assign({\n        createRTCSample: createRTCSample\n    }, options);\n    return getRTCStatsReport(peerConnection).then(options.createRTCSample);\n}\n/**\n * Generate WebRTC stats report containing relevant information about ICE candidates for the given {@link PeerConnection}\n * @param {PeerConnection} peerConnection - Target connection.\n * @return {Promise<RTCIceCandidateStatsReport>} RTCIceCandidateStatsReport object\n */\nfunction getRTCIceCandidateStatsReport(peerConnection) {\n    return getRTCStatsReport(peerConnection).then(function (report) {\n        // Find the relevant information needed to determine selected candidates later\n        var _a = Array.from(report.values()).reduce(function (rval, stat) {\n            ['candidatePairs', 'localCandidates', 'remoteCandidates'].forEach(function (prop) {\n                if (!rval[prop]) {\n                    rval[prop] = [];\n                }\n            });\n            switch (stat.type) {\n                case 'candidate-pair':\n                    rval.candidatePairs.push(stat);\n                    break;\n                case 'local-candidate':\n                    rval.localCandidates.push(stat);\n                    break;\n                case 'remote-candidate':\n                    rval.remoteCandidates.push(stat);\n                    break;\n                case 'transport':\n                    // This transport is the one being used if selectedCandidatePairId is populated\n                    if (stat.selectedCandidatePairId) {\n                        rval.transport = stat;\n                    }\n                    break;\n            }\n            return rval;\n        }, {}), candidatePairs = _a.candidatePairs, localCandidates = _a.localCandidates, remoteCandidates = _a.remoteCandidates, transport = _a.transport;\n        // This is a report containing information about the selected candidates, such as IDs\n        // This is coming from WebRTC stats directly and doesn't contain the actual ICE Candidates info\n        var selectedCandidatePairReport = candidatePairs.find(function (pair) {\n            // Firefox\n            return pair.selected ||\n                // Spec-compliant way\n                (transport && pair.id === transport.selectedCandidatePairId);\n        });\n        var selectedIceCandidatePairStats;\n        if (selectedCandidatePairReport) {\n            selectedIceCandidatePairStats = {\n                localCandidate: localCandidates.find(function (candidate) { return candidate.id === selectedCandidatePairReport.localCandidateId; }),\n                remoteCandidate: remoteCandidates.find(function (candidate) { return candidate.id === selectedCandidatePairReport.remoteCandidateId; }),\n            };\n        }\n        // Build the return object\n        return {\n            iceCandidateStats: __spreadArrays(localCandidates, remoteCandidates),\n            selectedIceCandidatePairStats: selectedIceCandidatePairStats,\n        };\n    });\n}\n/**\n * @typedef {Object} RTCSample - A sample containing relevant WebRTC stats information.\n * @property {Number} [timestamp]\n * @property {String} [codecName] - MimeType name of the codec being used by the outbound audio stream\n * @property {Number} [rtt] - Round trip time\n * @property {Number} [jitter]\n * @property {Number} [packetsSent]\n * @property {Number} [packetsLost]\n * @property {Number} [packetsReceived]\n * @property {Number} [bytesReceived]\n * @property {Number} [bytesSent]\n * @property {Number} [localAddress]\n * @property {Number} [remoteAddress]\n */\nfunction RTCSample() { }\n/**\n * Create an RTCSample object from an RTCStatsReport\n * @private\n * @param {RTCStatsReport} statsReport\n * @returns {RTCSample}\n */\nfunction createRTCSample(statsReport) {\n    var activeTransportId = null;\n    var sample = new RTCSample();\n    var fallbackTimestamp;\n    Array.from(statsReport.values()).forEach(function (stats) {\n        // Skip isRemote tracks which will be phased out completely and break in FF66.\n        if (stats.isRemote) {\n            return;\n        }\n        // Firefox hack -- Older firefox doesn't have dashes in type names\n        var type = stats.type.replace('-', '');\n        fallbackTimestamp = fallbackTimestamp || stats.timestamp;\n        // (rrowland) As I understand it, this is supposed to come in on remote-inbound-rtp but it's\n        // currently coming in on remote-outbound-rtp, so I'm leaving this outside the switch until\n        // the appropriate place to look is cleared up.\n        if (stats.remoteId) {\n            var remote = statsReport.get(stats.remoteId);\n            if (remote && remote.roundTripTime) {\n                sample.rtt = remote.roundTripTime * 1000;\n            }\n        }\n        switch (type) {\n            case 'inboundrtp':\n                sample.timestamp = sample.timestamp || stats.timestamp;\n                sample.jitter = stats.jitter * 1000;\n                sample.packetsLost = stats.packetsLost;\n                sample.packetsReceived = stats.packetsReceived;\n                sample.bytesReceived = stats.bytesReceived;\n                break;\n            case 'outboundrtp':\n                sample.timestamp = stats.timestamp;\n                sample.packetsSent = stats.packetsSent;\n                sample.bytesSent = stats.bytesSent;\n                if (stats.codecId) {\n                    var codec = statsReport.get(stats.codecId);\n                    sample.codecName = codec\n                        ? codec.mimeType && codec.mimeType.match(/(.*\\/)?(.*)/)[2]\n                        : stats.codecId;\n                }\n                break;\n            case 'transport':\n                activeTransportId = stats.id;\n                break;\n        }\n    });\n    if (!sample.timestamp) {\n        sample.timestamp = fallbackTimestamp;\n    }\n    var activeTransport = statsReport.get(activeTransportId);\n    if (!activeTransport) {\n        return sample;\n    }\n    var selectedCandidatePair = statsReport.get(activeTransport.selectedCandidatePairId);\n    if (!selectedCandidatePair) {\n        return sample;\n    }\n    var localCandidate = statsReport.get(selectedCandidatePair.localCandidateId);\n    var remoteCandidate = statsReport.get(selectedCandidatePair.remoteCandidateId);\n    if (!sample.rtt) {\n        sample.rtt = selectedCandidatePair &&\n            (selectedCandidatePair.currentRoundTripTime * 1000);\n    }\n    Object.assign(sample, {\n        localAddress: localCandidate && localCandidate.ip,\n        remoteAddress: remoteCandidate && remoteCandidate.ip,\n    });\n    return sample;\n}\nmodule.exports = {\n    getRTCStats: getRTCStats,\n    getRTCIceCandidateStatsReport: getRTCIceCandidateStatsReport,\n};\n//# sourceMappingURL=stats.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLWNsaWVudC9lczUvdHdpbGlvL3J0Yy9zdGF0cy5qcz83MjM0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsaURBQWlELFFBQVE7QUFDekQsd0NBQXdDLFFBQVE7QUFDaEQsd0RBQXdELFFBQVE7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLG1CQUFPLENBQUMsMEVBQVc7QUFDNUIseUJBQXlCLG1CQUFPLENBQUMsK0ZBQXNCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRCxXQUFXLGVBQWU7QUFDMUIsWUFBWSx3QkFBd0I7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QseUNBQXlDLEVBQUU7QUFDN0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLE9BQU87QUFDcEI7QUFDQSxjQUFjLFNBQVM7QUFDdkI7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRCxXQUFXLGVBQWU7QUFDMUIsV0FBVyxhQUFhO0FBQ3hCLFlBQVksbUJBQW1CO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLG9HQUFvRztBQUNwRyxXQUFXLGVBQWU7QUFDMUIsWUFBWSxvQ0FBb0M7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsSUFBSTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLDJFQUEyRSxzRUFBc0UsRUFBRTtBQUNuSiw2RUFBNkUsdUVBQXVFLEVBQUU7QUFDdEo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQWEsT0FBTztBQUNwQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCLGNBQWMsT0FBTztBQUNyQixjQUFjLE9BQU87QUFDckIsY0FBYyxPQUFPO0FBQ3JCO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZUFBZTtBQUMxQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdHdpbGlvLWNsaWVudC9lczUvdHdpbGlvL3J0Yy9zdGF0cy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX3NwcmVhZEFycmF5cyA9ICh0aGlzICYmIHRoaXMuX19zcHJlYWRBcnJheXMpIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXG4gICAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxuICAgICAgICAgICAgcltrXSA9IGFbal07XG4gICAgcmV0dXJuIHI7XG59O1xuLyogZXNsaW50LWRpc2FibGUgbm8tZmFsbHRocm91Z2ggKi9cbnZhciBfYSA9IHJlcXVpcmUoJy4uL2Vycm9ycycpLCBOb3RTdXBwb3J0ZWRFcnJvciA9IF9hLk5vdFN1cHBvcnRlZEVycm9yLCBJbnZhbGlkQXJndW1lbnRFcnJvciA9IF9hLkludmFsaWRBcmd1bWVudEVycm9yO1xudmFyIE1vY2tSVENTdGF0c1JlcG9ydCA9IHJlcXVpcmUoJy4vbW9ja3J0Y3N0YXRzcmVwb3J0Jyk7XG52YXIgRVJST1JfUEVFUl9DT05ORUNUSU9OX05VTEwgPSAnUGVlckNvbm5lY3Rpb24gaXMgbnVsbCc7XG52YXIgRVJST1JfV0VCX1JUQ19VTlNVUFBPUlRFRCA9ICdXZWJSVEMgc3RhdGlzdGljcyBhcmUgdW5zdXBwb3J0ZWQnO1xuLyoqXG4gKiBHZW5lcmF0ZSBXZWJSVEMgc3RhdGlzdGljcyByZXBvcnQgZm9yIHRoZSBnaXZlbiB7QGxpbmsgUGVlckNvbm5lY3Rpb259XG4gKiBAcGFyYW0ge1BlZXJDb25uZWN0aW9ufSBwZWVyQ29ubmVjdGlvbiAtIFRhcmdldCBjb25uZWN0aW9uLlxuICogQHJldHVybiB7UHJvbWlzZTxSVENTdGF0c1JlcG9ydD59IFdlYlJUQyBSVENTdGF0c1JlcG9ydCBvYmplY3RcbiAqL1xuZnVuY3Rpb24gZ2V0UlRDU3RhdHNSZXBvcnQocGVlckNvbm5lY3Rpb24pIHtcbiAgICBpZiAoIXBlZXJDb25uZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoRVJST1JfUEVFUl9DT05ORUNUSU9OX05VTEwpKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwZWVyQ29ubmVjdGlvbi5nZXRTdGF0cyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IE5vdFN1cHBvcnRlZEVycm9yKEVSUk9SX1dFQl9SVENfVU5TVVBQT1JURUQpKTtcbiAgICB9XG4gICAgdmFyIHByb21pc2U7XG4gICAgdHJ5IHtcbiAgICAgICAgcHJvbWlzZSA9IHBlZXJDb25uZWN0aW9uLmdldFN0YXRzKCk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXR1cm4gcGVlckNvbm5lY3Rpb24uZ2V0U3RhdHMocmVzb2x2ZSk7IH0pLnRoZW4oTW9ja1JUQ1N0YXRzUmVwb3J0LmZyb21SVENTdGF0c1Jlc3BvbnNlKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFN0YXRzT3B0aW9uc1xuICogVXNlZCBmb3IgdGVzdGluZyB0byBpbmplY3QgYW5kIGV4dHJhY3QgbWV0aG9kcy5cbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFtjcmVhdGVSVENTYW1wbGVdIC0gTWV0aG9kIGZvciBwYXJzaW5nIGFuIFJUQ1N0YXRzUmVwb3J0XG4gKi9cbi8qKlxuICogQ29sbGVjdHMgYW55IFdlYlJUQyBzdGF0aXN0aWNzIGZvciB0aGUgZ2l2ZW4ge0BsaW5rIFBlZXJDb25uZWN0aW9ufVxuICogQHBhcmFtIHtQZWVyQ29ubmVjdGlvbn0gcGVlckNvbm5lY3Rpb24gLSBUYXJnZXQgY29ubmVjdGlvbi5cbiAqIEBwYXJhbSB7U3RhdHNPcHRpb25zfSBvcHRpb25zIC0gTGlzdCBvZiBjdXN0b20gb3B0aW9ucy5cbiAqIEByZXR1cm4ge1Byb21pc2U8UlRDU2FtcGxlPn0gVW5pdmVyc2FsbHktZm9ybWF0dGVkIHZlcnNpb24gb2YgUlRDIHN0YXRzLlxuICovXG5mdW5jdGlvbiBnZXRSVENTdGF0cyhwZWVyQ29ubmVjdGlvbiwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgY3JlYXRlUlRDU2FtcGxlOiBjcmVhdGVSVENTYW1wbGVcbiAgICB9LCBvcHRpb25zKTtcbiAgICByZXR1cm4gZ2V0UlRDU3RhdHNSZXBvcnQocGVlckNvbm5lY3Rpb24pLnRoZW4ob3B0aW9ucy5jcmVhdGVSVENTYW1wbGUpO1xufVxuLyoqXG4gKiBHZW5lcmF0ZSBXZWJSVEMgc3RhdHMgcmVwb3J0IGNvbnRhaW5pbmcgcmVsZXZhbnQgaW5mb3JtYXRpb24gYWJvdXQgSUNFIGNhbmRpZGF0ZXMgZm9yIHRoZSBnaXZlbiB7QGxpbmsgUGVlckNvbm5lY3Rpb259XG4gKiBAcGFyYW0ge1BlZXJDb25uZWN0aW9ufSBwZWVyQ29ubmVjdGlvbiAtIFRhcmdldCBjb25uZWN0aW9uLlxuICogQHJldHVybiB7UHJvbWlzZTxSVENJY2VDYW5kaWRhdGVTdGF0c1JlcG9ydD59IFJUQ0ljZUNhbmRpZGF0ZVN0YXRzUmVwb3J0IG9iamVjdFxuICovXG5mdW5jdGlvbiBnZXRSVENJY2VDYW5kaWRhdGVTdGF0c1JlcG9ydChwZWVyQ29ubmVjdGlvbikge1xuICAgIHJldHVybiBnZXRSVENTdGF0c1JlcG9ydChwZWVyQ29ubmVjdGlvbikudGhlbihmdW5jdGlvbiAocmVwb3J0KSB7XG4gICAgICAgIC8vIEZpbmQgdGhlIHJlbGV2YW50IGluZm9ybWF0aW9uIG5lZWRlZCB0byBkZXRlcm1pbmUgc2VsZWN0ZWQgY2FuZGlkYXRlcyBsYXRlclxuICAgICAgICB2YXIgX2EgPSBBcnJheS5mcm9tKHJlcG9ydC52YWx1ZXMoKSkucmVkdWNlKGZ1bmN0aW9uIChydmFsLCBzdGF0KSB7XG4gICAgICAgICAgICBbJ2NhbmRpZGF0ZVBhaXJzJywgJ2xvY2FsQ2FuZGlkYXRlcycsICdyZW1vdGVDYW5kaWRhdGVzJ10uZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgICAgIGlmICghcnZhbFtwcm9wXSkge1xuICAgICAgICAgICAgICAgICAgICBydmFsW3Byb3BdID0gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzd2l0Y2ggKHN0YXQudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NhbmRpZGF0ZS1wYWlyJzpcbiAgICAgICAgICAgICAgICAgICAgcnZhbC5jYW5kaWRhdGVQYWlycy5wdXNoKHN0YXQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdsb2NhbC1jYW5kaWRhdGUnOlxuICAgICAgICAgICAgICAgICAgICBydmFsLmxvY2FsQ2FuZGlkYXRlcy5wdXNoKHN0YXQpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdyZW1vdGUtY2FuZGlkYXRlJzpcbiAgICAgICAgICAgICAgICAgICAgcnZhbC5yZW1vdGVDYW5kaWRhdGVzLnB1c2goc3RhdCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3RyYW5zcG9ydCc6XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgdHJhbnNwb3J0IGlzIHRoZSBvbmUgYmVpbmcgdXNlZCBpZiBzZWxlY3RlZENhbmRpZGF0ZVBhaXJJZCBpcyBwb3B1bGF0ZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXQuc2VsZWN0ZWRDYW5kaWRhdGVQYWlySWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ2YWwudHJhbnNwb3J0ID0gc3RhdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBydmFsO1xuICAgICAgICB9LCB7fSksIGNhbmRpZGF0ZVBhaXJzID0gX2EuY2FuZGlkYXRlUGFpcnMsIGxvY2FsQ2FuZGlkYXRlcyA9IF9hLmxvY2FsQ2FuZGlkYXRlcywgcmVtb3RlQ2FuZGlkYXRlcyA9IF9hLnJlbW90ZUNhbmRpZGF0ZXMsIHRyYW5zcG9ydCA9IF9hLnRyYW5zcG9ydDtcbiAgICAgICAgLy8gVGhpcyBpcyBhIHJlcG9ydCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzZWxlY3RlZCBjYW5kaWRhdGVzLCBzdWNoIGFzIElEc1xuICAgICAgICAvLyBUaGlzIGlzIGNvbWluZyBmcm9tIFdlYlJUQyBzdGF0cyBkaXJlY3RseSBhbmQgZG9lc24ndCBjb250YWluIHRoZSBhY3R1YWwgSUNFIENhbmRpZGF0ZXMgaW5mb1xuICAgICAgICB2YXIgc2VsZWN0ZWRDYW5kaWRhdGVQYWlyUmVwb3J0ID0gY2FuZGlkYXRlUGFpcnMuZmluZChmdW5jdGlvbiAocGFpcikge1xuICAgICAgICAgICAgLy8gRmlyZWZveFxuICAgICAgICAgICAgcmV0dXJuIHBhaXIuc2VsZWN0ZWQgfHxcbiAgICAgICAgICAgICAgICAvLyBTcGVjLWNvbXBsaWFudCB3YXlcbiAgICAgICAgICAgICAgICAodHJhbnNwb3J0ICYmIHBhaXIuaWQgPT09IHRyYW5zcG9ydC5zZWxlY3RlZENhbmRpZGF0ZVBhaXJJZCk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgc2VsZWN0ZWRJY2VDYW5kaWRhdGVQYWlyU3RhdHM7XG4gICAgICAgIGlmIChzZWxlY3RlZENhbmRpZGF0ZVBhaXJSZXBvcnQpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkSWNlQ2FuZGlkYXRlUGFpclN0YXRzID0ge1xuICAgICAgICAgICAgICAgIGxvY2FsQ2FuZGlkYXRlOiBsb2NhbENhbmRpZGF0ZXMuZmluZChmdW5jdGlvbiAoY2FuZGlkYXRlKSB7IHJldHVybiBjYW5kaWRhdGUuaWQgPT09IHNlbGVjdGVkQ2FuZGlkYXRlUGFpclJlcG9ydC5sb2NhbENhbmRpZGF0ZUlkOyB9KSxcbiAgICAgICAgICAgICAgICByZW1vdGVDYW5kaWRhdGU6IHJlbW90ZUNhbmRpZGF0ZXMuZmluZChmdW5jdGlvbiAoY2FuZGlkYXRlKSB7IHJldHVybiBjYW5kaWRhdGUuaWQgPT09IHNlbGVjdGVkQ2FuZGlkYXRlUGFpclJlcG9ydC5yZW1vdGVDYW5kaWRhdGVJZDsgfSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIC8vIEJ1aWxkIHRoZSByZXR1cm4gb2JqZWN0XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpY2VDYW5kaWRhdGVTdGF0czogX19zcHJlYWRBcnJheXMobG9jYWxDYW5kaWRhdGVzLCByZW1vdGVDYW5kaWRhdGVzKSxcbiAgICAgICAgICAgIHNlbGVjdGVkSWNlQ2FuZGlkYXRlUGFpclN0YXRzOiBzZWxlY3RlZEljZUNhbmRpZGF0ZVBhaXJTdGF0cyxcbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gUlRDU2FtcGxlIC0gQSBzYW1wbGUgY29udGFpbmluZyByZWxldmFudCBXZWJSVEMgc3RhdHMgaW5mb3JtYXRpb24uXG4gKiBAcHJvcGVydHkge051bWJlcn0gW3RpbWVzdGFtcF1cbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBbY29kZWNOYW1lXSAtIE1pbWVUeXBlIG5hbWUgb2YgdGhlIGNvZGVjIGJlaW5nIHVzZWQgYnkgdGhlIG91dGJvdW5kIGF1ZGlvIHN0cmVhbVxuICogQHByb3BlcnR5IHtOdW1iZXJ9IFtydHRdIC0gUm91bmQgdHJpcCB0aW1lXG4gKiBAcHJvcGVydHkge051bWJlcn0gW2ppdHRlcl1cbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbcGFja2V0c1NlbnRdXG4gKiBAcHJvcGVydHkge051bWJlcn0gW3BhY2tldHNMb3N0XVxuICogQHByb3BlcnR5IHtOdW1iZXJ9IFtwYWNrZXRzUmVjZWl2ZWRdXG4gKiBAcHJvcGVydHkge051bWJlcn0gW2J5dGVzUmVjZWl2ZWRdXG4gKiBAcHJvcGVydHkge051bWJlcn0gW2J5dGVzU2VudF1cbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBbbG9jYWxBZGRyZXNzXVxuICogQHByb3BlcnR5IHtOdW1iZXJ9IFtyZW1vdGVBZGRyZXNzXVxuICovXG5mdW5jdGlvbiBSVENTYW1wbGUoKSB7IH1cbi8qKlxuICogQ3JlYXRlIGFuIFJUQ1NhbXBsZSBvYmplY3QgZnJvbSBhbiBSVENTdGF0c1JlcG9ydFxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7UlRDU3RhdHNSZXBvcnR9IHN0YXRzUmVwb3J0XG4gKiBAcmV0dXJucyB7UlRDU2FtcGxlfVxuICovXG5mdW5jdGlvbiBjcmVhdGVSVENTYW1wbGUoc3RhdHNSZXBvcnQpIHtcbiAgICB2YXIgYWN0aXZlVHJhbnNwb3J0SWQgPSBudWxsO1xuICAgIHZhciBzYW1wbGUgPSBuZXcgUlRDU2FtcGxlKCk7XG4gICAgdmFyIGZhbGxiYWNrVGltZXN0YW1wO1xuICAgIEFycmF5LmZyb20oc3RhdHNSZXBvcnQudmFsdWVzKCkpLmZvckVhY2goZnVuY3Rpb24gKHN0YXRzKSB7XG4gICAgICAgIC8vIFNraXAgaXNSZW1vdGUgdHJhY2tzIHdoaWNoIHdpbGwgYmUgcGhhc2VkIG91dCBjb21wbGV0ZWx5IGFuZCBicmVhayBpbiBGRjY2LlxuICAgICAgICBpZiAoc3RhdHMuaXNSZW1vdGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBGaXJlZm94IGhhY2sgLS0gT2xkZXIgZmlyZWZveCBkb2Vzbid0IGhhdmUgZGFzaGVzIGluIHR5cGUgbmFtZXNcbiAgICAgICAgdmFyIHR5cGUgPSBzdGF0cy50eXBlLnJlcGxhY2UoJy0nLCAnJyk7XG4gICAgICAgIGZhbGxiYWNrVGltZXN0YW1wID0gZmFsbGJhY2tUaW1lc3RhbXAgfHwgc3RhdHMudGltZXN0YW1wO1xuICAgICAgICAvLyAocnJvd2xhbmQpIEFzIEkgdW5kZXJzdGFuZCBpdCwgdGhpcyBpcyBzdXBwb3NlZCB0byBjb21lIGluIG9uIHJlbW90ZS1pbmJvdW5kLXJ0cCBidXQgaXQnc1xuICAgICAgICAvLyBjdXJyZW50bHkgY29taW5nIGluIG9uIHJlbW90ZS1vdXRib3VuZC1ydHAsIHNvIEknbSBsZWF2aW5nIHRoaXMgb3V0c2lkZSB0aGUgc3dpdGNoIHVudGlsXG4gICAgICAgIC8vIHRoZSBhcHByb3ByaWF0ZSBwbGFjZSB0byBsb29rIGlzIGNsZWFyZWQgdXAuXG4gICAgICAgIGlmIChzdGF0cy5yZW1vdGVJZCkge1xuICAgICAgICAgICAgdmFyIHJlbW90ZSA9IHN0YXRzUmVwb3J0LmdldChzdGF0cy5yZW1vdGVJZCk7XG4gICAgICAgICAgICBpZiAocmVtb3RlICYmIHJlbW90ZS5yb3VuZFRyaXBUaW1lKSB7XG4gICAgICAgICAgICAgICAgc2FtcGxlLnJ0dCA9IHJlbW90ZS5yb3VuZFRyaXBUaW1lICogMTAwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2luYm91bmRydHAnOlxuICAgICAgICAgICAgICAgIHNhbXBsZS50aW1lc3RhbXAgPSBzYW1wbGUudGltZXN0YW1wIHx8IHN0YXRzLnRpbWVzdGFtcDtcbiAgICAgICAgICAgICAgICBzYW1wbGUuaml0dGVyID0gc3RhdHMuaml0dGVyICogMTAwMDtcbiAgICAgICAgICAgICAgICBzYW1wbGUucGFja2V0c0xvc3QgPSBzdGF0cy5wYWNrZXRzTG9zdDtcbiAgICAgICAgICAgICAgICBzYW1wbGUucGFja2V0c1JlY2VpdmVkID0gc3RhdHMucGFja2V0c1JlY2VpdmVkO1xuICAgICAgICAgICAgICAgIHNhbXBsZS5ieXRlc1JlY2VpdmVkID0gc3RhdHMuYnl0ZXNSZWNlaXZlZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ291dGJvdW5kcnRwJzpcbiAgICAgICAgICAgICAgICBzYW1wbGUudGltZXN0YW1wID0gc3RhdHMudGltZXN0YW1wO1xuICAgICAgICAgICAgICAgIHNhbXBsZS5wYWNrZXRzU2VudCA9IHN0YXRzLnBhY2tldHNTZW50O1xuICAgICAgICAgICAgICAgIHNhbXBsZS5ieXRlc1NlbnQgPSBzdGF0cy5ieXRlc1NlbnQ7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRzLmNvZGVjSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvZGVjID0gc3RhdHNSZXBvcnQuZ2V0KHN0YXRzLmNvZGVjSWQpO1xuICAgICAgICAgICAgICAgICAgICBzYW1wbGUuY29kZWNOYW1lID0gY29kZWNcbiAgICAgICAgICAgICAgICAgICAgICAgID8gY29kZWMubWltZVR5cGUgJiYgY29kZWMubWltZVR5cGUubWF0Y2goLyguKlxcLyk/KC4qKS8pWzJdXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHN0YXRzLmNvZGVjSWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndHJhbnNwb3J0JzpcbiAgICAgICAgICAgICAgICBhY3RpdmVUcmFuc3BvcnRJZCA9IHN0YXRzLmlkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFzYW1wbGUudGltZXN0YW1wKSB7XG4gICAgICAgIHNhbXBsZS50aW1lc3RhbXAgPSBmYWxsYmFja1RpbWVzdGFtcDtcbiAgICB9XG4gICAgdmFyIGFjdGl2ZVRyYW5zcG9ydCA9IHN0YXRzUmVwb3J0LmdldChhY3RpdmVUcmFuc3BvcnRJZCk7XG4gICAgaWYgKCFhY3RpdmVUcmFuc3BvcnQpIHtcbiAgICAgICAgcmV0dXJuIHNhbXBsZTtcbiAgICB9XG4gICAgdmFyIHNlbGVjdGVkQ2FuZGlkYXRlUGFpciA9IHN0YXRzUmVwb3J0LmdldChhY3RpdmVUcmFuc3BvcnQuc2VsZWN0ZWRDYW5kaWRhdGVQYWlySWQpO1xuICAgIGlmICghc2VsZWN0ZWRDYW5kaWRhdGVQYWlyKSB7XG4gICAgICAgIHJldHVybiBzYW1wbGU7XG4gICAgfVxuICAgIHZhciBsb2NhbENhbmRpZGF0ZSA9IHN0YXRzUmVwb3J0LmdldChzZWxlY3RlZENhbmRpZGF0ZVBhaXIubG9jYWxDYW5kaWRhdGVJZCk7XG4gICAgdmFyIHJlbW90ZUNhbmRpZGF0ZSA9IHN0YXRzUmVwb3J0LmdldChzZWxlY3RlZENhbmRpZGF0ZVBhaXIucmVtb3RlQ2FuZGlkYXRlSWQpO1xuICAgIGlmICghc2FtcGxlLnJ0dCkge1xuICAgICAgICBzYW1wbGUucnR0ID0gc2VsZWN0ZWRDYW5kaWRhdGVQYWlyICYmXG4gICAgICAgICAgICAoc2VsZWN0ZWRDYW5kaWRhdGVQYWlyLmN1cnJlbnRSb3VuZFRyaXBUaW1lICogMTAwMCk7XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24oc2FtcGxlLCB7XG4gICAgICAgIGxvY2FsQWRkcmVzczogbG9jYWxDYW5kaWRhdGUgJiYgbG9jYWxDYW5kaWRhdGUuaXAsXG4gICAgICAgIHJlbW90ZUFkZHJlc3M6IHJlbW90ZUNhbmRpZGF0ZSAmJiByZW1vdGVDYW5kaWRhdGUuaXAsXG4gICAgfSk7XG4gICAgcmV0dXJuIHNhbXBsZTtcbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGdldFJUQ1N0YXRzOiBnZXRSVENTdGF0cyxcbiAgICBnZXRSVENJY2VDYW5kaWRhdGVTdGF0c1JlcG9ydDogZ2V0UlRDSWNlQ2FuZGlkYXRlU3RhdHNSZXBvcnQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdHMuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/rtc/stats.js\n")},"./node_modules/twilio-client/es5/twilio/shims/eventtarget.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("var EventEmitter = __webpack_require__(/*! events */ \"./node_modules/events/events.js\").EventEmitter;\nfunction EventTarget() {\n    Object.defineProperties(this, {\n        _eventEmitter: {\n            value: new EventEmitter()\n        },\n        _handlers: {\n            value: {}\n        },\n    });\n}\nEventTarget.prototype.dispatchEvent = function dispatchEvent(event) {\n    return this._eventEmitter.emit(event.type, event);\n};\nEventTarget.prototype.addEventListener = function addEventListener() {\n    var _a;\n    return (_a = this._eventEmitter).addListener.apply(_a, arguments);\n};\nEventTarget.prototype.removeEventListener = function removeEventListener() {\n    var _a;\n    return (_a = this._eventEmitter).removeListener.apply(_a, arguments);\n};\nEventTarget.prototype._defineEventHandler = function _defineEventHandler(eventName) {\n    var self = this;\n    Object.defineProperty(this, \"on\" + eventName, {\n        get: function () {\n            return self._handlers[eventName];\n        },\n        set: function (newHandler) {\n            var oldHandler = self._handlers[eventName];\n            if (oldHandler\n                && (typeof newHandler === 'function'\n                    || typeof newHandler === 'undefined'\n                    || newHandler === null)) {\n                self._handlers[eventName] = null;\n                self.removeEventListener(eventName, oldHandler);\n            }\n            if (typeof newHandler === 'function') {\n                self._handlers[eventName] = newHandler;\n                self.addEventListener(eventName, newHandler);\n            }\n        }\n    });\n};\nmodule.exports = EventTarget;\n//# sourceMappingURL=eventtarget.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLWNsaWVudC9lczUvdHdpbGlvL3NoaW1zL2V2ZW50dGFyZ2V0LmpzP2U2ZTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsbUJBQW1CLGlGQUE4QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3R3aWxpby1jbGllbnQvZXM1L3R3aWxpby9zaGltcy9ldmVudHRhcmdldC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXI7XG5mdW5jdGlvbiBFdmVudFRhcmdldCgpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICAgIF9ldmVudEVtaXR0ZXI6IHtcbiAgICAgICAgICAgIHZhbHVlOiBuZXcgRXZlbnRFbWl0dGVyKClcbiAgICAgICAgfSxcbiAgICAgICAgX2hhbmRsZXJzOiB7XG4gICAgICAgICAgICB2YWx1ZToge31cbiAgICAgICAgfSxcbiAgICB9KTtcbn1cbkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChldmVudCkge1xuICAgIHJldHVybiB0aGlzLl9ldmVudEVtaXR0ZXIuZW1pdChldmVudC50eXBlLCBldmVudCk7XG59O1xuRXZlbnRUYXJnZXQucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKCkge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKF9hID0gdGhpcy5fZXZlbnRFbWl0dGVyKS5hZGRMaXN0ZW5lci5hcHBseShfYSwgYXJndW1lbnRzKTtcbn07XG5FdmVudFRhcmdldC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoX2EgPSB0aGlzLl9ldmVudEVtaXR0ZXIpLnJlbW92ZUxpc3RlbmVyLmFwcGx5KF9hLCBhcmd1bWVudHMpO1xufTtcbkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5fZGVmaW5lRXZlbnRIYW5kbGVyID0gZnVuY3Rpb24gX2RlZmluZUV2ZW50SGFuZGxlcihldmVudE5hbWUpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwib25cIiArIGV2ZW50TmFtZSwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWxmLl9oYW5kbGVyc1tldmVudE5hbWVdO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChuZXdIYW5kbGVyKSB7XG4gICAgICAgICAgICB2YXIgb2xkSGFuZGxlciA9IHNlbGYuX2hhbmRsZXJzW2V2ZW50TmFtZV07XG4gICAgICAgICAgICBpZiAob2xkSGFuZGxlclxuICAgICAgICAgICAgICAgICYmICh0eXBlb2YgbmV3SGFuZGxlciA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICAgICAgICB8fCB0eXBlb2YgbmV3SGFuZGxlciA9PT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICAgICAgfHwgbmV3SGFuZGxlciA9PT0gbnVsbCkpIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9oYW5kbGVyc1tldmVudE5hbWVdID0gbnVsbDtcbiAgICAgICAgICAgICAgICBzZWxmLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBvbGRIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgbmV3SGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIHNlbGYuX2hhbmRsZXJzW2V2ZW50TmFtZV0gPSBuZXdIYW5kbGVyO1xuICAgICAgICAgICAgICAgIHNlbGYuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIG5ld0hhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59O1xubW9kdWxlLmV4cG9ydHMgPSBFdmVudFRhcmdldDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZW50dGFyZ2V0LmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/shims/eventtarget.js\n")},"./node_modules/twilio-client/es5/twilio/shims/mediadeviceinfo.js":module=>{"use strict";eval('\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nvar MediaDeviceInfoShim = function MediaDeviceInfoShim(options) {\n  _classCallCheck(this, MediaDeviceInfoShim);\n\n  Object.defineProperties(this, {\n    deviceId: {\n      get: function get() {\n        return options.deviceId;\n      }\n    },\n    groupId: {\n      get: function get() {\n        return options.groupId;\n      }\n    },\n    kind: {\n      get: function get() {\n        return options.kind;\n      }\n    },\n    label: {\n      get: function get() {\n        return options.label;\n      }\n    }\n  });\n};\n\nmodule.exports = MediaDeviceInfoShim;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvdHdpbGlvLWNsaWVudC9lczUvdHdpbGlvL3NoaW1zL21lZGlhZGV2aWNlaW5mby5qcz9kODI3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhOztBQUViLGlEQUFpRCwwQ0FBMEMsMERBQTBELEVBQUU7O0FBRXZKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3R3aWxpby1jbGllbnQvZXM1L3R3aWxpby9zaGltcy9tZWRpYWRldmljZWluZm8uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIE1lZGlhRGV2aWNlSW5mb1NoaW0gPSBmdW5jdGlvbiBNZWRpYURldmljZUluZm9TaGltKG9wdGlvbnMpIHtcbiAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lZGlhRGV2aWNlSW5mb1NoaW0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtcbiAgICBkZXZpY2VJZDoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLmRldmljZUlkO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ3JvdXBJZDoge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zLmdyb3VwSWQ7XG4gICAgICB9XG4gICAgfSxcbiAgICBraW5kOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMua2luZDtcbiAgICAgIH1cbiAgICB9LFxuICAgIGxhYmVsOiB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMubGFiZWw7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTWVkaWFEZXZpY2VJbmZvU2hpbTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/shims/mediadeviceinfo.js\n')},"./node_modules/twilio-client/es5/twilio/shims/mediadevices.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval("var EventTarget = __webpack_require__(/*! ./eventtarget */ \"./node_modules/twilio-client/es5/twilio/shims/eventtarget.js\");\nvar inherits = __webpack_require__(/*! util */ \"./node_modules/util/util.js\").inherits;\nvar POLL_INTERVAL_MS = 500;\nvar nativeMediaDevices = typeof navigator !== 'undefined' && navigator.mediaDevices;\n/**\n * Make a custom MediaDevices object, and proxy through existing functionality. If\n *   devicechange is present, we simply reemit the event. If not, we will do the\n *   detection ourselves and fire the event when necessary. The same logic exists\n *   for deviceinfochange for consistency, however deviceinfochange is our own event\n *   so it is unlikely that it will ever be native. The w3c spec for devicechange\n *   is unclear as to whether MediaDeviceInfo changes (such as label) will\n *   trigger the devicechange event. We have an open question on this here:\n *   https://bugs.chromium.org/p/chromium/issues/detail?id=585096\n */\nfunction MediaDevicesShim() {\n    EventTarget.call(this);\n    this._defineEventHandler('devicechange');\n    this._defineEventHandler('deviceinfochange');\n    var knownDevices = [];\n    Object.defineProperties(this, {\n        _deviceChangeIsNative: {\n            value: reemitNativeEvent(this, 'devicechange')\n        },\n        _deviceInfoChangeIsNative: {\n            value: reemitNativeEvent(this, 'deviceinfochange')\n        },\n        _knownDevices: {\n            value: knownDevices\n        },\n        _pollInterval: {\n            value: null,\n            writable: true\n        }\n    });\n    if (typeof nativeMediaDevices.enumerateDevices === 'function') {\n        nativeMediaDevices.enumerateDevices().then(function (devices) {\n            devices.sort(sortDevicesById).forEach([].push, knownDevices);\n        });\n    }\n    this._eventEmitter.on('newListener', function maybeStartPolling(eventName) {\n        if (eventName !== 'devicechange' && eventName !== 'deviceinfochange') {\n            return;\n        }\n        this._pollInterval = this._pollInterval\n            || setInterval(sampleDevices.bind(null, this), POLL_INTERVAL_MS);\n    }.bind(this));\n    this._eventEmitter.on('removeListener', function maybeStopPolling() {\n        if (this._pollInterval && !hasChangeListeners(this)) {\n            clearInterval(this._pollInterval);\n            this._pollInterval = null;\n        }\n    }.bind(this));\n}\ninherits(MediaDevicesShim, EventTarget);\nif (nativeMediaDevices && typeof nativeMediaDevices.enumerateDevices === 'function') {\n    MediaDevicesShim.prototype.enumerateDevices = function enumerateDevices() {\n        return nativeMediaDevices.enumerateDevices.apply(nativeMediaDevices, arguments);\n    };\n}\nMediaDevicesShim.prototype.getUserMedia = function getUserMedia() {\n    return nativeMediaDevices.getUserMedia.apply(nativeMediaDevices, arguments);\n};\nfunction deviceInfosHaveChanged(newDevices, oldDevices) {\n    var oldLabels = oldDevices.reduce(function (map, device) { return map.set(device.deviceId, device.label || null); }, new Map());\n    return newDevices.some(function (newDevice) {\n        var oldLabel = oldLabels.get(newDevice.deviceId);\n        return typeof oldLabel !== 'undefined' && oldLabel !== newDevice.label;\n    });\n}\nfunction devicesHaveChanged(newDevices, oldDevices) {\n    return newDevices.length !== oldDevices.length\n        || propertyHasChanged('deviceId', newDevices, oldDevices);\n}\nfunction hasChangeListeners(mediaDevices) {\n    return ['devicechange', 'deviceinfochange'].reduce(function (count, event) { return count + mediaDevices._eventEmitter.listenerCount(event); }, 0) > 0;\n}\n/**\n * Sample the current set of devices and emit devicechange event if a device has been\n *   added or removed, and deviceinfochange if a device's label has changed.\n * @param {MediaDevicesShim} mediaDevices\n * @private\n */\nfunction sampleDevices(mediaDevices) {\n    nativeMediaDevices.enumerateDevices().then(function (newDevices) {\n        var knownDevices = mediaDevices._knownDevices;\n        var oldDevices = knownDevices.slice();\n        // Replace known devices in-place\n        [].splice.apply(knownDevices, [0, knownDevices.length]\n            .concat(newDevices.sort(sortDevicesById)));\n        if (!mediaDevices._deviceChangeIsNative\n            && devicesHaveChanged(knownDevices, oldDevices)) {\n            mediaDevices.dispatchEvent(new Event('devicechange'));\n        }\n        if (!mediaDevices._deviceInfoChangeIsNative\n            && deviceInfosHaveChanged(knownDevices, oldDevices)) {\n            mediaDevices.dispatchEvent(new Event('deviceinfochange'));\n        }\n    });\n}\n/**\n * Accepts two sorted arrays and the name of a property to compare on objects from each.\n *   Arrays should also be of the same length.\n * @param {string} propertyName - Name of the property to compare on each object\n * @param {Array<Object>} as - The left-side array of objects to compare.\n * @param {Array<Object>} bs - The right-side array of objects to compare.\n * @private\n * @returns {boolean} True if the property of any object in array A is different than\n *   the same property of its corresponding object in array B.\n */\nfunction propertyHasChanged(propertyName, as, bs) {\n    return as.some(function (a, i) { return a[propertyName] !== bs[i][propertyName]; });\n}\n/**\n * Re-emit the native event, if the native mediaDevices has the corresponding property.\n * @param {MediaDevicesShim} mediaDevices\n * @param {string} eventName - Name of the event\n * @private\n * @returns {boolean} Whether the native mediaDevice had the corresponding property\n */\nfunction reemitNativeEvent(mediaDevices, eventName) {\n    var methodName = \"on\" + eventName;\n    function dispatchEvent(event) {\n        mediaDevices.dispatchEvent(event);\n    }\n    if (methodName in nativeMediaDevices) {\n        // Use addEventListener if it's available so we don't stomp on any other listeners\n        // for this event. Currently, navigator.mediaDevices.addEventListener does not exist in Safari.\n        if ('addEventListener' in nativeMediaDevices) {\n            nativeMediaDevices.addEventListener(eventName, dispatchEvent);\n        }\n        else {\n            nativeMediaDevices[methodName] = dispatchEvent;\n        }\n        return true;\n    }\n    return false;\n}\nfunction sortDevicesById(a, b) {\n    return a.deviceId < b.deviceId;\n}\nmodule.exports = (function shimMediaDevices() {\n    return nativeMediaDevices ? new MediaDevicesShim() : null;\n})();\n//# sourceMappingURL=mediadevices.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/shims/mediadevices.js\n")},"./node_modules/twilio-client/es5/twilio/sound.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar AsyncQueue = __webpack_require__(/*! ./asyncQueue */ \"./node_modules/twilio-client/es5/twilio/asyncQueue.js\").AsyncQueue;\nvar AudioPlayer = __webpack_require__(/*! @twilio/audioplayer */ \"./node_modules/@twilio/audioplayer/es5/index.js\");\nvar InvalidArgumentError = __webpack_require__(/*! ./errors */ \"./node_modules/twilio-client/es5/twilio/errors/index.js\").InvalidArgumentError;\n\n/**\n * @class\n * @param {string} name - Name of the sound\n * @param {string} url - URL of the sound\n * @param {Sound#ConstructorOptions} options\n * @property {boolean} isPlaying - Whether the Sound is currently playing audio.\n * @property {string} name - Name of the sound\n * @property {string} url - URL of the sound\n * @property {AudioContext} audioContext - The AudioContext to use if available for AudioPlayer.\n */ /**\n    * @typedef {Object} Sound#ConstructorOptions\n    * @property {number} [maxDuration=0] - The maximum length of time to play the sound\n    *   before stopping it.\n    * @property {Boolean} [shouldLoop=false] - Whether the sound should be looped.\n    */\nfunction Sound(name, url, options) {\n  if (!(this instanceof Sound)) {\n    return new Sound(name, url, options);\n  }\n\n  if (!name || !url) {\n    throw new InvalidArgumentError('name and url are required arguments');\n  }\n\n  options = Object.assign({\n    AudioFactory: typeof Audio !== 'undefined' ? Audio : null,\n    maxDuration: 0,\n    shouldLoop: false\n  }, options);\n\n  options.AudioPlayer = options.audioContext ? AudioPlayer.bind(AudioPlayer, options.audioContext) : options.AudioFactory;\n\n  Object.defineProperties(this, {\n    _activeEls: {\n      value: new Map()\n    },\n    _Audio: {\n      value: options.AudioPlayer\n    },\n    _isSinkSupported: {\n      value: options.AudioFactory !== null && typeof options.AudioFactory.prototype.setSinkId === 'function'\n    },\n    _maxDuration: {\n      value: options.maxDuration\n    },\n    _maxDurationTimeout: {\n      value: null,\n      writable: true\n    },\n    _operations: {\n      value: new AsyncQueue()\n    },\n    _playPromise: {\n      value: null,\n      writable: true\n    },\n    _shouldLoop: {\n      value: options.shouldLoop\n    },\n    _sinkIds: {\n      value: ['default']\n    },\n    isPlaying: {\n      enumerable: true,\n      get: function get() {\n        return !!this._playPromise;\n      }\n    },\n    name: {\n      enumerable: true,\n      value: name\n    },\n    url: {\n      enumerable: true,\n      value: url\n    }\n  });\n\n  if (this._Audio) {\n    // Play it (muted and should not loop) as soon as possible so that it does not get incorrectly caught by Chrome's\n    // \"gesture requirement for media playback\" feature.\n    // https://plus.google.com/+FrancoisBeaufort/posts/6PiJQqJzGqX\n    this._play(true, false);\n  }\n}\n\nfunction destroyAudioElement(audioElement) {\n  if (audioElement) {\n    audioElement.pause();\n    audioElement.src = '';\n    audioElement.srcObject = null;\n    audioElement.load();\n  }\n}\n\n/**\n * Plays the audio element that was initialized using the speficied sinkId\n */\nSound.prototype._playAudioElement = function _playAudioElement(sinkId, isMuted, shouldLoop) {\n  var _this = this;\n\n  var audioElement = this._activeEls.get(sinkId);\n\n  if (!audioElement) {\n    throw new InvalidArgumentError('sinkId: \"' + sinkId + '\" doesn\\'t have an audio element');\n  }\n\n  audioElement.muted = !!isMuted;\n  audioElement.loop = !!shouldLoop;\n\n  return audioElement.play().then(function () {\n    return audioElement;\n  }).catch(function (reason) {\n    destroyAudioElement(audioElement);\n    _this._activeEls.delete(sinkId);\n    throw reason;\n  });\n};\n\n/**\n * Start playing the sound. Will stop the currently playing sound first.\n * If it exists, the audio element that was initialized for the sinkId will be used\n */\nSound.prototype._play = function _play(forceIsMuted, forceShouldLoop) {\n  if (this.isPlaying) {\n    this._stop();\n  }\n\n  if (this._maxDuration > 0) {\n    this._maxDurationTimeout = setTimeout(this._stop.bind(this), this._maxDuration);\n  }\n\n  forceShouldLoop = typeof forceShouldLoop === 'boolean' ? forceShouldLoop : this._shouldLoop;\n  var self = this;\n  var playPromise = this._playPromise = Promise.all(this._sinkIds.map(function createAudioElement(sinkId) {\n    if (!self._Audio) {\n      return Promise.resolve();\n    }\n\n    var audioElement = self._activeEls.get(sinkId);\n    if (audioElement) {\n      return self._playAudioElement(sinkId, forceIsMuted, forceShouldLoop);\n    }\n\n    audioElement = new self._Audio(self.url);\n\n    // Make sure the browser always retrieves the resource using CORS.\n    // By default when using media tags, origin header is not sent to server\n    // which causes the server to not return CORS headers. When this caches\n    // on the CDN or browser, it causes issues to future requests that needs CORS,\n    // which is true when using AudioContext. Please note that we won't have to do this\n    // once we migrate to CloudFront.\n    if (typeof audioElement.setAttribute === 'function') {\n      audioElement.setAttribute('crossorigin', 'anonymous');\n    }\n\n    /**\n     * (rrowland) Bug in Chrome 53 & 54 prevents us from calling Audio.setSinkId without\n     *   crashing the tab. https://bugs.chromium.org/p/chromium/issues/detail?id=655342\n     */\n    return new Promise(function (resolve) {\n      audioElement.addEventListener('canplaythrough', resolve);\n    }).then(function () {\n      return (self._isSinkSupported ? audioElement.setSinkId(sinkId) : Promise.resolve()).then(function setSinkIdSuccess() {\n        self._activeEls.set(sinkId, audioElement);\n\n        // Stop has been called, bail out\n        if (!self._playPromise) {\n          return Promise.resolve();\n        }\n        return self._playAudioElement(sinkId, forceIsMuted, forceShouldLoop);\n      });\n    });\n  }));\n\n  return playPromise;\n};\n\n/**\n * Stop playing the sound.\n */\nSound.prototype._stop = function _stop() {\n  var _this2 = this;\n\n  this._activeEls.forEach(function (audioEl, sinkId) {\n    if (_this2._sinkIds.includes(sinkId)) {\n      audioEl.pause();\n      audioEl.currentTime = 0;\n    } else {\n      // Destroy the ones that are not used anymore\n      destroyAudioElement(audioEl);\n      _this2._activeEls.delete(sinkId);\n    }\n  });\n\n  clearTimeout(this._maxDurationTimeout);\n\n  this._playPromise = null;\n  this._maxDurationTimeout = null;\n};\n\n/**\n * Update the sinkIds of the audio output devices this sound should play through.\n */\nSound.prototype.setSinkIds = function setSinkIds(ids) {\n  if (!this._isSinkSupported) {\n    return;\n  }\n\n  ids = ids.forEach ? ids : [ids];\n  [].splice.apply(this._sinkIds, [0, this._sinkIds.length].concat(ids));\n};\n\n/**\n * Add a stop operation to the queue\n */\nSound.prototype.stop = function stop() {\n  var _this3 = this;\n\n  this._operations.enqueue(function () {\n    _this3._stop();\n    return Promise.resolve();\n  });\n};\n\n/**\n * Add a play operation to the queue\n */\nSound.prototype.play = function play() {\n  var _this4 = this;\n\n  return this._operations.enqueue(function () {\n    return _this4._play();\n  });\n};\n\nmodule.exports = Sound;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/sound.js\n")},"./node_modules/twilio-client/es5/twilio/statsMonitor.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n/**\n * @packageDocumentation\n * @module Voice\n * @internalapi\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar events_1 = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\nvar errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/twilio-client/es5/twilio/errors/index.js\");\nvar util_1 = __webpack_require__(/*! ./util */ \"./node_modules/twilio-client/es5/twilio/util.js\");\nvar getRTCStats = __webpack_require__(/*! ./rtc/stats */ \"./node_modules/twilio-client/es5/twilio/rtc/stats.js\").getRTCStats;\nvar Mos = __webpack_require__(/*! ./rtc/mos */ \"./node_modules/twilio-client/es5/twilio/rtc/mos.js\");\n// How many samples we use when testing metric thresholds\nvar SAMPLE_COUNT_METRICS = 5;\n// How many samples that need to cross the threshold to\n// raise or clear a warning.\nvar SAMPLE_COUNT_CLEAR = 0;\nvar SAMPLE_COUNT_RAISE = 3;\nvar SAMPLE_INTERVAL = 1000;\nvar WARNING_TIMEOUT = 5 * 1000;\nvar DEFAULT_THRESHOLDS = {\n    audioInputLevel: { minStandardDeviation: 327.67, sampleCount: 10 },\n    audioOutputLevel: { minStandardDeviation: 327.67, sampleCount: 10 },\n    bytesReceived: { clearCount: 2, min: 1, raiseCount: 3, sampleCount: 3 },\n    bytesSent: { clearCount: 2, min: 1, raiseCount: 3, sampleCount: 3 },\n    jitter: { max: 30 },\n    mos: { min: 3 },\n    packetsLostFraction: [{\n            max: 1,\n        }, {\n            clearValue: 1,\n            maxAverage: 3,\n            sampleCount: 7,\n        }],\n    rtt: { max: 400 },\n};\n/**\n * Count the number of values that cross the max threshold.\n * @private\n * @param max - The max allowable value.\n * @param values - The values to iterate over.\n * @returns The amount of values in which the stat crossed the threshold.\n */\nfunction countHigh(max, values) {\n    return values.reduce(function (highCount, value) { return highCount += (value > max) ? 1 : 0; }, 0);\n}\n/**\n * Count the number of values that cross the min threshold.\n * @private\n * @param min - The minimum allowable value.\n * @param values - The values to iterate over.\n * @returns The amount of values in which the stat crossed the threshold.\n */\nfunction countLow(min, values) {\n    return values.reduce(function (lowCount, value) { return lowCount += (value < min) ? 1 : 0; }, 0);\n}\n/**\n * Calculate the standard deviation from a list of numbers.\n * @private\n * @param values The list of numbers to calculate the standard deviation from.\n * @returns The standard deviation of a list of numbers.\n */\nfunction calculateStandardDeviation(values) {\n    if (values.length <= 0) {\n        return null;\n    }\n    var valueAverage = values.reduce(function (partialSum, value) { return partialSum + value; }, 0) / values.length;\n    var diffSquared = values.map(function (value) { return Math.pow(value - valueAverage, 2); });\n    var stdDev = Math.sqrt(diffSquared.reduce(function (partialSum, value) { return partialSum + value; }, 0) / diffSquared.length);\n    return stdDev;\n}\n/**\n * Flatten a set of numerical sample sets into a single array of samples.\n * @param sampleSets\n */\nfunction flattenSamples(sampleSets) {\n    return sampleSets.reduce(function (flat, current) { return __spreadArrays(flat, current); }, []);\n}\n/**\n * {@link StatsMonitor} polls a peerConnection via PeerConnection.getStats\n * and emits warnings when stats cross the specified threshold values.\n */\nvar StatsMonitor = /** @class */ (function (_super) {\n    __extends(StatsMonitor, _super);\n    /**\n     * @constructor\n     * @param [options] - Optional settings\n     */\n    function StatsMonitor(options) {\n        var _this = _super.call(this) || this;\n        /**\n         * A map of warnings with their raised time\n         */\n        _this._activeWarnings = new Map();\n        /**\n         * A map of stats with the number of exceeded thresholds\n         */\n        _this._currentStreaks = new Map();\n        /**\n         * Keeps track of input volumes in the last second\n         */\n        _this._inputVolumes = [];\n        /**\n         * Keeps track of output volumes in the last second\n         */\n        _this._outputVolumes = [];\n        /**\n         * Sample buffer. Saves most recent samples\n         */\n        _this._sampleBuffer = [];\n        /**\n         * Keeps track of supplemental sample values.\n         *\n         * Currently used for constant audio detection. Contains an array of volume\n         * samples for each sample interval.\n         */\n        _this._supplementalSampleBuffers = {\n            audioInputLevel: [],\n            audioOutputLevel: [],\n        };\n        /**\n         * Whether warnings should be enabled\n         */\n        _this._warningsEnabled = true;\n        options = options || {};\n        _this._getRTCStats = options.getRTCStats || getRTCStats;\n        _this._mos = options.Mos || Mos;\n        _this._peerConnection = options.peerConnection;\n        _this._thresholds = __assign(__assign({}, DEFAULT_THRESHOLDS), options.thresholds);\n        var thresholdSampleCounts = Object.values(_this._thresholds)\n            .map(function (threshold) { return threshold.sampleCount; })\n            .filter(function (sampleCount) { return !!sampleCount; });\n        _this._maxSampleCount = Math.max.apply(Math, __spreadArrays([SAMPLE_COUNT_METRICS], thresholdSampleCounts));\n        if (_this._peerConnection) {\n            _this.enable(_this._peerConnection);\n        }\n        return _this;\n    }\n    /**\n     * Called when a volume sample is available\n     * @param inputVolume - Input volume level from 0 to 32767\n     * @param outputVolume - Output volume level from 0 to 32767\n     */\n    StatsMonitor.prototype.addVolumes = function (inputVolume, outputVolume) {\n        this._inputVolumes.push(inputVolume);\n        this._outputVolumes.push(outputVolume);\n    };\n    /**\n     * Stop sampling RTC statistics for this {@link StatsMonitor}.\n     * @returns The current {@link StatsMonitor}.\n     */\n    StatsMonitor.prototype.disable = function () {\n        clearInterval(this._sampleInterval);\n        delete this._sampleInterval;\n        return this;\n    };\n    /**\n     * Disable warnings for this {@link StatsMonitor}.\n     * @returns The current {@link StatsMonitor}.\n     */\n    StatsMonitor.prototype.disableWarnings = function () {\n        if (this._warningsEnabled) {\n            this._activeWarnings.clear();\n        }\n        this._warningsEnabled = false;\n        return this;\n    };\n    /**\n     * Start sampling RTC statistics for this {@link StatsMonitor}.\n     * @param peerConnection - A PeerConnection to monitor.\n     * @returns The current {@link StatsMonitor}.\n     */\n    StatsMonitor.prototype.enable = function (peerConnection) {\n        if (peerConnection) {\n            if (this._peerConnection && peerConnection !== this._peerConnection) {\n                throw new errors_1.InvalidArgumentError('Attempted to replace an existing PeerConnection in StatsMonitor.enable');\n            }\n            this._peerConnection = peerConnection;\n        }\n        if (!this._peerConnection) {\n            throw new errors_1.InvalidArgumentError('Can not enable StatsMonitor without a PeerConnection');\n        }\n        this._sampleInterval = this._sampleInterval ||\n            setInterval(this._fetchSample.bind(this), SAMPLE_INTERVAL);\n        return this;\n    };\n    /**\n     * Enable warnings for this {@link StatsMonitor}.\n     * @returns The current {@link StatsMonitor}.\n     */\n    StatsMonitor.prototype.enableWarnings = function () {\n        this._warningsEnabled = true;\n        return this;\n    };\n    /**\n     * Check if there is an active warning for a specific stat and threshold\n     * @param statName - The name of the stat to check\n     * @param thresholdName - The name of the threshold to check\n     * @returns Whether there is an active warning for a specific stat and threshold\n     */\n    StatsMonitor.prototype.hasActiveWarning = function (statName, thresholdName) {\n        var warningId = statName + \":\" + thresholdName;\n        return !!this._activeWarnings.get(warningId);\n    };\n    /**\n     * Add a sample to our sample buffer and remove the oldest if we are over the limit.\n     * @param sample - Sample to add\n     */\n    StatsMonitor.prototype._addSample = function (sample) {\n        var samples = this._sampleBuffer;\n        samples.push(sample);\n        // We store 1 extra sample so that we always have (current, previous)\n        // available for all {sampleBufferSize} threshold validations.\n        if (samples.length > this._maxSampleCount) {\n            samples.splice(0, samples.length - this._maxSampleCount);\n        }\n    };\n    /**\n     * Clear an active warning.\n     * @param statName - The name of the stat to clear.\n     * @param thresholdName - The name of the threshold to clear\n     * @param [data] - Any relevant sample data.\n     */\n    StatsMonitor.prototype._clearWarning = function (statName, thresholdName, data) {\n        var warningId = statName + \":\" + thresholdName;\n        var activeWarning = this._activeWarnings.get(warningId);\n        if (!activeWarning || Date.now() - activeWarning.timeRaised < WARNING_TIMEOUT) {\n            return;\n        }\n        this._activeWarnings.delete(warningId);\n        this.emit('warning-cleared', __assign(__assign({}, data), { name: statName, threshold: {\n                name: thresholdName,\n                value: this._thresholds[statName][thresholdName],\n            } }));\n    };\n    /**\n     * Create a sample object from a stats object using the previous sample, if available.\n     * @param stats - Stats retrieved from getStatistics\n     * @param [previousSample=null] - The previous sample to use to calculate deltas.\n     * @returns A universally-formatted version of RTC stats.\n     */\n    StatsMonitor.prototype._createSample = function (stats, previousSample) {\n        var previousBytesSent = previousSample && previousSample.totals.bytesSent || 0;\n        var previousBytesReceived = previousSample && previousSample.totals.bytesReceived || 0;\n        var previousPacketsSent = previousSample && previousSample.totals.packetsSent || 0;\n        var previousPacketsReceived = previousSample && previousSample.totals.packetsReceived || 0;\n        var previousPacketsLost = previousSample && previousSample.totals.packetsLost || 0;\n        var currentBytesSent = stats.bytesSent - previousBytesSent;\n        var currentBytesReceived = stats.bytesReceived - previousBytesReceived;\n        var currentPacketsSent = stats.packetsSent - previousPacketsSent;\n        var currentPacketsReceived = stats.packetsReceived - previousPacketsReceived;\n        var currentPacketsLost = stats.packetsLost - previousPacketsLost;\n        var currentInboundPackets = currentPacketsReceived + currentPacketsLost;\n        var currentPacketsLostFraction = (currentInboundPackets > 0) ?\n            (currentPacketsLost / currentInboundPackets) * 100 : 0;\n        var totalInboundPackets = stats.packetsReceived + stats.packetsLost;\n        var totalPacketsLostFraction = (totalInboundPackets > 0) ?\n            (stats.packetsLost / totalInboundPackets) * 100 : 100;\n        var rttValue = (typeof stats.rtt === 'number' || !previousSample) ? stats.rtt : previousSample.rtt;\n        var audioInputLevelValues = this._inputVolumes.splice(0);\n        this._supplementalSampleBuffers.audioInputLevel.push(audioInputLevelValues);\n        var audioOutputLevelValues = this._outputVolumes.splice(0);\n        this._supplementalSampleBuffers.audioOutputLevel.push(audioOutputLevelValues);\n        return {\n            audioInputLevel: Math.round(util_1.average(audioInputLevelValues)),\n            audioOutputLevel: Math.round(util_1.average(audioOutputLevelValues)),\n            bytesReceived: currentBytesReceived,\n            bytesSent: currentBytesSent,\n            codecName: stats.codecName,\n            jitter: stats.jitter,\n            mos: this._mos.calculate(rttValue, stats.jitter, previousSample && currentPacketsLostFraction),\n            packetsLost: currentPacketsLost,\n            packetsLostFraction: currentPacketsLostFraction,\n            packetsReceived: currentPacketsReceived,\n            packetsSent: currentPacketsSent,\n            rtt: rttValue,\n            timestamp: stats.timestamp,\n            totals: {\n                bytesReceived: stats.bytesReceived,\n                bytesSent: stats.bytesSent,\n                packetsLost: stats.packetsLost,\n                packetsLostFraction: totalPacketsLostFraction,\n                packetsReceived: stats.packetsReceived,\n                packetsSent: stats.packetsSent,\n            },\n        };\n    };\n    /**\n     * Get stats from the PeerConnection and add it to our list of samples.\n     */\n    StatsMonitor.prototype._fetchSample = function () {\n        var _this = this;\n        this._getSample().then(function (sample) {\n            _this._addSample(sample);\n            _this._raiseWarnings();\n            _this.emit('sample', sample);\n        }).catch(function (error) {\n            _this.disable();\n            // We only bubble up any errors coming from pc.getStats()\n            // No need to attach a twilioError\n            _this.emit('error', error);\n        });\n    };\n    /**\n     * Get stats from the PeerConnection.\n     * @returns A universally-formatted version of RTC stats.\n     */\n    StatsMonitor.prototype._getSample = function () {\n        var _this = this;\n        return this._getRTCStats(this._peerConnection).then(function (stats) {\n            var previousSample = null;\n            if (_this._sampleBuffer.length) {\n                previousSample = _this._sampleBuffer[_this._sampleBuffer.length - 1];\n            }\n            return _this._createSample(stats, previousSample);\n        });\n    };\n    /**\n     * Raise a warning and log its raised time.\n     * @param statName - The name of the stat to raise.\n     * @param thresholdName - The name of the threshold to raise\n     * @param [data] - Any relevant sample data.\n     */\n    StatsMonitor.prototype._raiseWarning = function (statName, thresholdName, data) {\n        var warningId = statName + \":\" + thresholdName;\n        if (this._activeWarnings.has(warningId)) {\n            return;\n        }\n        this._activeWarnings.set(warningId, { timeRaised: Date.now() });\n        var thresholds = this._thresholds[statName];\n        var thresholdValue;\n        if (Array.isArray(thresholds)) {\n            var foundThreshold = thresholds.find(function (threshold) { return thresholdName in threshold; });\n            if (foundThreshold) {\n                thresholdValue = foundThreshold[thresholdName];\n            }\n        }\n        else {\n            thresholdValue = this._thresholds[statName][thresholdName];\n        }\n        this.emit('warning', __assign(__assign({}, data), { name: statName, threshold: {\n                name: thresholdName,\n                value: thresholdValue,\n            } }));\n    };\n    /**\n     * Apply our thresholds to our array of RTCStat samples.\n     */\n    StatsMonitor.prototype._raiseWarnings = function () {\n        var _this = this;\n        if (!this._warningsEnabled) {\n            return;\n        }\n        Object.keys(this._thresholds).forEach(function (name) { return _this._raiseWarningsForStat(name); });\n    };\n    /**\n     * Apply thresholds for a given stat name to our array of\n     * RTCStat samples and raise or clear any associated warnings.\n     * @param statName - Name of the stat to compare.\n     */\n    StatsMonitor.prototype._raiseWarningsForStat = function (statName) {\n        var _this = this;\n        var limits = Array.isArray(this._thresholds[statName])\n            ? this._thresholds[statName]\n            : [this._thresholds[statName]];\n        limits.forEach(function (limit) {\n            var samples = _this._sampleBuffer;\n            var clearCount = limit.clearCount || SAMPLE_COUNT_CLEAR;\n            var raiseCount = limit.raiseCount || SAMPLE_COUNT_RAISE;\n            var sampleCount = limit.sampleCount || _this._maxSampleCount;\n            var relevantSamples = samples.slice(-sampleCount);\n            var values = relevantSamples.map(function (sample) { return sample[statName]; });\n            // (rrowland) If we have a bad or missing value in the set, we don't\n            // have enough information to throw or clear a warning. Bail out.\n            var containsNull = values.some(function (value) { return typeof value === 'undefined' || value === null; });\n            if (containsNull) {\n                return;\n            }\n            var count;\n            if (typeof limit.max === 'number') {\n                count = countHigh(limit.max, values);\n                if (count >= raiseCount) {\n                    _this._raiseWarning(statName, 'max', { values: values, samples: relevantSamples });\n                }\n                else if (count <= clearCount) {\n                    _this._clearWarning(statName, 'max', { values: values, samples: relevantSamples });\n                }\n            }\n            if (typeof limit.min === 'number') {\n                count = countLow(limit.min, values);\n                if (count >= raiseCount) {\n                    _this._raiseWarning(statName, 'min', { values: values, samples: relevantSamples });\n                }\n                else if (count <= clearCount) {\n                    _this._clearWarning(statName, 'min', { values: values, samples: relevantSamples });\n                }\n            }\n            if (typeof limit.maxDuration === 'number' && samples.length > 1) {\n                relevantSamples = samples.slice(-2);\n                var prevValue = relevantSamples[0][statName];\n                var curValue = relevantSamples[1][statName];\n                var prevStreak = _this._currentStreaks.get(statName) || 0;\n                var streak = (prevValue === curValue) ? prevStreak + 1 : 0;\n                _this._currentStreaks.set(statName, streak);\n                if (streak >= limit.maxDuration) {\n                    _this._raiseWarning(statName, 'maxDuration', { value: streak });\n                }\n                else if (streak === 0) {\n                    _this._clearWarning(statName, 'maxDuration', { value: prevStreak });\n                }\n            }\n            if (typeof limit.minStandardDeviation === 'number') {\n                var sampleSets = _this._supplementalSampleBuffers[statName];\n                if (!sampleSets || sampleSets.length < limit.sampleCount) {\n                    return;\n                }\n                if (sampleSets.length > limit.sampleCount) {\n                    sampleSets.splice(0, sampleSets.length - limit.sampleCount);\n                }\n                var flatSamples = flattenSamples(sampleSets.slice(-sampleCount));\n                var stdDev = calculateStandardDeviation(flatSamples);\n                if (typeof stdDev !== 'number') {\n                    return;\n                }\n                if (stdDev < limit.minStandardDeviation) {\n                    _this._raiseWarning(statName, 'minStandardDeviation', { value: stdDev });\n                }\n                else {\n                    _this._clearWarning(statName, 'minStandardDeviation', { value: stdDev });\n                }\n            }\n            [\n                ['maxAverage', function (x, y) { return x > y; }],\n                ['minAverage', function (x, y) { return x < y; }],\n            ].forEach(function (_a) {\n                var thresholdName = _a[0], comparator = _a[1];\n                if (typeof limit[thresholdName] === 'number' && values.length >= sampleCount) {\n                    var avg = util_1.average(values);\n                    if (comparator(avg, limit[thresholdName])) {\n                        _this._raiseWarning(statName, thresholdName, { values: values, samples: relevantSamples });\n                    }\n                    else if (!comparator(avg, limit.clearValue || limit[thresholdName])) {\n                        _this._clearWarning(statName, thresholdName, { values: values, samples: relevantSamples });\n                    }\n                }\n            });\n        });\n    };\n    return StatsMonitor;\n}(events_1.EventEmitter));\nexports.default = StatsMonitor;\n//# sourceMappingURL=statsMonitor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/statsMonitor.js\n")},"./node_modules/twilio-client/es5/twilio/util.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("/**\n * Exception class.\n * @class\n * @name Exception\n * @exports Exception as Twilio.Exception\n * @memberOf Twilio\n * @param {string} message The exception message\n */\nfunction TwilioException(message) {\n    if (!(this instanceof TwilioException)) {\n        return new TwilioException(message);\n    }\n    this.message = message;\n}\n/**\n * Returns the exception message.\n *\n * @return {string} The exception message.\n */\nTwilioException.prototype.toString = function () {\n    return \"Twilio.Exception: \" + this.message;\n};\nfunction average(values) {\n    return values && values.length ? values.reduce(function (t, v) { return t + v; }) / values.length : 0;\n}\nfunction difference(lefts, rights, getKey) {\n    getKey = getKey || (function (a) { return a; });\n    var rightKeys = new Set(rights.map(getKey));\n    return lefts.filter(function (left) { return !rightKeys.has(getKey(left)); });\n}\nfunction isElectron(navigator) {\n    return !!navigator.userAgent.match('Electron');\n}\nfunction isChrome(window, navigator) {\n    var isCriOS = !!navigator.userAgent.match('CriOS');\n    var isHeadlessChrome = !!navigator.userAgent.match('HeadlessChrome');\n    var isGoogle = typeof window.chrome !== 'undefined'\n        && navigator.vendor === 'Google Inc.'\n        && navigator.userAgent.indexOf('OPR') === -1\n        && navigator.userAgent.indexOf('Edge') === -1;\n    return isCriOS || isElectron(navigator) || isGoogle || isHeadlessChrome;\n}\nfunction isFirefox(navigator) {\n    navigator = navigator || (typeof window === 'undefined'\n        ? __webpack_require__.g.navigator : window.navigator);\n    return !!(navigator) && typeof navigator.userAgent === 'string'\n        && /firefox|fxios/i.test(navigator.userAgent);\n}\nfunction isLegacyEdge(navigator) {\n    navigator = navigator || (typeof window === 'undefined'\n        ? __webpack_require__.g.navigator : window.navigator);\n    return !!(navigator) && typeof navigator.userAgent === 'string'\n        && /edge\\/\\d+/i.test(navigator.userAgent);\n}\nfunction isSafari(navigator) {\n    return !!(navigator.vendor) && navigator.vendor.indexOf('Apple') !== -1\n        && navigator.userAgent\n        && navigator.userAgent.indexOf('CriOS') === -1\n        && navigator.userAgent.indexOf('FxiOS') === -1;\n}\nfunction isUnifiedPlanDefault(window, navigator, PeerConnection, RtpTransceiver) {\n    if (typeof window === 'undefined'\n        || typeof navigator === 'undefined'\n        || typeof PeerConnection === 'undefined'\n        || typeof RtpTransceiver === 'undefined'\n        || typeof PeerConnection.prototype === 'undefined'\n        || typeof RtpTransceiver.prototype === 'undefined') {\n        return false;\n    }\n    if (isChrome(window, navigator) && PeerConnection.prototype.addTransceiver) {\n        var pc = new PeerConnection();\n        var isUnifiedPlan = true;\n        try {\n            pc.addTransceiver('audio');\n        }\n        catch (e) {\n            isUnifiedPlan = false;\n        }\n        pc.close();\n        return isUnifiedPlan;\n    }\n    else if (isFirefox(navigator)) {\n        return true;\n    }\n    else if (isSafari(navigator)) {\n        return 'currentDirection' in RtpTransceiver.prototype;\n    }\n    // Edge currently does not support unified plan.\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/17733189/\n    // https://wpdev.uservoice.com/forums/257854-microsoft-edge-developer/suggestions/34451998-sdp-unified-plan\n    return false;\n}\nfunction queryToJson(params) {\n    if (!params) {\n        return '';\n    }\n    return params.split('&').reduce(function (output, pair) {\n        var parts = pair.split('=');\n        var key = parts[0];\n        var value = decodeURIComponent((parts[1] || '').replace(/\\+/g, '%20'));\n        if (key) {\n            output[key] = value;\n        }\n        return output;\n    }, {});\n}\n/**\n * Map a list to an array of arrays, and return the flattened result.\n * @param {Array<*>|Set<*>|Map<*>} list\n * @param {function(*): Array<*>} [mapFn]\n * @returns Array<*>\n */\nfunction flatMap(list, mapFn) {\n    var listArray = list instanceof Map || list instanceof Set\n        ? Array.from(list.values())\n        : list;\n    mapFn = mapFn || (function (item) { return item; });\n    return listArray.reduce(function (flattened, item) {\n        var mapped = mapFn(item);\n        return flattened.concat(mapped);\n    }, []);\n}\nexports.Exception = TwilioException;\nexports.average = average;\nexports.difference = difference;\nexports.isElectron = isElectron;\nexports.isChrome = isChrome;\nexports.isFirefox = isFirefox;\nexports.isLegacyEdge = isLegacyEdge;\nexports.isSafari = isSafari;\nexports.isUnifiedPlanDefault = isUnifiedPlanDefault;\nexports.queryToJson = queryToJson;\nexports.flatMap = flatMap;\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/util.js\n")},"./node_modules/twilio-client/es5/twilio/wstransport.js":function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\n/**\n * @packageDocumentation\n * @module Tools\n * @internalapi\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar events_1 = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\nvar WebSocket = __webpack_require__(/*! ws */ \"./node_modules/twilio-client/browser/ws.js\");\nvar errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/twilio-client/es5/twilio/errors/index.js\");\nvar log_1 = __webpack_require__(/*! ./log */ \"./node_modules/twilio-client/es5/twilio/log.js\");\n// tslint:disable-next-line\nvar Backoff = __webpack_require__(/*! backoff */ \"./node_modules/backoff/index.js\");\nvar CONNECT_SUCCESS_TIMEOUT = 10000;\nvar CONNECT_TIMEOUT = 5000;\nvar HEARTBEAT_TIMEOUT = 15000;\n/**\n * All possible states of WSTransport.\n */\nvar WSTransportState;\n(function (WSTransportState) {\n    /**\n     * The WebSocket is not open but is trying to connect.\n     */\n    WSTransportState[\"Connecting\"] = \"connecting\";\n    /**\n     * The WebSocket is not open and is not trying to connect.\n     */\n    WSTransportState[\"Closed\"] = \"closed\";\n    /**\n     * The underlying WebSocket is open and active.\n     */\n    WSTransportState[\"Open\"] = \"open\";\n})(WSTransportState = exports.WSTransportState || (exports.WSTransportState = {}));\n/**\n * WebSocket Transport\n */\nvar WSTransport = /** @class */ (function (_super) {\n    __extends(WSTransport, _super);\n    /**\n     * @constructor\n     * @param uris - List of URI of the endpoints to connect to.\n     * @param [options] - Constructor options.\n     */\n    function WSTransport(uris, options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this) || this;\n        /**\n         * The current state of the WSTransport.\n         */\n        _this.state = WSTransportState.Closed;\n        /**\n         * An instance of Logger to use.\n         */\n        _this._log = log_1.default.getInstance();\n        /**\n         * Whether we should attempt to fallback if we receive an applicable error\n         * when trying to connect to a signaling endpoint.\n         */\n        _this._shouldFallback = false;\n        /**\n         * The current uri index that the transport is connected to.\n         */\n        _this._uriIndex = 0;\n        /**\n         * Move the uri index to the next index\n         * If the index is at the end, the index goes back to the first one.\n         */\n        _this._moveUriIndex = function () {\n            _this._uriIndex++;\n            if (_this._uriIndex >= _this._uris.length) {\n                _this._uriIndex = 0;\n            }\n        };\n        /**\n         * Called in response to WebSocket#close event.\n         */\n        _this._onSocketClose = function (event) {\n            _this._log.info(\"Received websocket close event code: \" + event.code + \". Reason: \" + event.reason);\n            // 1006: Abnormal close. When the server is unreacheable\n            // 1015: TLS Handshake error\n            if (event.code === 1006 || event.code === 1015) {\n                _this.emit('error', {\n                    code: 31005,\n                    message: event.reason ||\n                        'Websocket connection to Twilio\\'s signaling servers were ' +\n                            'unexpectedly ended. If this is happening consistently, there may ' +\n                            'be an issue resolving the hostname provided. If a region or an ' +\n                            'edge is being specified in Device setup, ensure it is valid.',\n                    twilioError: new errors_1.SignalingErrors.ConnectionError(),\n                });\n                var wasConnected = (\n                // Only in Safari and certain Firefox versions, on network interruption, websocket drops right away with 1006\n                // Let's check current state if it's open, meaning we should not fallback\n                // because we're coming from a previously connected session\n                _this.state === WSTransportState.Open ||\n                    // But on other browsers, websocket doesn't drop\n                    // but our heartbeat catches it, setting the internal state to \"Connecting\".\n                    // With this, we should check the previous state instead.\n                    _this._previousState === WSTransportState.Open);\n                // Only fallback if this is not the first error\n                // and if we were not connected previously\n                if (_this._shouldFallback || !wasConnected) {\n                    _this._moveUriIndex();\n                }\n                _this._shouldFallback = true;\n            }\n            _this._closeSocket();\n        };\n        /**\n         * Called in response to WebSocket#error event.\n         */\n        _this._onSocketError = function (err) {\n            _this._log.info(\"WebSocket received error: \" + err.message);\n            _this.emit('error', {\n                code: 31000,\n                message: err.message || 'WSTransport socket error',\n                twilioError: new errors_1.SignalingErrors.ConnectionDisconnected(),\n            });\n        };\n        /**\n         * Called in response to WebSocket#message event.\n         */\n        _this._onSocketMessage = function (message) {\n            // Clear heartbeat timeout on any incoming message, as they\n            // all indicate an active connection.\n            _this._setHeartbeatTimeout();\n            // Filter and respond to heartbeats\n            if (_this._socket && message.data === '\\n') {\n                _this._socket.send('\\n');\n                return;\n            }\n            _this.emit('message', message);\n        };\n        /**\n         * Called in response to WebSocket#open event.\n         */\n        _this._onSocketOpen = function () {\n            _this._log.info('WebSocket opened successfully.');\n            _this._timeOpened = Date.now();\n            _this._shouldFallback = false;\n            _this._setState(WSTransportState.Open);\n            clearTimeout(_this._connectTimeout);\n            _this._setHeartbeatTimeout();\n            _this.emit('open');\n        };\n        _this._connectTimeoutMs = options.connectTimeoutMs || CONNECT_TIMEOUT;\n        var initialDelay = 100;\n        if (uris && uris.length > 1) {\n            // We only want a random initial delay if there are any fallback edges\n            // Initial delay between 1s and 5s both inclusive\n            initialDelay = Math.floor(Math.random() * (5000 - 1000 + 1)) + 1000;\n        }\n        var backoffConfig = {\n            factor: 2.0,\n            initialDelay: initialDelay,\n            maxDelay: typeof options.backoffMaxMs === 'number'\n                ? Math.max(options.backoffMaxMs, 3000)\n                : 20000,\n            randomisationFactor: 0.40,\n        };\n        _this._log.info('Initializing transport backoff using config: ', backoffConfig);\n        _this._backoff = Backoff.exponential(backoffConfig);\n        _this._uris = uris;\n        _this._WebSocket = options.WebSocket || WebSocket;\n        // Called when a backoff timer is started.\n        _this._backoff.on('backoff', function (_, delay) {\n            if (_this.state === WSTransportState.Closed) {\n                return;\n            }\n            _this._log.info(\"Will attempt to reconnect WebSocket in \" + delay + \"ms\");\n        });\n        // Called when a backoff timer ends. We want to try to reconnect\n        // the WebSocket at this point.\n        _this._backoff.on('ready', function (attempt) {\n            if (_this.state === WSTransportState.Closed) {\n                return;\n            }\n            _this._connect(attempt + 1);\n        });\n        return _this;\n    }\n    /**\n     * Close the WebSocket, and don't try to reconnect.\n     */\n    WSTransport.prototype.close = function () {\n        this._log.info('WSTransport.close() called...');\n        this._close();\n    };\n    /**\n     * Attempt to open a WebSocket connection.\n     */\n    WSTransport.prototype.open = function () {\n        this._log.info('WSTransport.open() called...');\n        if (this._socket &&\n            (this._socket.readyState === WebSocket.CONNECTING ||\n                this._socket.readyState === WebSocket.OPEN)) {\n            this._log.info('WebSocket already open.');\n            return;\n        }\n        this._connect();\n    };\n    /**\n     * Send a message through the WebSocket connection.\n     * @param message - A message to send to the endpoint.\n     * @returns Whether the message was sent.\n     */\n    WSTransport.prototype.send = function (message) {\n        // We can't send the message if the WebSocket isn't open\n        if (!this._socket || this._socket.readyState !== WebSocket.OPEN) {\n            return false;\n        }\n        try {\n            this._socket.send(message);\n        }\n        catch (e) {\n            // Some unknown error occurred. Reset the socket to get a fresh session.\n            this._log.info('Error while sending message:', e.message);\n            this._closeSocket();\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Close the WebSocket, and don't try to reconnect.\n     */\n    WSTransport.prototype._close = function () {\n        this._setState(WSTransportState.Closed);\n        this._closeSocket();\n    };\n    /**\n     * Close the WebSocket and remove all event listeners.\n     */\n    WSTransport.prototype._closeSocket = function () {\n        clearTimeout(this._connectTimeout);\n        clearTimeout(this._heartbeatTimeout);\n        this._log.info('Closing and cleaning up WebSocket...');\n        if (!this._socket) {\n            this._log.info('No WebSocket to clean up.');\n            return;\n        }\n        this._socket.removeEventListener('close', this._onSocketClose);\n        this._socket.removeEventListener('error', this._onSocketError);\n        this._socket.removeEventListener('message', this._onSocketMessage);\n        this._socket.removeEventListener('open', this._onSocketOpen);\n        if (this._socket.readyState === WebSocket.CONNECTING ||\n            this._socket.readyState === WebSocket.OPEN) {\n            this._socket.close();\n        }\n        // Reset backoff counter if connection was open for long enough to be considered successful\n        if (this._timeOpened && Date.now() - this._timeOpened > CONNECT_SUCCESS_TIMEOUT) {\n            this._backoff.reset();\n        }\n        this._backoff.backoff();\n        delete this._socket;\n        this.emit('close');\n    };\n    /**\n     * Attempt to connect to the endpoint via WebSocket.\n     * @param [retryCount] - Retry number, if this is a retry. Undefined if\n     *   first attempt, 1+ if a retry.\n     */\n    WSTransport.prototype._connect = function (retryCount) {\n        var _this = this;\n        if (retryCount) {\n            this._log.info(\"Attempting to reconnect (retry #\" + retryCount + \")...\");\n        }\n        else {\n            this._log.info('Attempting to connect...');\n        }\n        this._closeSocket();\n        this._setState(WSTransportState.Connecting);\n        var socket = null;\n        try {\n            socket = new this._WebSocket(this._uris[this._uriIndex]);\n        }\n        catch (e) {\n            this._log.info('Could not connect to endpoint:', e.message);\n            this._close();\n            this.emit('error', {\n                code: 31000,\n                message: e.message || \"Could not connect to \" + this._uris[this._uriIndex],\n                twilioError: new errors_1.SignalingErrors.ConnectionDisconnected(),\n            });\n            return;\n        }\n        delete this._timeOpened;\n        this._connectTimeout = setTimeout(function () {\n            _this._log.info('WebSocket connection attempt timed out.');\n            _this._moveUriIndex();\n            _this._closeSocket();\n        }, this._connectTimeoutMs);\n        socket.addEventListener('close', this._onSocketClose);\n        socket.addEventListener('error', this._onSocketError);\n        socket.addEventListener('message', this._onSocketMessage);\n        socket.addEventListener('open', this._onSocketOpen);\n        this._socket = socket;\n    };\n    /**\n     * Set a timeout to reconnect after HEARTBEAT_TIMEOUT milliseconds\n     *   have passed without receiving a message over the WebSocket.\n     */\n    WSTransport.prototype._setHeartbeatTimeout = function () {\n        var _this = this;\n        clearTimeout(this._heartbeatTimeout);\n        this._heartbeatTimeout = setTimeout(function () {\n            _this._log.info(\"No messages received in \" + HEARTBEAT_TIMEOUT / 1000 + \" seconds. Reconnecting...\");\n            _this._shouldFallback = true;\n            _this._closeSocket();\n        }, HEARTBEAT_TIMEOUT);\n    };\n    /**\n     * Set the current and previous state\n     */\n    WSTransport.prototype._setState = function (state) {\n        this._previousState = this.state;\n        this.state = state;\n    };\n    Object.defineProperty(WSTransport.prototype, \"uri\", {\n        /**\n         * The uri the transport is currently connected to\n         */\n        get: function () {\n            return this._uris[this._uriIndex];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return WSTransport;\n}(events_1.EventEmitter));\nexports.default = WSTransport;\n//# sourceMappingURL=wstransport.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/twilio-client/es5/twilio/wstransport.js\n")},"./node_modules/util/support/isBufferBrowser.js":module=>{eval("module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvdXRpbC9zdXBwb3J0L2lzQnVmZmVyQnJvd3Nlci5qcz9kNjBhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy91dGlsL3N1cHBvcnQvaXNCdWZmZXJCcm93c2VyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0J1ZmZlcihhcmcpIHtcbiAgcmV0dXJuIGFyZyAmJiB0eXBlb2YgYXJnID09PSAnb2JqZWN0J1xuICAgICYmIHR5cGVvZiBhcmcuY29weSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcuZmlsbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICYmIHR5cGVvZiBhcmcucmVhZFVJbnQ4ID09PSAnZnVuY3Rpb24nO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/util/support/isBufferBrowser.js\n")},"./node_modules/util/support/types.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("// Currently in sync with Node.js lib/internal/util/types.js\n// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9\n\n\n\nvar isArgumentsObject = __webpack_require__(/*! is-arguments */ \"./node_modules/is-arguments/index.js\");\nvar isGeneratorFunction = __webpack_require__(/*! is-generator-function */ \"./node_modules/is-generator-function/index.js\");\nvar whichTypedArray = __webpack_require__(/*! which-typed-array */ \"./node_modules/which-typed-array/index.js\");\nvar isTypedArray = __webpack_require__(/*! is-typed-array */ \"./node_modules/is-typed-array/index.js\");\n\nfunction uncurryThis(f) {\n  return f.call.bind(f);\n}\n\nvar BigIntSupported = typeof BigInt !== 'undefined';\nvar SymbolSupported = typeof Symbol !== 'undefined';\n\nvar ObjectToString = uncurryThis(Object.prototype.toString);\n\nvar numberValue = uncurryThis(Number.prototype.valueOf);\nvar stringValue = uncurryThis(String.prototype.valueOf);\nvar booleanValue = uncurryThis(Boolean.prototype.valueOf);\n\nif (BigIntSupported) {\n  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);\n}\n\nif (SymbolSupported) {\n  var symbolValue = uncurryThis(Symbol.prototype.valueOf);\n}\n\nfunction checkBoxedPrimitive(value, prototypeValueOf) {\n  if (typeof value !== 'object') {\n    return false;\n  }\n  try {\n    prototypeValueOf(value);\n    return true;\n  } catch(e) {\n    return false;\n  }\n}\n\nexports.isArgumentsObject = isArgumentsObject;\nexports.isGeneratorFunction = isGeneratorFunction;\nexports.isTypedArray = isTypedArray;\n\n// Taken from here and modified for better browser support\n// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js\nfunction isPromise(input) {\n\treturn (\n\t\t(\n\t\t\ttypeof Promise !== 'undefined' &&\n\t\t\tinput instanceof Promise\n\t\t) ||\n\t\t(\n\t\t\tinput !== null &&\n\t\t\ttypeof input === 'object' &&\n\t\t\ttypeof input.then === 'function' &&\n\t\t\ttypeof input.catch === 'function'\n\t\t)\n\t);\n}\nexports.isPromise = isPromise;\n\nfunction isArrayBufferView(value) {\n  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {\n    return ArrayBuffer.isView(value);\n  }\n\n  return (\n    isTypedArray(value) ||\n    isDataView(value)\n  );\n}\nexports.isArrayBufferView = isArrayBufferView;\n\n\nfunction isUint8Array(value) {\n  return whichTypedArray(value) === 'Uint8Array';\n}\nexports.isUint8Array = isUint8Array;\n\nfunction isUint8ClampedArray(value) {\n  return whichTypedArray(value) === 'Uint8ClampedArray';\n}\nexports.isUint8ClampedArray = isUint8ClampedArray;\n\nfunction isUint16Array(value) {\n  return whichTypedArray(value) === 'Uint16Array';\n}\nexports.isUint16Array = isUint16Array;\n\nfunction isUint32Array(value) {\n  return whichTypedArray(value) === 'Uint32Array';\n}\nexports.isUint32Array = isUint32Array;\n\nfunction isInt8Array(value) {\n  return whichTypedArray(value) === 'Int8Array';\n}\nexports.isInt8Array = isInt8Array;\n\nfunction isInt16Array(value) {\n  return whichTypedArray(value) === 'Int16Array';\n}\nexports.isInt16Array = isInt16Array;\n\nfunction isInt32Array(value) {\n  return whichTypedArray(value) === 'Int32Array';\n}\nexports.isInt32Array = isInt32Array;\n\nfunction isFloat32Array(value) {\n  return whichTypedArray(value) === 'Float32Array';\n}\nexports.isFloat32Array = isFloat32Array;\n\nfunction isFloat64Array(value) {\n  return whichTypedArray(value) === 'Float64Array';\n}\nexports.isFloat64Array = isFloat64Array;\n\nfunction isBigInt64Array(value) {\n  return whichTypedArray(value) === 'BigInt64Array';\n}\nexports.isBigInt64Array = isBigInt64Array;\n\nfunction isBigUint64Array(value) {\n  return whichTypedArray(value) === 'BigUint64Array';\n}\nexports.isBigUint64Array = isBigUint64Array;\n\nfunction isMapToString(value) {\n  return ObjectToString(value) === '[object Map]';\n}\nisMapToString.working = (\n  typeof Map !== 'undefined' &&\n  isMapToString(new Map())\n);\n\nfunction isMap(value) {\n  if (typeof Map === 'undefined') {\n    return false;\n  }\n\n  return isMapToString.working\n    ? isMapToString(value)\n    : value instanceof Map;\n}\nexports.isMap = isMap;\n\nfunction isSetToString(value) {\n  return ObjectToString(value) === '[object Set]';\n}\nisSetToString.working = (\n  typeof Set !== 'undefined' &&\n  isSetToString(new Set())\n);\nfunction isSet(value) {\n  if (typeof Set === 'undefined') {\n    return false;\n  }\n\n  return isSetToString.working\n    ? isSetToString(value)\n    : value instanceof Set;\n}\nexports.isSet = isSet;\n\nfunction isWeakMapToString(value) {\n  return ObjectToString(value) === '[object WeakMap]';\n}\nisWeakMapToString.working = (\n  typeof WeakMap !== 'undefined' &&\n  isWeakMapToString(new WeakMap())\n);\nfunction isWeakMap(value) {\n  if (typeof WeakMap === 'undefined') {\n    return false;\n  }\n\n  return isWeakMapToString.working\n    ? isWeakMapToString(value)\n    : value instanceof WeakMap;\n}\nexports.isWeakMap = isWeakMap;\n\nfunction isWeakSetToString(value) {\n  return ObjectToString(value) === '[object WeakSet]';\n}\nisWeakSetToString.working = (\n  typeof WeakSet !== 'undefined' &&\n  isWeakSetToString(new WeakSet())\n);\nfunction isWeakSet(value) {\n  return isWeakSetToString(value);\n}\nexports.isWeakSet = isWeakSet;\n\nfunction isArrayBufferToString(value) {\n  return ObjectToString(value) === '[object ArrayBuffer]';\n}\nisArrayBufferToString.working = (\n  typeof ArrayBuffer !== 'undefined' &&\n  isArrayBufferToString(new ArrayBuffer())\n);\nfunction isArrayBuffer(value) {\n  if (typeof ArrayBuffer === 'undefined') {\n    return false;\n  }\n\n  return isArrayBufferToString.working\n    ? isArrayBufferToString(value)\n    : value instanceof ArrayBuffer;\n}\nexports.isArrayBuffer = isArrayBuffer;\n\nfunction isDataViewToString(value) {\n  return ObjectToString(value) === '[object DataView]';\n}\nisDataViewToString.working = (\n  typeof ArrayBuffer !== 'undefined' &&\n  typeof DataView !== 'undefined' &&\n  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))\n);\nfunction isDataView(value) {\n  if (typeof DataView === 'undefined') {\n    return false;\n  }\n\n  return isDataViewToString.working\n    ? isDataViewToString(value)\n    : value instanceof DataView;\n}\nexports.isDataView = isDataView;\n\nfunction isSharedArrayBufferToString(value) {\n  return ObjectToString(value) === '[object SharedArrayBuffer]';\n}\nisSharedArrayBufferToString.working = (\n  typeof SharedArrayBuffer !== 'undefined' &&\n  isSharedArrayBufferToString(new SharedArrayBuffer())\n);\nfunction isSharedArrayBuffer(value) {\n  if (typeof SharedArrayBuffer === 'undefined') {\n    return false;\n  }\n\n  return isSharedArrayBufferToString.working\n    ? isSharedArrayBufferToString(value)\n    : value instanceof SharedArrayBuffer;\n}\nexports.isSharedArrayBuffer = isSharedArrayBuffer;\n\nfunction isAsyncFunction(value) {\n  return ObjectToString(value) === '[object AsyncFunction]';\n}\nexports.isAsyncFunction = isAsyncFunction;\n\nfunction isMapIterator(value) {\n  return ObjectToString(value) === '[object Map Iterator]';\n}\nexports.isMapIterator = isMapIterator;\n\nfunction isSetIterator(value) {\n  return ObjectToString(value) === '[object Set Iterator]';\n}\nexports.isSetIterator = isSetIterator;\n\nfunction isGeneratorObject(value) {\n  return ObjectToString(value) === '[object Generator]';\n}\nexports.isGeneratorObject = isGeneratorObject;\n\nfunction isWebAssemblyCompiledModule(value) {\n  return ObjectToString(value) === '[object WebAssembly.Module]';\n}\nexports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;\n\nfunction isNumberObject(value) {\n  return checkBoxedPrimitive(value, numberValue);\n}\nexports.isNumberObject = isNumberObject;\n\nfunction isStringObject(value) {\n  return checkBoxedPrimitive(value, stringValue);\n}\nexports.isStringObject = isStringObject;\n\nfunction isBooleanObject(value) {\n  return checkBoxedPrimitive(value, booleanValue);\n}\nexports.isBooleanObject = isBooleanObject;\n\nfunction isBigIntObject(value) {\n  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);\n}\nexports.isBigIntObject = isBigIntObject;\n\nfunction isSymbolObject(value) {\n  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);\n}\nexports.isSymbolObject = isSymbolObject;\n\nfunction isBoxedPrimitive(value) {\n  return (\n    isNumberObject(value) ||\n    isStringObject(value) ||\n    isBooleanObject(value) ||\n    isBigIntObject(value) ||\n    isSymbolObject(value)\n  );\n}\nexports.isBoxedPrimitive = isBoxedPrimitive;\n\nfunction isAnyArrayBuffer(value) {\n  return typeof Uint8Array !== 'undefined' && (\n    isArrayBuffer(value) ||\n    isSharedArrayBuffer(value)\n  );\n}\nexports.isAnyArrayBuffer = isAnyArrayBuffer;\n\n['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {\n  Object.defineProperty(exports, method, {\n    enumerable: false,\n    value: function() {\n      throw new Error(method + ' is not supported in userland');\n    }\n  });\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/util/support/types.js\n")},"./node_modules/util/util.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("/* provided dependency */ var process = __webpack_require__(/*! process/browser */ \"./node_modules/process/browser.js\");\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n  function getOwnPropertyDescriptors(obj) {\n    var keys = Object.keys(obj);\n    var descriptors = {};\n    for (var i = 0; i < keys.length; i++) {\n      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return descriptors;\n  };\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  }\n\n  // Allow for deprecating things in the process of starting up.\n  if (typeof process === 'undefined') {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnvRegex = /^$/;\n\nif (process.env.NODE_DEBUG) {\n  var debugEnv = process.env.NODE_DEBUG;\n  debugEnv = debugEnv.replace(/[|\\\\{}()[\\]^$+?.]/g, '\\\\$&')\n    .replace(/\\*/g, '.*')\n    .replace(/,/g, '$|^')\n    .toUpperCase();\n  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');\n}\nexports.debuglog = function(set) {\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (debugEnvRegex.test(set)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nexports.types = __webpack_require__(/*! ./support/types */ \"./node_modules/util/support/types.js\");\n\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\nexports.types.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\nexports.types.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\nexports.types.isNativeError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ \"./node_modules/util/support/isBufferBrowser.js\");\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = __webpack_require__(/*! inherits */ \"./node_modules/inherits/inherits_browser.js\");\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\nexports.promisify.custom = kCustomPromisifiedSymbol\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  }\n\n  // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n  function callbackified() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n    var self = this;\n    var cb = function() {\n      return maybeCb.apply(self, arguments);\n    };\n    // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n    original.apply(this, args)\n      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },\n            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified,\n                          getOwnPropertyDescriptors(original));\n  return callbackified;\n}\nexports.callbackify = callbackify;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/util/util.js\n")},"./node_modules/which-typed-array/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";eval("\n\nvar forEach = __webpack_require__(/*! foreach */ \"./node_modules/foreach/index.js\");\nvar availableTypedArrays = __webpack_require__(/*! available-typed-arrays */ \"./node_modules/available-typed-arrays/index.js\");\nvar callBound = __webpack_require__(/*! call-bind/callBound */ \"./node_modules/call-bind/callBound.js\");\n\nvar $toString = callBound('Object.prototype.toString');\nvar hasSymbols = __webpack_require__(/*! has-symbols */ \"./node_modules/has-symbols/index.js\")();\nvar hasToStringTag = hasSymbols && typeof Symbol.toStringTag === 'symbol';\n\nvar typedArrays = availableTypedArrays();\n\nvar $slice = callBound('String.prototype.slice');\nvar toStrTags = {};\nvar gOPD = __webpack_require__(/*! es-abstract/helpers/getOwnPropertyDescriptor */ \"./node_modules/es-abstract/helpers/getOwnPropertyDescriptor.js\");\nvar getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');\nif (hasToStringTag && gOPD && getPrototypeOf) {\n\tforEach(typedArrays, function (typedArray) {\n\t\tif (typeof __webpack_require__.g[typedArray] === 'function') {\n\t\t\tvar arr = new __webpack_require__.g[typedArray]();\n\t\t\tif (!(Symbol.toStringTag in arr)) {\n\t\t\t\tthrow new EvalError('this engine has support for Symbol.toStringTag, but ' + typedArray + ' does not have the property! Please report this.');\n\t\t\t}\n\t\t\tvar proto = getPrototypeOf(arr);\n\t\t\tvar descriptor = gOPD(proto, Symbol.toStringTag);\n\t\t\tif (!descriptor) {\n\t\t\t\tvar superProto = getPrototypeOf(proto);\n\t\t\t\tdescriptor = gOPD(superProto, Symbol.toStringTag);\n\t\t\t}\n\t\t\ttoStrTags[typedArray] = descriptor.get;\n\t\t}\n\t});\n}\n\nvar tryTypedArrays = function tryAllTypedArrays(value) {\n\tvar foundName = false;\n\tforEach(toStrTags, function (getter, typedArray) {\n\t\tif (!foundName) {\n\t\t\ttry {\n\t\t\t\tvar name = getter.call(value);\n\t\t\t\tif (name === typedArray) {\n\t\t\t\t\tfoundName = name;\n\t\t\t\t}\n\t\t\t} catch (e) {}\n\t\t}\n\t});\n\treturn foundName;\n};\n\nvar isTypedArray = __webpack_require__(/*! is-typed-array */ \"./node_modules/is-typed-array/index.js\");\n\nmodule.exports = function whichTypedArray(value) {\n\tif (!isTypedArray(value)) { return false; }\n\tif (!hasToStringTag) { return $slice($toString(value), 8, -1); }\n\treturn tryTypedArrays(value);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS50d2lsaW8vLi9ub2RlX21vZHVsZXMvd2hpY2gtdHlwZWQtYXJyYXkvaW5kZXguanM/ZWRjNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixjQUFjLG1CQUFPLENBQUMsZ0RBQVM7QUFDL0IsMkJBQTJCLG1CQUFPLENBQUMsOEVBQXdCO0FBQzNELGdCQUFnQixtQkFBTyxDQUFDLGtFQUFxQjs7QUFFN0M7QUFDQSxpQkFBaUIsbUJBQU8sQ0FBQyx3REFBYTtBQUN0Qzs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxtQkFBTyxDQUFDLG9IQUE4QztBQUNqRSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBLGFBQWEscUJBQU07QUFDbkIsaUJBQWlCLHFCQUFNO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUEsbUJBQW1CLG1CQUFPLENBQUMsOERBQWdCOztBQUUzQztBQUNBLDRCQUE0QixjQUFjO0FBQzFDLHVCQUF1Qix3Q0FBd0M7QUFDL0Q7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy93aGljaC10eXBlZC1hcnJheS9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGZvckVhY2ggPSByZXF1aXJlKCdmb3JlYWNoJyk7XG52YXIgYXZhaWxhYmxlVHlwZWRBcnJheXMgPSByZXF1aXJlKCdhdmFpbGFibGUtdHlwZWQtYXJyYXlzJyk7XG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnY2FsbC1iaW5kL2NhbGxCb3VuZCcpO1xuXG52YXIgJHRvU3RyaW5nID0gY2FsbEJvdW5kKCdPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nJyk7XG52YXIgaGFzU3ltYm9scyA9IHJlcXVpcmUoJ2hhcy1zeW1ib2xzJykoKTtcbnZhciBoYXNUb1N0cmluZ1RhZyA9IGhhc1N5bWJvbHMgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG5cbnZhciB0eXBlZEFycmF5cyA9IGF2YWlsYWJsZVR5cGVkQXJyYXlzKCk7XG5cbnZhciAkc2xpY2UgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuc2xpY2UnKTtcbnZhciB0b1N0clRhZ3MgPSB7fTtcbnZhciBnT1BEID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvaGVscGVycy9nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjsgLy8gcmVxdWlyZSgnZ2V0cHJvdG90eXBlb2YnKTtcbmlmIChoYXNUb1N0cmluZ1RhZyAmJiBnT1BEICYmIGdldFByb3RvdHlwZU9mKSB7XG5cdGZvckVhY2godHlwZWRBcnJheXMsIGZ1bmN0aW9uICh0eXBlZEFycmF5KSB7XG5cdFx0aWYgKHR5cGVvZiBnbG9iYWxbdHlwZWRBcnJheV0gPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdHZhciBhcnIgPSBuZXcgZ2xvYmFsW3R5cGVkQXJyYXldKCk7XG5cdFx0XHRpZiAoIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gYXJyKSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXZhbEVycm9yKCd0aGlzIGVuZ2luZSBoYXMgc3VwcG9ydCBmb3IgU3ltYm9sLnRvU3RyaW5nVGFnLCBidXQgJyArIHR5cGVkQXJyYXkgKyAnIGRvZXMgbm90IGhhdmUgdGhlIHByb3BlcnR5ISBQbGVhc2UgcmVwb3J0IHRoaXMuJyk7XG5cdFx0XHR9XG5cdFx0XHR2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGVPZihhcnIpO1xuXHRcdFx0dmFyIGRlc2NyaXB0b3IgPSBnT1BEKHByb3RvLCBTeW1ib2wudG9TdHJpbmdUYWcpO1xuXHRcdFx0aWYgKCFkZXNjcmlwdG9yKSB7XG5cdFx0XHRcdHZhciBzdXBlclByb3RvID0gZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuXHRcdFx0XHRkZXNjcmlwdG9yID0gZ09QRChzdXBlclByb3RvLCBTeW1ib2wudG9TdHJpbmdUYWcpO1xuXHRcdFx0fVxuXHRcdFx0dG9TdHJUYWdzW3R5cGVkQXJyYXldID0gZGVzY3JpcHRvci5nZXQ7XG5cdFx0fVxuXHR9KTtcbn1cblxudmFyIHRyeVR5cGVkQXJyYXlzID0gZnVuY3Rpb24gdHJ5QWxsVHlwZWRBcnJheXModmFsdWUpIHtcblx0dmFyIGZvdW5kTmFtZSA9IGZhbHNlO1xuXHRmb3JFYWNoKHRvU3RyVGFncywgZnVuY3Rpb24gKGdldHRlciwgdHlwZWRBcnJheSkge1xuXHRcdGlmICghZm91bmROYW1lKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHR2YXIgbmFtZSA9IGdldHRlci5jYWxsKHZhbHVlKTtcblx0XHRcdFx0aWYgKG5hbWUgPT09IHR5cGVkQXJyYXkpIHtcblx0XHRcdFx0XHRmb3VuZE5hbWUgPSBuYW1lO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlKSB7fVxuXHRcdH1cblx0fSk7XG5cdHJldHVybiBmb3VuZE5hbWU7XG59O1xuXG52YXIgaXNUeXBlZEFycmF5ID0gcmVxdWlyZSgnaXMtdHlwZWQtYXJyYXknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB3aGljaFR5cGVkQXJyYXkodmFsdWUpIHtcblx0aWYgKCFpc1R5cGVkQXJyYXkodmFsdWUpKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAoIWhhc1RvU3RyaW5nVGFnKSB7IHJldHVybiAkc2xpY2UoJHRvU3RyaW5nKHZhbHVlKSwgOCwgLTEpOyB9XG5cdHJldHVybiB0cnlUeXBlZEFycmF5cyh2YWx1ZSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/which-typed-array/index.js\n")}},__webpack_module_cache__={};function __webpack_require__(n){var e=__webpack_module_cache__[n];if(void 0!==e)return e.exports;var I=__webpack_module_cache__[n]={exports:{}};return __webpack_modules__[n].call(I.exports,I,I.exports,__webpack_require__),I.exports}__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}();var __webpack_exports__=__webpack_require__("./src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()}));